/* Mesquite module ~~ Copyright 1997-2001 W. & D. Maddison*/package mesquite.speciation.CharsAttachedToTree;/*~~  */import java.applet.*;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;/** ======================================================================== *//* */public class CharsAttachedToTree extends CharacterSource {	int currentChar=0;	Taxa taxa=null;	CharacterDistribution character;	Object condition;	Tree lastTree;	OneTreeSource treeTask;	/*.................................................................................................................*/	/** condition passed to this module must be subclass of CharacterState */	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) { 		if (condition!=null && condition instanceof Class) {						this.condition = condition;	 	} 		treeTask = (OneTreeSource)hireEmployee(commandRec, OneTreeSource.class, "Source of tree from which to seek attached characters"); 		if (treeTask == null)  { 			return sorry(commandRec, getName() + " could not be started because no tree was found from which to seek attached characters"); 		} 		return true;  	 }	/*.................................................................................................................*/	/*.................................................................................................................*/	/** Generated by an employee who quit.  The MesquiteModule should act accordingly. */ 	public void employeeQuit(MesquiteModule employee) { 		if (employee == treeTask) 			iQuit();	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	//temp.addLine("setDataSet " + getProject().getCharMatrixReference(data));  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets which stored data matrix to use", "[matrix reference]", commandName, "setDataSet")) {    	 		//remember which of several attached to use???    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/   	public void initialize(Taxa taxa, CommandRecord commandRec){		treeTask.initialize(taxa, commandRec);   	}   		public boolean checkCharacter(CommandRecord commandRec, Tree tree) {   		if (tree == null)   			return false;  		if (character==null || character.getTaxa() != tree.getTaxa() || tree !=lastTree) {			if (tree instanceof MesquiteTree){				lastTree = tree;			 	MesquiteTree mTree = ((MesquiteTree)lastTree);			 	character = (CharacterDistribution)mTree.getAttachedSensitive(CharacterDistribution.class, 0); //should use condition for data class			 	if (character == null)			 		MesquiteMessage.warnProgrammer("Error in CharsAttachedToTree: no character attached to tree");			}			   			   			if (character == null)   				return false;   			return true;   		}   		else   			return true;   	} 	public boolean usesTree()  { 		return true; 	}	/*.................................................................................................................*/   	private CharacterDistribution getC(Tree tree, CommandRecord commandRec) {   		if (checkCharacter(commandRec, tree)){	   		if (character == null)	   			MesquiteMessage.warnUser("Error in CharsAttachedToTree: No character attached to tree " + currentChar);			return character;   		}   		else   			return null;   	}   	/** gets the indicated matrix.*/   	public CharacterDistribution getCharacter(Tree tree, int ic, CommandRecord commandRec){   		if (tree==null) return null;   		currentChar=ic;   		return getC(tree, commandRec);   	}	/*.................................................................................................................*/   	public CharacterDistribution getCharacter(Taxa taxa, int ic, CommandRecord commandRec) {   		currentChar=ic;   		return getC(treeTask.getTree(taxa, commandRec), commandRec);   	}	/*.................................................................................................................*/   	public int getNumberOfCharacters(Tree tree, CommandRecord commandRec) {   		if (checkCharacter(commandRec, tree))   		   	return 1;   		else   			return 0;   	}	/*.................................................................................................................*/   	public int getNumberOfCharacters(Taxa taxa, CommandRecord commandRec) {   			return 0;   	}   	/*.................................................................................................................*/   	/** returns the name of character ic*/   	public String getCharacterName(Tree tree, int ic, CommandRecord commandRec){   		if (checkCharacter(commandRec, tree)) {	   		return "Character attached to tree";     		}   		return null;   	}	/*.................................................................................................................*/   	/** returns the name of character ic*/   	public String getCharacterName(Taxa taxa, int ic, CommandRecord commandRec){	   		return "Character attached to tree";     	}	/*.................................................................................................................*    	private  int getNumberOfMatrices(Taxa taxa){    		    	}	CharacterPartition colorSet;	/*.................................................................................................................*   	public void prepareItemColors(Taxa taxa, CommandRecord commandRec){		if (taxa==null || data == null || data.getTaxa()!=taxa)			colorSet=null;		else			colorSet = (CharacterPartition)data.getCurrentSpecsSet(CharacterPartition.class);    	}   	public Color getItemColor(Taxa taxa, int ic, CommandRecord commandRec){   		if (colorSet==null || taxa == null)   			return null;		CharactersGroup mi = (CharactersGroup)colorSet.getProperty(ic);		if (mi!=null && mi.getColor()!=null) {			return mi.getColor();		}		return null;   	}	/*.................................................................................................................*/    	 public String getName() {		return "Characters attached to tree";     	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/   	  	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Supplies characters that are attached to a current tree." ;   	 }	/*.................................................................................................................*/ 	/** returns current parameters, for logging etc..* 	public String getParameters() {		String s = "Characters stored in: " + getProject().getName();		if (data!=null)			s +=  " (current matrix: " + data.getName() + ")";		return s;   	 }   	 */   	 }