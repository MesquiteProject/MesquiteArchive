package mesquite.tj.ShowTreeTJ;import java.io.*;import mesquite.lib.*;import mesquite.lib.duties.*;import TreeJuxtaposer.*;public class ShowTreeTJ extends TreeWindowAssistantN {	TreeJuxtaposer tj;	MesquiteBoolean auto;	MesquiteMenuItemSpec addTreeItem;	String treeString = null;  	 /*--------------------------------------*/	/*The basic substitute for a constructor for modules  <b>(overrides method of MesquiteModule)</b>*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		//options: tree live?  if not, then options to refresh or add other tree?		//TJ api -- show window; set tree; add tree; 		//Mesquite api -- window closing		auto = new MesquiteBoolean(true);		MesquiteSubmenuSpec mss = addSubmenu(null, "Tree Juxtaposer");		addCheckMenuItemToSubmenu(null, mss, "Automatic Updating", makeCommand("toggleAuto",  this), auto);		addTreeItem = addItemToSubmenu(null, mss, "Add Tree", makeCommand("addTree", this));		addTreeItem.setEnabled(!auto.getValue());		try {			tj = new TreeJuxtaposer();		}		catch (Exception e){			return errorMessage(e);		}		catch (Error e){			return errorMessage(e);		} 		return true;  	 }  	 boolean errorMessage(Throwable e){		MesquiteMessage.printStackTrace(e);		PrintWriter pw = MesquiteFile.getLogWriter();		if (pw!=null)			e.printStackTrace(pw);		alert("A problem occurred in starting up TreeJuxtaposer.  Make sure you have followed the installation instructions properly");		return false;  	 }	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	}  	 /*--------------------------------------*/	/*A method necessary with modules of subclass TreeWindowAssistantN; allows standard tree window	on which this module depends to indicate tree has changed  <b>(overrides method of TreeWindowAssistantN)</b>*/	public   void setTree(Tree tree, CommandRecord commandRec) {		this.treeString = tree.writeTreeByNames(true);		//Debugg.println("tree " + treeString);		if (auto.getValue()) {System.out.println("updateST " + treeString);			replaceTree();System.out.println("done update2 ======= ");		}	}	void replaceTree(){		if (treeString !=null){			STJThread t = new STJThread(tj, treeString);			t.start();		}		//tj.replaceNewickString(treeString);	}  	 /*--------------------------------------*/	/*Makes the module shut down when the go-away box of the window is touched  <b>(overrides method of MesquiteModule)</b>*/ 	public void windowGoAway(MesquiteWindow whichWindow) {		whichWindow.hide();		whichWindow.dispose();		iQuit();	}  	 /*--------------------------------------*/	/*Returns the snapshot necessary to get this module back to the current state.  Note that it incorporates	a snapshot from its window  <b>(overrides method of MesquiteModule)</b>*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot sn = new Snapshot();    	 	sn.addLine("toggleAuto " + auto.toOffOnString());   	 	return sn;  	 }  	 /*--------------------------------------*/  	 MesquiteInteger pos = new MesquiteInteger();	/*The standard method for Commandable interface; receives commands either for snapshotting purposes	or from menu actions  <b>(overrides method of MesquiteModule)</b>*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether or not trees are automatically updated in TJ", "[on or off]", commandName, "toggleAuto")) {			boolean old = auto.getValue();			auto.toggleValue(ParseUtil.getFirstToken(arguments, pos));			if (old != auto.getValue()){				addTreeItem.setEnabled(!auto.getValue());				MesquiteTrunk.resetMenuItemEnabling();				if (auto.getValue() && treeString != null && !commandRec.scripting()){System.out.println("updateDC " + treeString);					replaceTree();				}								}			    	 	}    	 	else if (checker.compare(this.getClass(), "Adds current tree to TJ", null, commandName, "addTree")) {			if (treeString != null)				tj.addNewickString(treeString);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }  	 /*--------------------------------------*/	/*Indicates to the name of this module for purposes of menu listings and documentation.  <b>(overrides method of MesquiteModule)</b>*/    	 public String getName() {		return "Show Tree in TJ";   	 }  	 /*--------------------------------------*/ 	/*Returns an explanation of what the module does.  <b>(overrides method of MesquiteModule)</b>*/ 	public String getExplanation() { 		return "Displays current trees in TJ." ;   	 }}	class STJThread extends Thread {	TreeJuxtaposer tj;	String tree;	public STJThread (TreeJuxtaposer tj, String tree) {		this.tj = tj;		this.tree = tree;	}	/** DOCUMENT */	public void run() {		tj.replaceNewickString(tree);	}}