/* Mesquite source code.  Copyright 1997-2005 W. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.coalesce.DuplicationsExtinctionsG;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.coalesce.lib.*;import mesquite.assoc.lib.*;/* ======================================================================== *//** This evaluates a gene tree by calculating how much lineage sorting is implied by a containing species tree. */public class DuplicationsExtinctionsG extends GeneTreeFit {	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {//		superStartJob(arguments, condition, commandRec, hiredByName);		return true;  	 } 	   	/*.................................................................................................................*/ 	public void calculateCost(ReconstructAssociation reconstructTask, Tree speciesTree, MesquiteTree geneTree, TaxaAssociation association, MesquiteNumber result, MesquiteString r, CommandRecord commandRec){        if (result != null){	        	AssociationHistory history = reconstructTask.reconstructHistory(speciesTree, geneTree, association, result, r, commandRec);	        	MesquiteInteger duplications = new MesquiteInteger(0);	        	MesquiteInteger extinctions = new MesquiteInteger(0);	        	history.countDuplicationsExtinctions(speciesTree, geneTree, duplications, extinctions);	        	if (r != null)	        		r.setValue("Duplications " + duplications.getValue() + "; Extinctions: " + extinctions.getValue());	        	result.setValue(duplications.getValue() + extinctions.getValue());	        }	}	/*.................................................................................................................*/ 	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE double, 	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite. 	 * If a NEGATIVE double,  thne the number refers to the local version of the package, e.g. a third party package*/    	public double getVersionOfFirstRelease(){    		return 1.07;      	}	/*.................................................................................................................*/   	public boolean isPrerelease(){   		return true;   	} 	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return true;   	 } 	/*.................................................................................................................*/	 public String getExplanation() {	return "Counts the number of duplication and extinction events for gene tree implied by a containing species tree";	 }/*.................................................................................................................*/	 public String getName() {	return "Gene Duplication-Extinction (gene tree)";	 }}