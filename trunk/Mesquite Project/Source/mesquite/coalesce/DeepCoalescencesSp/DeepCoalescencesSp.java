/* Mesquite source code.  Copyright 1997-2005 W. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.coalesce.DeepCoalescencesSp;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.coalesce.lib.*;import mesquite.assoc.lib.*;/* ======================================================================== *//** This evaluates a species tree by calculating how much lineage sorting is implied by a contained gene tree. */public class DeepCoalescencesSp extends SpeciesTreeFit  {	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {//		superStartJob(arguments, condition, commandRec, hiredByName);		return true;  	 } 	   	/*.................................................................................................................*/ 	public void calculateCost(ReconstructAssociation reconstructTask, Tree speciesTree, MesquiteTree geneTree, TaxaAssociation association, MesquiteNumber result, MesquiteString r, CommandRecord commandRec){	        if (result != null){	        	AssociationHistory history = reconstructTask.reconstructHistory(speciesTree, geneTree, association, result, r, commandRec);	        	MesquiteInteger count = new MesquiteInteger(0);	        	Debugg.println("===========");	        	countDE(history, speciesTree, geneTree, association, speciesTree.getRoot(), count);	        	Debugg.println("===calcCost " + result + "  recalcCost " + count);	        	Debugg.println("===========");	        }	}	/*_________________________________________________*/	/** this method recurses up the containing (species?) tree and calculates how the contained tree fits into it */	private void countDE(AssociationHistory history, Tree containingTree, AdjustableTree containedTree, TaxaAssociation association, int node, MesquiteInteger count) {			if (containingTree.nodeIsInternal(node)) {//containing node is internal: recurse up the tree, and on way down ask to condense the genes within each of the daughters to the representatives of monophyletic groups				//first recurse up the tree				for (int d = containingTree.firstDaughterOfNode(node); containingTree.nodeExists(d); d = containingTree.nextSisterOfNode(d)) 					countDE(history, containingTree,containedTree, association, d, count);								int [] containedNodes = history.getContainedNodes(node);											//	if (node != containingTree.getRoot()){					count.add(history.getNumberContainedNodes(node)-2);					Debugg.println("node " + node + "  " + history.getNumberContainedNodes(node) + " contained " + IntegerArray.toString(history.getContainedNodes(node)));			//	}			}	}			private boolean daughtersInEachDaughter(AssociationHistory history, Tree containingTree, Tree containedTree, int containedNode, int containingNode){		for (int d = containedTree.firstDaughterOfNode(containedNode); containedTree.nodeExists(d); d = containedTree.nextSisterOfNode(d)) {  //going through all daughters of contained			//countDE(history, containingTree,containedTree, association, d, count);		}		return true;	}	/*_________________________________________________*/	/** this method recurses up the containing (species?) tree and calculates how the contained tree fits into it */	private void countDC(AssociationHistory history, Tree containingTree, AdjustableTree containedTree, TaxaAssociation association, int node, MesquiteInteger count) {			if (containingTree.nodeIsInternal(node)) {//containing node is internal: recurse up the tree, and on way down ask to condense the genes within each of the daughters to the representatives of monophyletic groups				//first recurse up the tree				for (int d = containingTree.firstDaughterOfNode(node); containingTree.nodeExists(d); d = containingTree.nextSisterOfNode(d)) 					countDE(history, containingTree,containedTree, association, d, count);							//	if (node != containingTree.getRoot()){					count.add(history.getNumberContainedNodes(node)-2);					Debugg.println("node " + node + "  " + history.getNumberContainedNodes(node) + " contained " + IntegerArray.toString(history.getContainedNodes(node)));			//	}			}	}	/*.................................................................................................................*/   	public boolean isPrerelease(){   		return false;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return true;   	 } 	/*.................................................................................................................*/    	 public String getExplanation() {		return "Counts W. Maddison's (1997) number of extra gene lineages (\"deep coalescences\") for species tree containing gene tree";   	 }   	/*.................................................................................................................*/    	 public String getName() {		return "Deep Coalescences (species tree)";   	 }}