/* Mesquite source code.  Copyright 1997-2004 W. Maddison and D. Maddison. Version 1.01, January 2004.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.trees.NumForCharRespTree;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;/* ======================================================================== */public class NumForCharRespTree extends NumberForCharacter {	public String getName() {		return "Character value with respective tree";	}	public String getNameForMenuItem() {		return "Character value with respectivetree...";	}	public String getVeryShortName() {		if (numberTask ==null)			return "Character value with respective tree";		else			return numberTask.getVeryShortName() + " (with tree)";	}	public String getExplanation() {		return "Coordinates the calculation of a number for a character based on a respective tree." ;	}	public void getEmployeeNeeds(){  //This gets called on startup to harvest information; override this and inside, call registerEmployeeNeed		EmployeeNeed e = registerEmployeeNeed(NumberForCharAndTree.class, getName() + "  needs a method to calculate the value for a character using the trees.",		"The method to calculate values can be selected initially or in the Values submenu");		EmployeeNeed e2 = registerEmployeeNeed(TreeSource.class, getName() + "  needs a source for trees.",		"The source for trees can be requested initially or using the Tree Source submenu");		e2.setDivertChainMessage("testing");	}	/*.................................................................................................................*/	NumberForCharAndTree numberTask;	TreeSource treeTask;	Taxa taxa;	Tree tree;	MesquiteString treeSourceName;	MesquiteCommand tsC;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		treeTask = (TreeSource)hireEmployee(commandRec, TreeSource.class, "Source of trees (for Character Value)");		if (treeTask == null)			return sorry(commandRec, getName() + " couldn't start because no source of trees obtained");		treeSourceName = new MesquiteString(treeTask.getName());		tsC = makeCommand("setTreeSource",  this);		treeTask.setHiringCommand(tsC);		if (numModulesAvailable(TreeSource.class)>1) {			MesquiteSubmenuSpec mss = addSubmenu(null, "Tree Source", tsC);			mss.setSelected(treeSourceName);			mss.setList(TreeSource.class);		}		numberTask = (NumberForCharAndTree)hireEmployee(commandRec, NumberForCharAndTree.class, "Value to calculate for character");		if (numberTask == null)			return sorry(commandRec, getName() + " couldn't start because no calculator module obtained.");		if (getHiredAs() == NumberForCharacter.class){ //not hired as incrementable; offer menu item to change			addMenuItem( "Choose tree...", makeCommand("chooseTree",  this));		}		return true;	}	public CompatibilityTest getCompatibilityTest(){		if (numberTask !=null)			return numberTask.getCompatibilityTest();		return null;	}	public void employeeQuit(MesquiteModule m){		iQuit();	}	/*.................................................................................................................*/	public boolean isPrerelease(){		return true;	}	/*.................................................................................................................*/	public Snapshot getSnapshot(MesquiteFile file) {		Snapshot temp = new Snapshot();		temp.addLine("setTreeSource " , treeTask);		return temp;	}	/*.................................................................................................................*/	public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {		if (checker.compare(this.getClass(), "Sets the source of trees", "[name of tree source module]", commandName, "setTreeSource")) {			TreeSource temp = (TreeSource)replaceEmployee(commandRec, TreeSource.class, arguments, "Source of trees (for Character Value)", treeTask);			if (temp !=null){				treeTask = temp;				treeTask.setPreferredTaxa(taxa);				treeTask.setHiringCommand(tsC);				treeSourceName.setValue(treeTask.getName());				parametersChanged(null, commandRec);				return treeTask;			}		}		else			return super.doCommand(commandName, arguments, commandRec, checker);		return null;	}	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/	public void initialize(CharacterDistribution charStates, CommandRecord commandRec){		if (charStates == null)			return;		CharacterData data = charStates.getParentData();		if (data!=null) {			taxa = data.getTaxa();			treeTask.initialize(taxa, commandRec);			numberTask.initialize(treeTask.getTree(taxa, 0, commandRec), charStates, commandRec);		}		if (taxa==null)			taxa = getProject().chooseTaxa(containerOfModule(), "Taxa", commandRec); 	}	MesquiteString rs = new MesquiteString();	/*.................................................................................................................*/	public  void calculateNumber(CharacterDistribution charStates, MesquiteNumber result, MesquiteString resultString, CommandRecord commandRec) {		if (result==null)			return;		result.setToUnassigned();		if (taxa==null){			initialize(charStates, commandRec);		}		int currentTree = charStates.getParentCharacter();		tree = treeTask.getTree(taxa, currentTree, commandRec);		rs.setValue("");		numberTask.calculateNumber(tree, charStates, result, rs, commandRec);		if (resultString!=null) {			resultString.setValue("For tree " + tree.getName() + ", ");			resultString.append(rs.toString());		}	}	/*.................................................................................................................*/	/*.................................................................................................................*/	public String getParameters(){		if (tree ==null)			return "Calculator: " + numberTask.getName(); //of which tree??		else			return "Calculator: " + numberTask.getName() + " with tree \"" + tree.getName() + "\""; 	}}