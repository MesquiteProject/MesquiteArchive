/* Mesquite source code, Treefarm package.  Copyright 1997-2004 W. Maddison, D. Maddison and P. Midford. Version 1.05, September 2004.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.treefarm.CladeMatch;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class CladeMatch extends NumbersForNodes {	Tree otherTree = null;	OneTreeSource otherTreeTask;	NumberFor2Trees treeDifferenceTask;		// module that calculates inter-tree distances	MesquiteString treeDifferenceTaskName;	// String for use in subment for distance metric	MesquiteCommand tdC;					// Command to react to menu choice of tree difference metric	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) { 		otherTreeTask = (OneTreeSource)hireEmployee(commandRec, OneTreeSource.class, "Source of tree for comparison"); 		if (otherTreeTask == null) { 			return sorry(commandRec, getName() + " couldn't start because no source of a comparison tree was obtained."); 		}		treeDifferenceTask = (NumberFor2Trees)hireEmployee(commandRec, NumberFor2Trees.class, "Value to calculate between tree and other tree");		if (treeDifferenceTask == null) {			return sorry(commandRec, getName() + " couldn't start because no module to calculate a number for 2 trees was obtained.");		}		tdC = makeCommand("setTreeDifferenceTask",  this);		treeDifferenceTask.setHiringCommand(tdC);		treeDifferenceTaskName = new MesquiteString(treeDifferenceTask.getName());		if (numModulesAvailable(NumberFor2Trees.class)>1){			MesquiteSubmenuSpec mss = addSubmenu(null, "Tree-Tree value", tdC, NumberFor2Trees.class);			mss.setSelected(treeDifferenceTaskName);		} 		return true;  	 }  	 public void employeeQuit(MesquiteModule m){  	 	iQuit();  	 }	public Snapshot getSnapshot(MesquiteFile file) { 		Snapshot temp = new Snapshot();  	 	temp.addLine("setTreeSource ", otherTreeTask);   	 	temp.addLine("setTreeDifferenceTask ", treeDifferenceTask);		return temp;	}	public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {		if (checker.compare(this.getClass(), "Sets the tree-to-tree value calculator", "[name of module]", commandName, "setTreeDifferenceTask")) {			NumberFor2Trees temp = (NumberFor2Trees)replaceEmployee(commandRec, NumberFor2Trees.class, arguments, "Tree-to-tree value", treeDifferenceTask);			if (temp != null) {				treeDifferenceTask = temp;				treeDifferenceTask.setHiringCommand(tdC);				treeDifferenceTaskName.setValue(treeDifferenceTask.getName());				parametersChanged(null, commandRec);			}			return treeDifferenceTask;		}    	 	else if (checker.compare(this.getClass(), "Sets the source of the comparison tree", "[name of module]", commandName, "setTreeSource")) {			OneTreeSource temp = (OneTreeSource)replaceEmployee(commandRec, OneTreeSource.class, arguments, "Source of other tree", otherTreeTask);			if (temp !=null){				otherTreeTask = temp;				parametersChanged(null, commandRec);    	 			return otherTreeTask;    	 		}    	 	}		else 			super.doCommand(commandName, arguments, commandRec, checker);		return null;	}   	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/   	public void initialize(Tree tree, CommandRecord commandRec){   		if (otherTreeTask!=null)   			otherTreeTask.initialize(tree.getTaxa(), commandRec);   		if (treeDifferenceTask!=null)   			treeDifferenceTask.initialize(tree, otherTree, commandRec);   	}	/*.................................................................................................................*/	MesquiteTree tempTree;	public   void visitNodes(int node, Tree tree, Tree otherTree, NumberArray result, CommandRecord commandRec) {		if (tree.nodeIsInternal(node)){// && tree.numberOfTerminalsInClade(node)>3){			tempTree.readTree(tree.writeClade(node, MesquiteTree.BY_NUMBERS, false));			MesquiteNumber mN = new MesquiteNumber();			mN.setToUnassigned();			treeDifferenceTask.calculateNumber(tempTree, otherTree, mN, null, commandRec);			result.setValue(node, mN);					}		for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)) 			visitNodes(d, tree, otherTree, result, commandRec);	}	/*.................................................................................................................*/	public void calculateNumbers(Tree tree, NumberArray result, MesquiteString resultString, CommandRecord commandRec) {    	 	if (result==null)    	 		return;		result.deassignArray();		if (resultString!=null)			resultString.setValue("");		if (tree == null || otherTreeTask==null)			return;				otherTree = otherTreeTask.getTree(tree.getTaxa(), commandRec);		if (otherTree == null||treeDifferenceTask == null)			return;		tempTree = new MesquiteTree(tree.getTaxa());		visitNodes(tree.getRoot(), tree, otherTree, result, commandRec);	}	/*.................................................................................................................*/    	 public String getParameters() {		if (treeDifferenceTask ==null)			return null;		String s = "Comparison: " + treeDifferenceTask.getName(); 		if (otherTree !=null)			s += "; comparison tree: " + otherTree;		return s;   	 }	/*.................................................................................................................*/	public String getNameAndParameters(){		if (treeDifferenceTask ==null)			return getName();		String s = treeDifferenceTask.getName(); 		if (otherTree !=null)			s += "; comparison tree: " + otherTree;		return s; 	}	/*.................................................................................................................*/    	 public String getName() {		return "Clade Match with Another Current Tree";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Calculates a number relating a clade and another current tree (e.g., a tree-to-tree distance metric).";   	 }   	public boolean isPrerelease(){   		return true;   	}}