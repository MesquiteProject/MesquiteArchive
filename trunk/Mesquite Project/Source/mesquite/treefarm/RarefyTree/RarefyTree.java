/* Mesquite source code, Treefarm package.  Copyright 1997-2006 W. Maddison, D. Maddison and P. Midford. Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.treefarm.RarefyTree;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.treefarm.lib.*;/* ======================================================================== */public class RarefyTree extends RndTreeModifier {	int numExcluded=1;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {  		if (!commandRec.scripting()){    	 	int s = MesquiteInteger.queryInteger(containerOfModule(), "Number of taxa to exclude", "Enter the number of randomly chosen taxa to exclude", numExcluded); 	 		if (MesquiteInteger.isCombinable(s)) 	 			numExcluded = s; 	 		else 				return false;  		}  		addMenuItem("Number of Taxa Excluded...", makeCommand("setNumberExcluded",  this));  		return true;  	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = super.getSnapshot(file);  	 	temp.addLine("setNumberExcluded " + numExcluded);  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {     	 	if (checker.compare(this.getClass(), "Sets the number of randomly chosen taxa to exclude", "[number]", commandName, "setNumberExcluded")) {    	 		int s = MesquiteInteger.fromString(parser.getFirstToken(arguments));    	 		if (!MesquiteInteger.isCombinable(s)){    	 			s = MesquiteInteger.queryInteger(containerOfModule(), "Number of taxa to exclude", "Enter the number of randomly chosen taxa to exclude", numExcluded);    	 		}    	 		if (MesquiteInteger.isCombinable(s)){    	 			numExcluded = s; 					parametersChanged(null, commandRec);  				}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/   	 public void modifyTree(Tree tree, MesquiteTree modified, RandomBetween rng, CommandRecord commandRec){   		if (tree == null || modified == null)   			return;   		if (tree.getTaxa().anySelected()){			int[] terminals =tree.getTerminalTaxa(tree.getRoot());			if (terminals == null)				return;			int numTerminals = 0;			for (int i= 0; i< terminals.length; i++)				if (tree.getTaxa().getSelected(terminals[i]))					numTerminals++;			if (numTerminals>numExcluded){		   		for (int it = 0; it<numExcluded; it++) {		   			int taxon = rng.randomIntBetween(0, numTerminals-it-1);					int count = 0;					for (int i= 0; i< terminals.length; i++) {						if (tree.getTaxa().getSelected(terminals[i])) {							if (taxon == count){  //this is one to delete					   			int nT = modified.nodeOfTaxonNumber(terminals[i]);					   			modified.deleteClade(nT, false);															}							count++;						}		   			}		   		}	   		}   		}   		else {			int numTerminals =tree.numberOfTerminalsInClade(tree.getRoot());			if (numTerminals>numExcluded){		   		for (int it = 0; it<numExcluded; it++) {		   			int taxon = rng.randomIntBetween(0, numTerminals-it-1);		   			int nT = modified.getTerminalNode(modified.getRoot(), taxon);		   			modified.deleteClade(nT, false);		   		}	   		}   		}   	}	/*.................................................................................................................*/   	public String getParameters() {   		return"Number of taxa excluded randomly: " + numExcluded;   	}	/*.................................................................................................................*/    	 public String getName() {		return "Rarefy Tree";   	 }   	public boolean isPrerelease(){   		return false;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return true;   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Rarefies tree by randomly excluding taxa.  If some taxa are selected, random exclusion is limited to the selected taxa.";   	 }   	 }