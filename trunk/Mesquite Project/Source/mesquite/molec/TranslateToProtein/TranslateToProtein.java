/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.1, May 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.molec.TranslateToProtein;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.categ.lib.*;/* ======================================================================== */public class TranslateToProtein extends CharMatrixSource {	CharMatrixSource dataTask;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {				dataTask = (CharMatrixSource)hireNamedEmployee(commandRec,  CharMatrixSource.class, "#StoredMatrices", DNAState.class);		if (dataTask == null) {			return sorry(commandRec, getName() + " can't be started because no source of matrices was obtained");		}  	 	return true;   	 }	/*.................................................................................................................*/  	 public void employeeQuit(MesquiteModule m){  	 	iQuit();  	 }	/*.................................................................................................................*/  	 public CompatibilityTest getCompatibilityTest() {  	 	return new CharacterStateTest();  	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	temp.addLine("getCharacterSource ", dataTask);	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Returns employee that is matrix source", null, commandName, "getCharacterSource")) {    	 		return dataTask;    	 	}    	 	else     	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	//return null;   	 }   	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/   	public void initialize(Taxa taxa, CommandRecord commandRec){   		dataTask.initialize(taxa, commandRec);   	}  	    	private MCharactersDistribution translate(MCharactersDistribution mData, CommandRecord commandRec){   		if (mData != null && mData.getParentData() != null){   			CharacterData data = mData.getParentData();   			if (data instanceof DNAData){   				DNAData dData = (DNAData)data;   				ProteinData pData = dData.getProteinData(null, commandRec);   				if (pData!= null) {   					pData.setName("Protein translation of " + dData.getName());   					return pData.getMCharactersDistribution();   				}   			}   		}   		return null;   		   	}	 	 /** returns the number of character matrices that can be supplied for the given taxa*/	public int getNumberOfMatrices(Taxa taxa, CommandRecord commandRec){		return dataTask.getNumberOfMatrices(taxa, commandRec);	}	/** gets the current matrix.*/	public  MCharactersDistribution getCurrentMatrix(Taxa taxa, CommandRecord commandRec){		MCharactersDistribution orig = dataTask.getCurrentMatrix(taxa, commandRec);		return translate(orig, commandRec);	}	/** gets the indicated matrix.*/	public  MCharactersDistribution getMatrix(Taxa taxa, int im, CommandRecord commandRec){		MCharactersDistribution orig = dataTask.getMatrix(taxa, im, commandRec);		return translate(orig, commandRec);	}	/** gets name of the indicated matrix.*/	public  String getMatrixName(Taxa taxa, int im, CommandRecord commandRec){		return "Protein translation of " + dataTask.getNumberCurrentMatrix();	}	/** returns the number of the current matrix*/	public int getNumberCurrentMatrix(){		return dataTask.getNumberCurrentMatrix();	}	/*.................................................................................................................*/	public String getName() {		return "Translate DNA to Protein";	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */	public boolean requestPrimaryChoice(){		return true;  	}	/*.................................................................................................................*/	/** returns an explanation of what the module does.*/	public String getExplanation() {		return "Translates a stored DNA matrix to protein." ;	}}