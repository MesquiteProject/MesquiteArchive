/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align.ColorMatchToSelected; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;/* ======================================================================== */public class ColorMatchToSelected extends DataWindowAssistantI implements CellColorer {	MesquiteTable table;	CharacterData data;	double[][] best;	boolean notCalculated = true;	DataMatcher matchTask;	MesquiteString matchTaskName;	MesquiteCommand ntC;	MesquiteSubmenuSpec mss, mss2;	Class stateClass;		String ntName;	boolean showmaxWindowMatch;	boolean calculateInapplicable = false;	double redThreshold = 0.90;	MesquiteBoolean requireContiguousBlock = new MesquiteBoolean(false);	CharacterState[] csArray = new CharacterState[16];	int power = 2;	int count=0;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		ntC =makeCommand("setMatchTask",  this); 		matchTaskName = new MesquiteString();		return true;	}	public void setActiveColors(boolean active, CommandRecord commandRec){		setActive(active); 		if (isActive()){			if (numCompatibleModulesAvailable(DataMatcher.class, stateClass, this)>0) {				mss = addSubmenu(null, "Match Criterion", ntC, DataMatcher.class);	 			mss.setSelected(matchTaskName);	 			mss.setCompatibilityCheck(stateClass);				mss.setEnabled(false);			}	 		if (!StringUtil.blank(ntName)) //remember last one used				matchTask = (DataMatcher)hireNamedEmployee(commandRec, DataMatcher.class, ntName, data.getStateClass());//shouldn't ask as this is an init and might not be needed.  "Value to calculate for character state in taxon"						if (matchTask == null)				matchTask = (DataMatcher)hireCompatibleEmployee(commandRec, DataMatcher.class, data.getStateClass(), "data matcher");//shouldn't ask as this is an init and might not be needed.  "Value to calculate for character state in taxon"//Debugg.println("matchTask " + matchTask + " data " + data);				 		if (matchTask != null){		 		ntName = "#"+matchTask.getShortClassName();		 		matchTask.setHiringCommand(ntC);		 		matchTaskName.setValue(matchTask.getName()); 			} 			mss.setCompatibilityCheck(data.getStateClass());			mss.setEnabled(active);			calculateNums(commandRec);		}		else {			fireEmployee(matchTask);			matchTask = null;			deleteMenuItem(mss);		}		resetContainingMenuBar();	}	public void endJob(){		if (data!=null)			data.removeListener(this);		super.endJob();	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		if (this.data!=data && this.data!=null)			this.data.removeListener(this);		this.data = data;		data.addListener(this);//		table.addListener(this);		stateClass = data.getStateClass();		if (mss !=null && mss.getCompatibilityCheck() == null) { 			mss.setCompatibilityCheck(data.getStateClass()); 			resetContainingMenuBar(); 		}	}   	public String getColorsExplanation(CommandRecord commandRec){   		return null;   	}	/*.................................................................................................................*/	public void calculateNums(CommandRecord commandRec){ 		notCalculated = true;		if (!isActive())			return; 		count++;//Debugg.println("*******  calculateNums " + count);		   	 	if (data == null || matchTask == null)    	 		return;		int itStart=table.getFirstRowVisible();		int itEnd=table.getLastRowVisible();   	 	if (best == null || best.length!=data.getNumChars() || best[0].length != data.getNumTaxa()){   	 		best = new double[data.getNumChars()][data.getNumTaxa()];    	 	} 		for (int ic = 0; ic < data.getNumChars(); ic++) 			for (int it = 0; it < data.getNumTaxa(); it++) 				best[ic][it] = 0.0;		double matchValue = 0.0;		MesquiteInteger matchEndChar = new MesquiteInteger();		matchTask.prepare();		matchTask.setTableAndData(table,data);		double bestPossible = matchTask.getBestMatchValue();		double worstPossible = matchTask.getWorstMatchValue();		double possibleRange=1.0;		boolean calcBestWorst =  (!MesquiteDouble.isCombinable(bestPossible) || !MesquiteDouble.isCombinable(worstPossible));		if (!calcBestWorst && bestPossible!=worstPossible)			possibleRange = bestPossible-worstPossible;				//find selected sequence, if only one//Debugg.println("start match search (ms): " + timer.timeSinceLast());// 10-20:  1400;  then touch on 9: 1900, then 80		for (int it = itStart; it<= itEnd; it++){			boolean found = false;			int targetStartChar = -1;			int targetEndChar = -1;			int numSelectedFound = 0;			int numSelectedInRow = table.numCellsSelectedInRow(it);			if (numSelectedInRow>0 || ! matchTask.requiresApplicable()) {				if (numSelectedInRow<data.getNumChars()) {  // won't work if whole row is selected					csArray = null;					csArray = new CharacterState[numSelectedInRow];					for (int ic=0;ic<numSelectedInRow; ic++) {						csArray[ic] = data.makeCharacterState();  // this stores the row data					}										for (int ic = 0; ic< data.getNumChars(); ic++) {   // find the selected block in sequence						if (table.isCellSelectedAnyWay(ic, it)) {//selected cell found		   					csArray[numSelectedFound] = data.getCharacterState(csArray[numSelectedFound], ic,  it);							numSelectedFound++;							found = true;						}						else if (found && numSelectedFound<numSelectedInRow && requireContiguousBlock.getValue()) { // we've found an unselected cell after a selected one but we haven't found all the selected cells yet							found = false;							// give warning about discontinuous selection							break;						}					}					if (found) {  // we've found a block of selected cells; now let's do the matching calculation						if (calcBestWorst) {							bestPossible = matchTask.getBestMatchValue(csArray,commandRec);							worstPossible = matchTask.getApproximateWorstMatchValue(csArray,commandRec);							if (bestPossible!=worstPossible)								possibleRange = bestPossible-worstPossible;							else								possibleRange = 1.0;						}						int icStart=MesquiteInteger.maximum(0,table.getFirstColumnVisible()-csArray.length-1);						int icEnd=MesquiteInteger.minimum(table.getLastColumnVisible(),data.getNumChars()-1);				 		for (int ic = icStart; ic <=icEnd; ic++) {				 			if (calculateInapplicable || !data.isInapplicable(ic,it)) {					 			matchValue = matchTask.sequenceMatch(csArray, it, ic, matchEndChar, commandRec)-worstPossible;					 			matchValue = Math.abs(matchValue / possibleRange);					 			if (matchValue<0.0)					 				matchValue =0.0;					 			if (matchValue>1.0)					 				matchValue =1.0;					 			for (int ic2 = ic; ic2<= matchEndChar.getValue() && ic2 <  data.getNumChars(); ic2++) {					 				best[ic2][it] = MesquiteDouble.maximum(best[ic2][it],matchValue);					 			}				 			}				 		}						notCalculated = false;			 		}		 		}	 		}		}   	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	if (matchTask ==null) 	 		return null;   	 	Snapshot temp = new Snapshot(); 	 	temp.addLine("setMatchTask ", matchTask);    	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    		 if (checker.compare(this.getClass(), "Sets the module that calculates matches of sequence", "[name of module]", commandName, "setMatchTask")) {    			 DataMatcher temp =  (DataMatcher)replaceCompatibleEmployee(commandRec, DataMatcher.class, arguments, matchTask, stateClass);    			 if (temp!=null) {    				 matchTask = temp;    				 ntName = "#"+matchTask.getShortClassName();    				 matchTask.setHiringCommand(ntC);    				 matchTaskName.setValue(matchTask.getName());    				 calculateNums(commandRec);    				 table.repaintAll();    				 return matchTask;    			 }    		 }      	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/   	 public void tableSelectionChanged() {			if (!isActive())				return;			calculateNums(CommandRecord.getRecNSIfNull());			if (table !=null)				table.repaintAll();   	 }	/*.................................................................................................................*/   	 public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {			if (!isActive())				return;			calculateNums(commandRec);			if (table !=null)				table.repaintAll();   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Color Match to Selected";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Colors the cells of a sequence if they match the selected region within that same sequence.";   	 }	/*.................................................................................................................*/   	public ColorRecord getValueColor(double value){		if (value>=redThreshold)			return new ColorRecord(MesquiteColorTable.getRedScale(value, 0, 1, true, power), "Match = " + MesquiteDouble.toPrecisionSpecifiedString(value,2));		else			return new ColorRecord(MesquiteColorTable.getBlueScale(value, 0, redThreshold, true, power), "Match = " + MesquiteDouble.toPrecisionSpecifiedString(value,2));   	}	/*.................................................................................................................*/   	ColorRecord[] legend;   	public ColorRecord[] getLegendColors(CommandRecord commandRec){   		if (legend == null) {   			   			legend = new ColorRecord[11];   			legend[0] = new ColorRecord(Color.red, "Perfect match");   			legend[1]= getValueColor(0.95);   			legend[2]= getValueColor(0.9);   			legend[3]= getValueColor(0.85);   			legend[4]= getValueColor(0.8);   			legend[5]= getValueColor(0.75);   			legend[6]= getValueColor(0.7);   			legend[7]= getValueColor(0.6);   			legend[8]= getValueColor(0.5);   			legend[9]= getValueColor(0.25);   			legend[10] = new ColorRecord(Color.white, "No match");  		}   		return legend;   	}	/*.................................................................................................................*/	public Color getCellColor(int ic, int it){		if (ic<0 || it<0)			return null;		if (data == null || best == null)			return null;		else if (data.isInapplicable(ic, it)){			return ColorDistribution.straw;		}		else if (notCalculated)			return null;		else if (best[ic][it]>redThreshold)			return MesquiteColorTable.getRedScale(best[ic][it], 0, 1, true, power);		else			return MesquiteColorTable.getBlueScale(best[ic][it], 0, redThreshold, true, power);	}	/** passes which object changed, along with optional code number (type of change) and integers (e.g. which character)*/	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		if (obj instanceof CharacterData){			if (Notification.appearsCosmetic(notification))					return;			calculateNums(commandRec);			if (table!=null && isActive())				table.repaintAll();		}	}	/*.................................................................................................................*/   	public void viewChanged(CommandRecord commandRec){		calculateNums(commandRec);   	}		/*.................................................................................................................*/    	 public boolean isPrerelease() {		return true;   	 }}