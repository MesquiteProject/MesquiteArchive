/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align.SimpleMatch; import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;/* ======================================================================== */public class SimpleMatch extends DataMatcher {	CharacterState csOriginal, csCandidate;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		return true;	} 	/*.................................................................................................................*/   	/** Returns the value of the best possible match.  Should be overridden by subclasses if they can calculate the value.*/	public double getBestMatchValue() {		return 1.0;	}   	 	/*.................................................................................................................*/   	/** Returns the value of the worst possible match.  Should be overridden by subclasses if they can calculate the value.*/	public double getWorstMatchValue() {		return 0.0;	}   		public double getBestMatchValue(CharacterState[] csOriginalArray, CommandRecord commandRec){		return 1.0;	}	public double getApproximateWorstMatchValue(CharacterState[] csOriginalArray, CommandRecord commandRec){		return 0.0;	}		/*.................................................................................................................*/   	/** Returns the match of the two CharacterState arrays*/	public double sequenceMatch(CharacterState[] csOriginalArray, CharacterState[] csCandidateArray, CommandRecord commandRec){		double numberOfMatches = 0.0;		int basesCompared =0;				for (int ic = 0; ic< csOriginalArray.length && ic < csCandidateArray.length; ic++){			csOriginal = csOriginalArray[ic];			csCandidate = csCandidateArray[ic];			if (csOriginal.equals(csCandidate, false, true))				numberOfMatches += 1.0;			basesCompared++;		}		if (basesCompared == 0)			return 0;		return numberOfMatches/basesCompared;}	/*.................................................................................................................*/	   	/** Returns whether candidate stretch of matrix matches the data contained in the CharacterState array*/   	public double sequenceMatch(CharacterState[] csOriginalArray, int candidateTaxon, int candidateStartChar, MesquiteInteger candidateEndChar, CommandRecord commandRec){   		double numberOfMatches = 0.0;   		int basesCompared =0;   		   		for (int ic = 0; ic< csOriginalArray.length && ic+candidateStartChar < data.getNumChars(); ic++){   			csOriginal = csOriginalArray[ic];   			csCandidate = data.getCharacterState(csCandidate, ic+candidateStartChar, candidateTaxon);   			if (csOriginal.equals(csCandidate, false, true))   				numberOfMatches += 1.0;   			basesCompared++;   		}   		if (candidateEndChar!=null)   			candidateEndChar.setValue(MesquiteInteger.minimum(candidateStartChar + csOriginalArray.length-1, data.getNumChars()-1));   		if (basesCompared == 0)   			return 0;   		return numberOfMatches/basesCompared;	}	/*.................................................................................................................*/    	 public String getName() {		return "Simple Match";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Returns the fraction by which sequences are exact matches.";   	 }	 	/*.................................................................................................................*/  	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE double,  	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.  	 * If a NEGATIVE double,  thne the number refers to the local version of the package, e.g. a third party package*/     	public double getVersionOfFirstRelease(){     		return 1.07;       	}  }