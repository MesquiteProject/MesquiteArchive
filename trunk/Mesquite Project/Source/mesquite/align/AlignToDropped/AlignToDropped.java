/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align.AlignToDropped; import java.awt.*;import mesquite.align.lib.*;import mesquite.categ.lib.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.table.*;import mesquite.lib.duties.*;/* ======================================================================== */public class AlignToDropped extends DataWindowAssistantI {	MesquiteTable table;	CategoricalData data;	TableTool alignDropTool;	int firstColumnTouched = -2;	int firstRowTouched = -2;	MesquiteBoolean warnCheckSum = new MesquiteBoolean(true);	long originalCheckSum;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		if (containerOfModule() instanceof MesquiteWindow) {			alignDropTool = new TableTool(this, "alignToDropped", getPath(), "alignToDropped.gif", 13,14,"Aligns touched sequences to the sequence on which they are dropped.", "Aligns touched sequences to the sequence on which they are dropped.", MesquiteModule.makeCommand("alignDropTouched",  this) , MesquiteModule.makeCommand("alignDropDragged",  this), MesquiteModule.makeCommand("alignDropDropped",  this));			alignDropTool.setWorksOnRowNames(true);			((MesquiteWindow)containerOfModule()).addTool(alignDropTool);					}		else return sorry(commandRec, getName() + " couldn't start because the window with which it would be associated is not a tool container.");		return true;	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return true;   	 }	/*.................................................................................................................*/   	 public boolean isPrerelease(){   	 	return true;   	 }	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		this.data = (CategoricalData)data;	}	/*.................................................................................................................*/	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */	public CompatibilityTest getCompatibilityTest(){		return new MolecularStateOnlyTest();	}	/*.................................................................................................................*/	public void reAlign(int it, long[] newAlignment) {			}	/*.................................................................................................................*/	public void alignTouchedToDropped(int rowToAlign, int rowDropped, CommandRecord commandRec){		MesquiteInteger gapOpen = new MesquiteInteger();   		MesquiteInteger gapExtend = new MesquiteInteger();   		int alphabetLength = ((CategoricalState)data.makeCharacterState()).getMaxPossibleState()+1;	   		int subs[][] = AlignUtil.getDefaultCosts(gapOpen, gapExtend, alphabetLength);   		MesquiteNumber score = new MesquiteNumber();  		PairwiseAligner aligner = new PairwiseAligner(true,subs,gapOpen.getValue(), gapExtend.getValue(), alphabetLength);		if (aligner!=null){			originalCheckSum = ((CategoricalData)data).storeCheckSum(0, data.getNumChars()-1,rowToAlign, rowToAlign);			long[][] aligned = aligner.alignSequences((MCategoricalDistribution)data.getMCharactersDistribution(), rowToAlign, rowDropped,MesquiteInteger.unassigned,MesquiteInteger.unassigned,true,score,commandRec);			logln("Align " + rowToAlign + " onto " + rowDropped);			long[] newAlignment = Long2DArray.extractRow(aligned,0);//	Debugg.println("   data.getNumChars(): " +data.getNumChars() + ", aligned.length: " + aligned.length);			AlignUtil util = new AlignUtil();			Rectangle problem = util.forceAlignment((MolecularData)data, 0, data.getNumChars()-1, rowToAlign, rowToAlign, aligned);			/*			 * public Rectangle forceAlignment(MolecularData orig, int icStart, int icEnd, int itStart, int itEnd, Object aligned){				for (int ic = 0; ic<aligned.length; ic++){				if (!CategoricalState.isImpossible(aligned[ic][0]) && !CategoricalState.isUnassigned(aligned[ic][0])&& !CategoricalState.isEmpty(aligned[ic][0])) {					if (CategoricalState.cardinality(aligned[ic][0]) >1)						data.setState(ic,rowToAlign,CategoricalState.setUncertainty(aligned[ic][0],true));					else						data.setState(ic,rowToAlign,aligned[ic][0]);				}					//move whatever other info is needed			}			*/			data.notifyListeners(this, new Notification(CharacterData.DATA_CHANGED, null));			((CategoricalData)data).examineCheckSum(0, data.getNumChars()-1,rowToAlign, rowToAlign, "Bad checksum; alignment has inapproppriately altered data!", warnCheckSum, originalCheckSum);		}	}	int previousRowDragged = -1;	/*.................................................................................................................*/	public void alignDrag(int rowDragged, CommandRecord commandRec){		table.emphasizeRow(previousRowDragged,rowDragged, firstRowTouched, false);		previousRowDragged = rowDragged;	}	/*.................................................................................................................*/    boolean alignJustTouchedRow = true; 	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    		 if (checker.compare(this.getClass(), "AlignToDropped tool touched on row.", "[column touched] [row touched]", commandName, "alignDropTouched")) {    			 if (table!=null && data !=null){    				 if (data.getEditorInhibition()){    					 discreetAlert(commandRec, "This matrix is marked as locked against editing.");    					 return null;    				 }    				 MesquiteInteger io = new MesquiteInteger(0);    				 firstColumnTouched= MesquiteInteger.fromString(arguments, io);    				 firstRowTouched= MesquiteInteger.fromString(arguments, io);    				     				     				 if (!table.rowLegal(firstRowTouched))    					 return null;    				 if (table.isRowSelected(firstRowTouched)) {    					 alignJustTouchedRow = false;    				 }    				 else  // it's not select, so deselect everyone else    					 table.deselectAllCells(true);    			 }    		 }    		 else if (checker.compare(this.getClass(), "AlignToDropped tool dragged.", "[column dragged] [row dragged]", commandName, "alignDropDragged")) {    			 if (table!=null && data !=null && (firstRowTouched>=0)){    				 if (data.getEditorInhibition()){    					 discreetAlert(commandRec, "This matrix is marked as locked against editing.");    					 return null;    				 }    				 MesquiteInteger io = new MesquiteInteger(0);    				 int columnDragged = MesquiteInteger.fromString(arguments, io);    				 int rowDragged= MesquiteInteger.fromString(arguments, io);    				 if (!table.rowLegal(rowDragged))    					 return null;    				 alignDrag(rowDragged, commandRec); //   				 table.deSelectAndRedrawOutsideBlock(firstColumnTouched, firstRowTouched, columnDragged, rowDragged);  //  				 	table.selectBlock(firstColumnTouched, firstRowTouched, columnDragged, rowDragged); //   				 table.redrawBlock(firstColumnTouched, firstRowTouched, columnDragged, rowDragged);    			 }    		 }       		 else if (checker.compare(this.getClass(), "AlignToDropped tool dropped.", "[column dropped] [row dropped]", commandName, "alignDropDropped")) {       			       			if (table!=null && data !=null && (firstRowTouched>=0)){       				table.deEmphasizeRow(previousRowDragged);       				if (data.getEditorInhibition()){    					 discreetAlert(commandRec, "This matrix is marked as locked against editing.");    					 return null;    				 }    				 MesquiteInteger io = new MesquiteInteger(0);     				 int columnDropped = MesquiteInteger.fromString(arguments, io);    				 int rowDropped= MesquiteInteger.fromString(arguments, io);    				    					if (!table.rowLegal(rowDropped))    					 return null;     				 if  (!alignJustTouchedRow){  // we are going to align all selected rows      					 if (!table.isRowSelected(rowDropped)) // we didn't drop it on a selected row     						 for (int it = 0; it<table.getNumRows(); it++)      							if (table.isRowSelected(it) && (it!=rowDropped))     								alignTouchedToDropped(it,rowDropped, commandRec);     				 }			      				 else     					 alignTouchedToDropped(firstRowTouched,rowDropped, commandRec);     			 }    		 }    		     		 else    			 return super.doCommand(commandName, arguments, commandRec, checker);    		 return null;    	 } 	/*.................................................................................................................*/    	 public String getName() {		return "Align To Dropped";   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Supplies an alignment tool that can be used on a set of sequences.  Sequences dropped by this tool on another sequence will be aligned to that other sequence (pairwise)." ;   	 }   	 }