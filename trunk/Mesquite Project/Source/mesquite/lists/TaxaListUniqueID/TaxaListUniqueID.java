/* Mesquite (package mesquite.lists).  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lists.TaxaListUniqueID;/*~~  */import mesquite.lists.lib.*;import java.util.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/* ======================================================================== */public class TaxaListUniqueID extends TaxonListAssistant  {	Taxa taxa=null;	MesquiteTable table = null;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		/* hire employees here */		addMenuItem("Replace Unique IDs", makeCommand("replaceIDs",  this));		addMenuItem("Fill Missing Unique IDs", makeCommand("fillMissingIDs",  this));		addMenuItem("Remove Unique IDs", makeCommand("removeIDs",  this));		return true;  	 }  	 	public void setTableAndTaxa(MesquiteTable table, Taxa taxa, CommandRecord commandRec){		//if (this.data !=null)		//	this.data.removeListener(this);		this.taxa = taxa;		//data.addListener(this);		this.table = table;	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	 if (checker.compare(this.getClass(), "Replaces the uniqueIDs of selected", null, commandName, "replaceIDs")) {			if (taxa != null) {				stamp(true, commandRec);			}			//outputInvalid(commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Removes the uniqueIDs of selected", null, commandName, "removeIDs")) {			if (taxa != null) {				remove(commandRec);			}			//outputInvalid(commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Fills in any missing uniqueIDs of selected", null, commandName, "fillMissingIDs")) {			if (taxa != null)				stamp(false, commandRec);			//outputInvalid(commandRec);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	 void stamp(boolean replace, CommandRecord commandRec){   	 	if (taxa ==null)   	 		return;    	 	boolean changed=false;		if (employer!=null && employer instanceof ListModule) {			int c = ((ListModule)employer).getMyColumn(this);	    	 	boolean noneSelected = !table.anyCellSelectedAnyWay();			for (int i=0; i<taxa.getNumTaxa(); i++) {				if (noneSelected || table.isCellSelectedAnyWay(c, i)) {					taxa.stampUniqueID(i, replace);					if (!changed)						outputInvalid(commandRec);					changed = true;				}			}		}		if (changed)			parametersChanged(null, commandRec);   	 }   	 void remove(CommandRecord commandRec){   	 	if (taxa ==null)   	 		return;    	 	boolean changed=false;		if (employer!=null && employer instanceof ListModule) {			int c = ((ListModule)employer).getMyColumn(this);    	 		boolean noneSelected = !table.anyCellSelectedAnyWay();			for (int i=0; i<taxa.getNumTaxa(); i++) {				if (noneSelected || table.isCellSelectedAnyWay(c, i)) {					taxa.setUniqueID(i, null);					if (!changed)						outputInvalid(commandRec);					changed = true;				}			}		}		if (changed)			parametersChanged(null, commandRec);   	 }	/*.................................................................................................................*/	/** passes which object is being disposed (from MesquiteListener interface)*	public void disposing(Object obj){		//TODO: respond	}	/*.................................................................................................................*/	/** passes which object is being disposed (from MesquiteListener interface)*	public boolean okToDispose(Object obj, int queryUser){		return true;  //TODO: respond	}	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		if (Notification.appearsCosmetic(notification))			return;		parametersChanged(null, commandRec);	}	*/	public String getStringForTaxon(int ic){		String s = null;		if (taxa != null)			s = taxa.getUniqueID(ic); //+1 because zero based		if (StringUtil.blank(s))			s = "?";		return s;	}	public String getWidestString(){		return "88888888888888888";	}	/*.................................................................................................................*/	public String getTitle() {		return "ID";	}	/*.................................................................................................................*/    	 public String getName() {		return "Unique ID (taxa)";   	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}	/*.................................................................................................................*/   	public boolean isPrerelease(){   		return false;     	}   	 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Shows unique id assigned to taxon." ;   	 }}