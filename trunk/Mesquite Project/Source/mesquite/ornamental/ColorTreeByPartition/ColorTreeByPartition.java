/* Mesquite (package mesquite.ornamental).  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.ornamental.ColorTreeByPartition;/*~~  */import java.util.*;import java.awt.*;import java.awt.image.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class ColorTreeByPartition extends TreeDisplayAssistantI {	public Vector extras;	MesquiteBoolean colorByPartition;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		extras = new Vector();		colorByPartition = new MesquiteBoolean(false);		addCheckMenuItem(null, "Color Branches by Partition", makeCommand("colorByPartition",  this), colorByPartition);		return true;	} 	/*.................................................................................................................*/	public   TreeDisplayExtra createTreeDisplayExtra(TreeDisplay treeDisplay, CommandRecord commandRec) {		ColorByPartitionExtra newPj = new ColorByPartitionExtra(this, treeDisplay);		extras.addElement(newPj);		return newPj;	}	/*.................................................................................................................*/    	 public String getName() {		return "Color Branches by Partition";   	 }   	 	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	Snapshot temp = new Snapshot();  	 	temp.addLine("colorByPartition " + colorByPartition.toOffOnString());  	 	return temp;  	 }	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether to color the tree by the current taxon partition", "[on or off]", commandName, "colorByPartition")) {			if (StringUtil.blank(arguments))				colorByPartition.setValue(!colorByPartition.getValue());			else				colorByPartition.toggleValue(parser.getFirstToken(arguments));			for (int i =0; i<extras.size(); i++){				ColorByPartitionExtra e = (ColorByPartitionExtra)extras.elementAt(i);				e.setShowColors(colorByPartition.getValue());			}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Colors the tree's branches by the taxon partition." ;   	 }	public boolean isSubstantive(){		return false;	}   	 }/* ======================================================================== */class ColorByPartitionExtra extends TreeDisplayExtra   {	ColorTreeByPartition branchNotesModule;	TaxaPartition partitions = null;	ColorDistribution[] colors;	boolean showColors;	public ColorByPartitionExtra (ColorTreeByPartition ownerModule, TreeDisplay treeDisplay) {		super(ownerModule, treeDisplay);		branchNotesModule = ownerModule;		showColors = branchNotesModule.colorByPartition.getValue();	}	/*.................................................................................................................*/	public   void drawOnTree(Tree tree, int node, Graphics g) {		if (showColors) {//	Debugg.println("drawOnTree " + partitions);			if (partitions != null){				for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))					drawOnTree(tree, d, g);				treeDisplay.getTreeDrawing().fillBranchWithColors(tree,  node, colors[node], g);			}		}	}	/*.................................................................................................................*/	public   void printOnTree(Tree tree, int node, Graphics g) {		drawOnTree(tree, node, g);	}		void setShowColors(boolean a){		showColors = a;	   	treeDisplay.pleaseUpdate(false, null);	}	/**return a text version of information at node*/	public String textAtNode(Tree tree, int node){			return null;	}	/**return a text version of any legends or other explanatory information*/	public String textForLegend(){		return null;	}	/*.................................................................................................................*/	public   void harvestColorsDOWN(Tree tree, int node) {		if (partitions != null){			int count = 0;			if (tree.nodeIsTerminal(node)){				int taxonNumber = tree.taxonNumberOfNode(node);				TaxaGroup mi = (TaxaGroup)partitions.getProperty(taxonNumber);				if (mi!=null) {					if (mi.getColor() != null)						colors[node].setColor(0, mi.getColor());				}			}			else 	for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)) {				harvestColorsDOWN(tree, d);				//here, pull all colors from tips				for (int i=0; i<colors[d].getNumColors(); i++){					if (colors[node].indexOf(colors[d].getColor(i))<0)						colors[node].setColor(count++, colors[d].getColor(i));				}			}		}	}	int numDescWithColor(Tree tree, int node, Color c){		int count = 0;		for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))			if (colors[d].indexOf(c)>=0)				count++;		return count;	}	ColorDistribution temp = new ColorDistribution();	/*.................................................................................................................*/	public   void harvestColorsUP(Tree tree, int node) {		if (partitions != null){			if (tree.nodeIsInternal(node)){				//rule is: if color is found in more than one descendent, the color it								int count = 0;				temp.initialize();				for (int i=0; i<colors[node].getNumColors(); i++) //store colors in temporary space					temp.setColor(count++, colors[node].getColor(i));				colors[node].initialize();				count = 0;				for (int i=0; i<temp.getNumColors(); i++){					int numDesc = numDescWithColor(tree, node, temp.getColor(i));					if (numDesc>1 || (numDesc == 1 && node != tree.getRoot() && colors[tree.motherOfNode(node)].indexOf(temp.getColor(i))>=0))						colors[node].setColor(count++, temp.getColor(i));				}				for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))					harvestColorsUP(tree, d);			}		}	}	/*.................................................................................................................*/	public   void setTree(Tree tree, CommandRecord commandRec) {		if (colors == null || colors.length != tree.getNumNodeSpaces())			colors = new ColorDistribution[ tree.getNumNodeSpaces()];		for (int i= 0; i< colors.length; i++){			if (colors[i] == null)				colors[i] = new ColorDistribution();			colors[i].initialize();		}		partitions = (TaxaPartition)tree.getTaxa().getCurrentSpecsSet(TaxaPartition.class);		harvestColorsDOWN(tree, tree.getRoot());		harvestColorsUP(tree, tree.getRoot());	}	public void turnOff() {		branchNotesModule.extras.removeElement(this);		super.turnOff();	}}