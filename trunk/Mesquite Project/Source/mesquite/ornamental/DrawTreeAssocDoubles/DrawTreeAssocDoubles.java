/* Mesquite source code.  Copyright 1997-2007 W. Maddison and D. Maddison. Version 2.01, December 2007.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.ornamental.DrawTreeAssocDoubles;/*~~  */import java.util.*;import java.awt.*;import java.awt.image.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class DrawTreeAssocDoubles extends TreeDisplayAssistantI {	public Vector extras;	public boolean first = true;	MesquiteBoolean on;		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		extras = new Vector();		on = new MesquiteBoolean(false);		addCheckMenuItem(null, "Show Node-Associated Values On Tree", makeCommand("setOn",  this), on);		return true;	} 	/*.................................................................................................................*/	public   TreeDisplayExtra createTreeDisplayExtra(TreeDisplay treeDisplay) {		NodeAssocValuesExtra newPj = new NodeAssocValuesExtra(this, treeDisplay);		extras.addElement(newPj);		return newPj;	}	/*.................................................................................................................*/    	 public String getName() {		return "Node-Associated Values";   	 }   	 	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	Snapshot temp = new Snapshot();  	 	temp.addLine("setOn " + on.toOffOnString());  	 	return temp;  	 }	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether to show the node associated values", "[on or off]", commandName, "setOn")) {			if (StringUtil.blank(arguments))				on.setValue(!on.getValue());			else				on.toggleValue(parser.getFirstToken(arguments));			for (int i =0; i<extras.size(); i++){				NodeAssocValuesExtra e = (NodeAssocValuesExtra)extras.elementAt(i);				e.setShowAlways(on.getValue());			}    	 	}    	 	else    	 		return  super.doCommand(commandName, arguments, checker);		return null;   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Supplies a tool for tree windows to attach and view footnotes for branches." ;   	 }	public boolean isSubstantive(){		return false;	}   	 }/* ======================================================================== */class NodeAssocValuesExtra extends TreeDisplayExtra  {	DrawTreeAssocDoubles assocDoublesModule;	MesquiteCommand taxonCommand, branchCommand;	boolean on;//	StringInABox	public NodeAssocValuesExtra (DrawTreeAssocDoubles ownerModule, TreeDisplay treeDisplay) {		super(ownerModule, treeDisplay);		assocDoublesModule = ownerModule;		on = assocDoublesModule.on.getValue();	}	StringInABox box = new StringInABox( "", treeDisplay.getFont(),150);	/*.................................................................................................................*/	public   void drawOnTree(Tree tree, int node, Graphics g) {		for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))			drawOnTree(tree, d, g);					if (on){				double d = getValue(tree, node);				box.setColors(Color.red, Color.white);				box.setString(MesquiteDouble.toString(d));				box.draw(g,  treeDisplay.getTreeDrawing().x[node], treeDisplay.getTreeDrawing().y[node]);			}			}		void setShowAlways(boolean a){		on = a;	   	treeDisplay.pleaseUpdate(false);	}	/**return a text version of information at node*/	public String textAtNode(Tree tree, int node){		double d = getValue(tree, node);		return MesquiteDouble.toString(d);	}	/*.................................................................................................................*/	public   void printOnTree(Tree tree, int drawnRoot, Graphics g) {		drawOnTree(tree, drawnRoot, g); //should draw numbered footnotes!	}	/*.................................................................................................................*/	public   void setTree(Tree tree) {	}	NameReference assocValueRef = NameReference.getNameReference("consensusFrequency");	double getValue(Tree tree, int node){		return tree.getAssociatedDouble(assocValueRef, node);	}	public void turnOff() {		assocDoublesModule.extras.removeElement(this);		super.turnOff();	}}