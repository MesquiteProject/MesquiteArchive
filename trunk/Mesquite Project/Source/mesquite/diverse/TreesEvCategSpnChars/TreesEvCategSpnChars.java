/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.diverse.TreesEvCategSpnChars;import java.applet.*;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.characters.*;import mesquite.categ.lib.*;/** ======================================================================== */public class TreesEvCategSpnChars extends FileAssistantT {	public TreeSimulate simulator;		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) { 		simulator = (TreeSimulate)hireNamedEmployee(commandRec, TreeSimulate.class, "#mesquite.speciation.CategCharSpeciation");		if (simulator == null)			return sorry(commandRec, getName() + " couldn't start because no simulating module was obtained.");				incrementMenuResetSuppression();		mesquiteTrunk.incrementProjectBrowserRefreshSuppression();		Taxa taxa = getProject().chooseTaxa(containerOfModule(), "For which block of taxa do you want to evolve trees and characters?",commandRec);    	 	MesquiteFile file = getProject().chooseFile(commandRec, "Select file to which to add the trees and matrix");		int numTrees = MesquiteInteger.queryInteger(containerOfModule(), "Number of Trees", "Number of Trees", 100);				TreeVector trees = new TreeVector(taxa);		int numTaxa = taxa.getNumTaxa();		CharactersManager charManager = (CharactersManager)getFileCoordinator().findImmediateEmployeeWithDuty(CharactersManager.class);		CategoricalData data= (CategoricalData)charManager.newCharacterData(taxa, numTrees, "Standard Categorical Data");		Tree tree = null;		MesquiteLong seed = new MesquiteLong(System.currentTimeMillis());		long response = MesquiteLong.queryLong(containerOfModule(), "Seed for Tree simulation", "Set Random Number seed for tree simulation:", seed.getValue());		if (MesquiteLong.isCombinable(response))			seed.setValue(response);		ObjectContainer obj = new ObjectContainer();   		for (int i=0; i<numTrees; i++){   			commandRec.tick("Simulating tree and character " + i);   			obj.setObject(null);   			tree = simulator.getSimulatedTree(taxa, tree, i, obj, seed, commandRec);   			if (tree instanceof Renamable)   				((Renamable)tree).setName("Simulated Tree (with character) " + (i+1));   			MesquiteTree clone = tree.cloneTree();   			trees.addElement(clone, false);   			Object ch = obj.getObject();   			if (ch !=null && ch instanceof long[]){   				long[] character = (long[])ch;   				data.setCharacterName(i, "Evolved on Tree " + (i+1));   				harvestStates(tree, tree.getRoot(), i, character, data);   				  				CategoricalHistory history = new CategoricalHistory(tree.getTaxa(), tree.getNumNodeSpaces()); 				harvestHistory(tree, tree.getRoot(), character, history);	    	 		StoredCharacterHistory sHistory = new StoredCharacterHistory(history, clone);	    	 		if (sHistory!=null) {	    	 			sHistory.setName("Character history " + (i+1));					sHistory.setFile( file, false);  //TODO: should allow user to choose if more than one file		    	 		getProject().addFileElement(sHistory);	    	 		} //TODO: should set current tree to show this one if stored trees used   					    	 		clone.attachToSensitives(data.getCharacterDistribution(i)); 				   				//for (int it = 0; it<numTaxa && it<character.length; it++){   				//	data.setState(i, it, character[it]);   				//}   			}   		}		data.addToFile(file, getProject(), findElementManager(CharacterData.class));  		data.setName("Evolved on Simulated Trees");		trees.setName("Evolved with Categorical");		trees.addToFile(file, getProject(), findElementManager(TreeVector.class));  		data.show(commandRec);		trees.show(commandRec);		mesquiteTrunk.decrementProjectBrowserRefreshSuppression();		decrementMenuResetSuppression();		resetAllMenuBars(); 		return false;  	 }  	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/  	 private void harvestStates(Tree tree, int node, int i, long[] states, CategoricalData data){  	 	if (tree.nodeIsTerminal(node)) {  	 		data.setState(i, tree.taxonNumberOfNode(node), states[node]);		}		for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)) {			harvestStates(tree, d, i, states, data);		}  	 }	/*.................................................................................................................*/  	 private void harvestHistory(Tree tree, int node, long[] states, CategoricalHistory history){  	 	history.setState(node, states[node]);				for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)) {			harvestHistory(tree, d, states, history);		}  	 }	 	/*.................................................................................................................*/    	 public String getName() {		return "Trees & Categorical Speciation Characters";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Evolves a series of trees, each tied to a single categorical character controlling speciation rates." ;   	 }}	