/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.diverse.EvolveTreesDiversChars;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.characters.*;import mesquite.diverse.lib.*;/** ======================================================================== */public class EvolveTreesDiversChars extends FileAssistantT {	public TreeCharSimulate simulator;		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) { 		simulator = (TreeCharSimulate)hireEmployee(commandRec, TreeCharSimulate.class, "Simulator of trees and characters");		if (simulator == null)			return sorry(commandRec, getName() + " couldn't start because no simulating module was obtained.");				incrementMenuResetSuppression();		mesquiteTrunk.incrementProjectBrowserRefreshSuppression();		Taxa taxa = getProject().chooseTaxa(containerOfModule(), "For which block of taxa do you want to evolve trees and characters?",commandRec);    	 	MesquiteFile file = getProject().chooseFile(commandRec, "Select file to which to add the trees and matrix");		int numTrees = MesquiteInteger.queryInteger(containerOfModule(), "Number of Trees", "Number of Trees", 100);				TreeVector trees = new TreeVector(taxa);		int numTaxa = taxa.getNumTaxa();		CharactersManager charManager = (CharactersManager)getFileCoordinator().findImmediateEmployeeWithDuty(CharactersManager.class);		CharacterData data= (CharacterData)charManager.newCharacterData(taxa, numTrees, simulator.getDataType());		MesquiteLong seed = new MesquiteLong(System.currentTimeMillis());		long response = MesquiteLong.queryLong(containerOfModule(), "Seed for Tree simulation", "Set Random Number seed for tree simulation:", seed.getValue());		if (MesquiteLong.isCombinable(response))			seed.setValue(response);				ObjectContainer treeContainer = new ObjectContainer();		ObjectContainer charHistoryContainer = new ObjectContainer();		CharacterState cs = data.makeCharacterState();   		for (int i=0; i<numTrees; i++){   			commandRec.tick("Simulating tree and character " + i);    			   			   			simulator.doSimulation(taxa, i, treeContainer, charHistoryContainer, seed, commandRec);   			   			Object t = treeContainer.getObject();   			if (t == null || !(t instanceof Tree))   				return false;//TODO: insert more informative response   			Object c = charHistoryContainer.getObject();   			if (c == null || !(c instanceof CharacterHistory))   				return false; //TODO: insert more informative response   			Tree tree = (Tree)t;   			CharacterHistory ch = (CharacterHistory)c;   			harvestStates(tree, tree.getRoot(), i, ch, data, cs);  			if (tree instanceof Renamable && !tree.hasName())   				((Renamable)tree).setName("Simulated Tree (with character) " + (i+1));   			MesquiteTree clone = tree.cloneTree();   			trees.addElement(clone, false);   			data.setCharacterName(i, "Sim. with tree " + (i+1));   				}		data.addToFile(file, getProject(), findElementManager(CharacterData.class));  		data.setName("Evolved on Simulated Trees");		trees.setName("Evolved with Character");		trees.addToFile(file, getProject(), findElementManager(TreeVector.class));  		data.show(commandRec);		trees.show(commandRec);		mesquiteTrunk.decrementProjectBrowserRefreshSuppression();		decrementMenuResetSuppression();		resetAllMenuBars(); 		return false;  	 }  	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/  	 private void harvestStates(Tree tree, int node, int i, CharacterHistory history, CharacterData data, CharacterState cs){  	 	if (tree.nodeIsTerminal(node)) {  	 		cs = history.getCharacterState(cs, node);  	 		data.setState(i, tree.taxonNumberOfNode(node), cs);		}		for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)) {			harvestStates(tree, d, i, history, data, cs);		}  	 }	 	/*.................................................................................................................*/    	 public String getName() {		return "Trees & Diversification Characters";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Evolves a series of trees, each tied to a single character controlling diversification rates." ;   	 }}	