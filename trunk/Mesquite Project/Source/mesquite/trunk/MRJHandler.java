/* Mesquite source code.  Copyright 1997-2007 W. Maddison and D. Maddison. Version 2.01, December 2007.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.trunk;import java.awt.*;import java.util.*;import java.io.*;import mesquite.lib.*;import mesquite.*;import mesquite.lib.duties.*;import com.apple.mrj.*;/* ======================================================================== */public class MRJHandler implements MRJOpenDocumentHandler, MRJAboutHandler, MRJQuitHandler, FileOpener {	boolean waiting = false;	Vector fileList;	Mesquite mesquite;	static boolean quitting = false;	public MRJHandler (Mesquite mesquite) {		this.mesquite = mesquite;		fileList = new Vector();	}		public boolean isWaiting(){		return waiting;	}		/*----Open Files-----*/	public void handleOpenFile(File file) {		MesquiteModule.incrementMenuResetSuppression();		if (((Mesquite)MesquiteTrunk.mesquiteTrunk).ready) {			CommandRecord prevR = MesquiteThread.getCurrentCommandRecord();			MesquiteThread.setCurrentCommandRecord(new CommandRecord((CommandThread)null, false));			MesquiteTrunk.mesquiteTrunk.openFile(file.getAbsolutePath());			MesquiteThread.setCurrentCommandRecord(prevR);		}		else {			waiting = true;			fileList.addElement(file);		}		MesquiteModule.decrementMenuResetSuppression();	}		public void openFilesNow() {		mesquite.openFilesNowUsed = true;		MesquiteModule.incrementMenuResetSuppression();		waiting = false;		Enumeration e = fileList.elements(); 		while (e.hasMoreElements()) {			Object obj = e.nextElement();			String path = null;			if (obj instanceof File){				File f = (File)obj;				path = f.getAbsolutePath();			}			else				path = (String)obj;			CommandRecord prevR = MesquiteThread.getCurrentCommandRecord();			MesquiteThread.setCurrentCommandRecord(new  CommandRecord((CommandThread)null, false));			MesquiteTrunk.mesquiteTrunk.openFile(path);			MesquiteThread.setCurrentCommandRecord(prevR);			fileList.removeElement(obj); 		}		MesquiteModule.decrementMenuResetSuppression();	}		/*----About-----*/	public void handleAbout() {		if (((Mesquite)(MesquiteTrunk.mesquiteTrunk)).about!=null)			((Mesquite)(MesquiteTrunk.mesquiteTrunk)).about.setVisible(true);	}	/*----Quitting-----*/	public void handleQuit() {		if (quitting)			return;		quitting = true;		QT q = new QT();		String MRJversion = System.getProperty("mrj.version");		double d= MesquiteDouble.fromString(MRJversion);		if (d>=3 && d<3.4)			q.start();		else			q.run();	}		class QT extends Thread {		public void run(){			MesquiteTrunk.mesquiteTrunk.logln("About to Quit...");			mesquite.doCommand("quit", null, CommandChecker.defaultChecker);			quitting = false;		}	}}