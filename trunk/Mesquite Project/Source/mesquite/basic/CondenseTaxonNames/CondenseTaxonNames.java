/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.basic.CondenseTaxonNames;import java.util.*;import java.awt.*;import java.text.Collator;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/* ======================================================================== */public class CondenseTaxonNames extends TaxonNameAlterer {	int truncLength = 10;	boolean createTranslationFile = false;	boolean cleanToken = true;	StringBuffer translationBuffer = new StringBuffer(100);		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		return true;	}	/*.................................................................................................................*/	public void saveTranslationFile(CommandRecord commandRec, String fileName) {			translationBuffer.append("\t</translateTaxa>\n");			translationBuffer.append("</mesquite>\n");   	 		String path;    	 	path = MesquiteFile.saveFileAsDialog("Save translationFile", new StringBuffer("translation.xml"));	    	if (!StringUtil.blank(path)) {	    		MesquiteFile.putFileContents(path, translationBuffer.toString(), false);	    		//return true;	    	}	    	//return false;	}	/*.................................................................................................................*/   	/** A stub method for doing any necessary cleanup after taxon names have been altered.*/   	public void cleanupAfterAlterTaxonNames(CommandRecord commandRec){ 			if (createTranslationFile)				saveTranslationFile(commandRec,"");   	}	/*.................................................................................................................*/   	public boolean getOptions(CommandRecord commandRec){   		if (commandRec.scripting())   			return true;   		createTranslationFile=true;		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog queryDialog = new ExtensibleDialog(containerOfModule(), "Condense names",  buttonPressed);		queryDialog.addLabel("Condensation of taxon names", Label.CENTER);		SingleLineTextField truncationLengthField = queryDialog.addTextField("Maximum length:", ""+truncLength, 20);		Checkbox cleanTokenBox = queryDialog.addCheckBox("remove all alphanumeric characters", cleanToken);		Checkbox translationFileBox = queryDialog.addCheckBox("create translation file", createTranslationFile);		queryDialog.completeAndShowDialog(true);					boolean ok = (queryDialog.query()==0);				if (ok) {			String s = truncationLengthField.getText();			truncLength = MesquiteInteger.fromString(s);			if (!MesquiteInteger.isCombinable(truncLength))				ok = false;			cleanToken = cleanTokenBox.getState();			createTranslationFile = translationFileBox.getState();		}				queryDialog.dispose();		if (ok && createTranslationFile) {				translationBuffer.setLength(0);				StringUtil.appendStartOfXMLFile(translationBuffer);				translationBuffer.append("<mesquite>\n");				translationBuffer.append("\t<translateTaxa>\n");						}		return ok;   	}	/*.................................................................................................................*/   	/** Called to alter the taxon name in a single cell.  If you use the alterContentOfCells method of this class,    	then you must supply a real method for this, not just this stub. */   	public boolean alterName(Taxa taxa, int it, CommandRecord commandRec){   		boolean nameChanged = false;		String name = taxa.getTaxonName(it);		if (name!=null && name.length()>truncLength){			String suffix;			if (cleanToken)				suffix= ""+(it+1);   //it+1 as zero-based			else				suffix = "."+(it+1);			int cutLength = truncLength-suffix.length();			String trunced=name;			if (cutLength>0)				trunced =  name.substring(0, cutLength)+suffix;			if (cleanToken){				trunced =  StringUtil.cleanseStringOfFancyChars(trunced,true,false);			}			if (createTranslationFile) {				translationBuffer.append("\t\t<translate>\n");				StringUtil.appendXMLTag(translationBuffer, 3, "name", name);				StringUtil.appendXMLTag(translationBuffer, 3, "synonym", trunced);				translationBuffer.append("\t\t</translate>\n");			}			taxa.setTaxonName(it, trunced, false);			nameChanged = true;		}		return nameChanged;   	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Consenses taxon names", "[length]", commandName, "condense")) {	   	 		if (taxa !=null){	   	 			 truncLength = MesquiteInteger.fromFirstToken(arguments, new MesquiteInteger(0));	   	 			alterTaxonNames(taxa,table, commandRec);	   	 		}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/    	 public String getNameForMenuItem() {		return "Condense...";   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Condense taxon names";   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Condenses taxon names.";   	 }}	