/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.basic.BasicParametersExplorer;import java.awt.*;import java.awt.event.*;import java.util.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class BasicParametersExplorer extends ParametersExplorer  {	String title = null;	PEWindow npw;	ParametersExplorable explorable;	MesquiteParameter[] parameters;	boolean[] selected;	MesquiteParameter xParameter, yParameter;	double[][] values;	int numDivisions = 10;  //SHOULD be user settable	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		setModuleWindow( npw = new PEWindow(this));		values = new double[numDivisions][numDivisions];		if (!commandRec.scripting()){			getModuleWindow().setVisible(true);		}		makeMenu("Parameters");		addMenuItem("Choose Parameters...", makeCommand("chooseParameters", this));		resetContainingMenuBar();		resetAllWindowsMenus();		return true;	}	/*.................................................................................................................*/	boolean showDialog(){		if (parameters == null)			return false;		ParametersDialog dlog = new ParametersDialog(containerOfModule(), "Parameters", parameters, selected, 2, 2);		dlog.completeAndShowDialog(true);		boolean ok = (dlog.query()==0);		if (ok) {		}		dlog.dispose();		return ok;	}	/*.................................................................................................................*/	public void setExplorable(ParametersExplorable explorable, CommandRecord commandRec){		this.explorable = explorable;		askForParameters(commandRec);		if (!commandRec.scripting())			showDialog();		doCalcs(commandRec);	}	/*.................................................................................................................*/	/** notifies this module that explorable's previous values are now invalid */	public void explorableChanged(ParametersExplorable explorable, CommandRecord commandRec){		doCalcs(commandRec);	}	/*.................................................................................................................*/	/** notifies this module that explorable's list of parameters is now invalid */	public void parameterSpecsChanged(ParametersExplorable explorable, CommandRecord commandRec){		askForParameters(commandRec);		doCalcs(commandRec);	}	MesquiteParameter getParameterSelected(int which){		int count = 0;		for (int i=0; i<selected.length; i++)			if (selected[i]){				count++;				if (count == which)					return parameters[i];			}		return null;	}	public void doCalcs(CommandRecord commandRec){		if (explorable == null || parameters == null)			return;		xParameter = getParameterSelected(1);		double xMin = xParameter.getMinimumAllowed();		double xMax = xParameter.getMaximumAllowed();		yParameter = getParameterSelected(2);		double origX = xParameter.getValue();		double origY = yParameter.getValue();		double yMin = yParameter.getMinimumAllowed();		double yMax = yParameter.getMaximumAllowed();		for (int ix = 0; ix < numDivisions; ix++){			xParameter.setValue(xMin + (xMax-xMin)*ix/numDivisions);			for (int iy = 0; iy < numDivisions; iy++){				commandRec.tick("x div " + ix + " param " + xParameter.getValue() + " y division " + iy + " param " + yParameter.getValue());				yParameter.setValue(yMin + (yMax-yMin)*iy/numDivisions);				values[ix][iy] = explorable.calculate(null, commandRec);			}		}		xParameter.setValue(origX);		yParameter.setValue(origY);		npw.setValues(values, xMin, xMax, yMin, yMax, numDivisions, xParameter, yParameter);	}	void askForParameters(CommandRecord commandRec){		parameters = explorable.getExplorableParameters();		if (parameters == null)			return;		if (selected == null || selected.length != parameters.length){			selected = new boolean[parameters.length];			if (selected.length > 0)				selected[0] = true;			if (selected.length > 1)				selected[1] = true;		}	}	/*.................................................................................................................*/	public Snapshot getSnapshot(MesquiteFile file) {		Snapshot temp = new Snapshot();		if (npw !=null){			temp.addLine("getWindow");			temp.addLine("tell It");			Snapshot fromWindow = npw.getSnapshot(file);			temp.incorporate(fromWindow, true);			temp.addLine("endTell");			temp.addLine("showWindow");		}		else {		}		/*if (!StringUtil.blank(npw.getJumpExplanation()))		   	 		temp.addLine("setExplanation " + StringUtil.tokenize(npw.getJumpExplanation()));		 */		return temp;	}	/*.................................................................................................................*/	public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {		if (checker.compare(this.getClass(), "Shows the dialog choosing parameters", null, commandName, "chooseParameters")) {			if (showDialog())				doCalcs(commandRec);		}		else			return super.doCommand(commandName, arguments, commandRec, checker);		return null;	}	public void shutDown(){		if (!isDoomed() && npw!=null)			windowGoAway(npw);	}	/*.................................................................................................................*/	public void windowGoAway(MesquiteWindow whichWindow) {		whichWindow.hide();		whichWindow.dispose();		iQuit();	}	/*.................................................................................................................*/	public void endJob() {		if (npw != null) {			npw.hide();			npw.dispose();		}		super.endJob();	}	/*.................................................................................................................*/	public String getName() {		return "Parameters Explorer";	}	/*.................................................................................................................*/	public String getExplanation() {		return "Provides a window to show values returned when parameter settings are varied";	}	public boolean isSubstantive(){		return true;	}	public boolean isPrerelease(){		return true;	}}/* ======================================================================== */class PEWindow extends MesquiteWindow {	FieldPanel field;	public PEWindow(BasicParametersExplorer module) {		super(module, false);		setWindowSize(220, 260);		setBackground(ColorDistribution.straw);		field = new FieldPanel();		addToWindow(field);		field.setLocation(0, 0);		field.setVisible(true);		windowResized();		resetTitle();	}	/*.................................................................................................................*/	/** When called the window will determine its own title.  MesquiteWindows need	to be self-titling so that when things change (names of files, tree lists, etc.)	they can reset their titles properly*/	public void resetTitle(){		setTitle("Parameters Explorer");	}	/*.................................................................................................................*/	/** to be overridden by MesquiteWindows for a text version of their contents*/	public String getTextContents() {		return "";	}	void setValues(double[][] values, double xMin, double xMax, double yMin, double yMax, int numDivisions, MesquiteParameter xParam, MesquiteParameter yParam){		field.setValues(values, xMin,  xMax,  yMin,  yMax,  numDivisions, xParam, yParam);		field.repaint();		repaint();	}	public void windowResized(){		if (field == null)			return;		field.setSize(getWidth(), getHeight());	}}class FieldPanel extends MesquitePanel {	double[][] values;	double xMin; double xMax; double yMin; double yMax; int numDivisions;	int border = 40;	TextRotator textRotator;	MesquiteParameter xParam, yParam;	public FieldPanel (){		textRotator = new TextRotator();	}	void setValues(double[][] values, double xMin, double xMax, double yMin, double yMax, int numDivisions, MesquiteParameter xParam, MesquiteParameter yParam){		this.values = values;		this.xMin = xMin;		this.xMax = xMax;		this.yMin = yMin;		this.yMax = yMax;		this.xParam = xParam;		this.yParam = yParam;		this.numDivisions = numDivisions;	}	public void paint(Graphics g){		if (MesquiteWindow.checkDoomed(this))			return;		if (values == null){			MesquiteWindow.uncheckDoomed(this);			return;		}		g.setColor(Color.black);		int w = getBounds().width-border;		int h = getBounds().height-border;		textRotator.drawRotatedText(xParam.getName(), -1, g, this, border-12, border-16);		for (int ic = 0; ic<numDivisions; ic++){			double xValue = xMin + (xMax-xMin)*ic/numDivisions;			int pixelStartX = (ic*w)/numDivisions + border;			textRotator.drawRotatedText(MesquiteDouble.toString(xValue), ic, g, this, pixelStartX, border-4);		}		g.drawString(yParam.getName(), 4,  - 6 + border);		for (int it = 0; it<numDivisions; it++){			double yValue = yMin + (yMax-yMin)*it/numDivisions;			int pixelStartY = ((it+1)*h)/numDivisions - 6 + border;			g.drawString(MesquiteDouble.toString(yValue), 10, pixelStartY);		}		double min = Double2DArray.minimum(values, true);		double max = Double2DArray.maximum(values, true);		if (MesquiteDouble.isUnassigned(min) || MesquiteDouble.isUnassigned(max)){		}		else {			for (int ic = 0; ic<values.length; ic++)				for (int it = 0; it<values[ic].length; it++){					int pixelStartX = (ic*w)/values.length + border;					int pixelEndX = ((ic+1)*w)/values.length + border;					int pixelStartY = (it*h)/values[ic].length + border;					int pixelEndY = ((it+1)*h)/values[ic].length + border;					double v= values[ic][it];					Color c = null;					if (MesquiteDouble.isUnassigned(v))						c = Color.gray;					else if (!MesquiteDouble.isCombinable(v))						c = Color.pink;					else						c = MesquiteColorTable.getGreenScale(values[ic][it],  min,  max, false);					g.setColor(c);					g.fillRect(pixelStartX, pixelStartY, pixelEndX-pixelStartX, pixelEndY-pixelStartY);					g.setColor(Color.black);					g.drawString(MesquiteDouble.toString(values[ic][it], 4), pixelStartX+2, pixelEndY-4);					if (MesquiteDouble.isCombinable(v) && (v-min)/(max - min) < 0.0001){						g.setColor(Color.blue);						g.drawRect(pixelStartX, pixelStartY, pixelEndX-pixelStartX-1, pixelEndY-pixelStartY-1);					}				}		}		MesquiteWindow.uncheckDoomed(this);	}}