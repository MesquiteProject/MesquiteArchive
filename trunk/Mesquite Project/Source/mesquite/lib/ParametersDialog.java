/* Mesquite source code.  Copyright 2001-2006 D. Maddison and W. Maddison. Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.lib;import java.awt.*;import java.awt.event.*;/*===============================================*//** An extensible dialog box containing a list with standard buttons.  */public class ParametersDialog extends ExtensibleDialog implements ItemListener {	MesquiteParameter[] parameters;	Checkbox[] boxes;	DoubleField[] min, max, value;	Choice[] constraintMenu;	int[] constraints;	boolean usingSelection = false;	int minSelect, maxSelect;	int[] selectionAge;	boolean[] selected;	int age = 0;	/*.................................................................................................................*/	public ParametersDialog (Frame parent, String title, MesquiteParameter[] parameters, boolean[] selected, int minSelect, int maxSelect, int[] constraints) {		super(parent, title, new MesquiteInteger());		this.parameters  = parameters;		this.selected = selected;		this.constraints = constraints;		if (selected !=null){			boxes = new Checkbox[parameters.length];			selectionAge = new int[parameters.length];			usingSelection = true;		}		min = new DoubleField[parameters.length];		max = new DoubleField[parameters.length];		value = new DoubleField[parameters.length];		if (constraints!= null){			constraintMenu = new Choice[constraints.length];			for (int i= 0; i<constraints.length; i++)				if (constraints[i] == -1) //unconstrained; -2 would mean no constraint					constraints[i] = i;		}		this.minSelect = minSelect;		this.maxSelect = maxSelect;		for (int i=0; i<parameters.length; i++){			if (selected !=null && i < selected.length && selected.length>1 && minSelect<parameters.length){				boxes[i] = addCheckBox(parameters[i].getName(), selected[i]);				if (selected[i])					selectionAge[i] = age++;				boxes[i].addItemListener(this);			}			else {				addLabel(parameters[i].getName());			}			suppressNewPanel();			value[i] = addDoubleField("Current Value: ", parameters[i].getValue(), 6, parameters[i].getMinimumAllowed(), parameters[i].getMaximumAllowed());			suppressNewPanel();			min[i] = addDoubleField("Min: ", parameters[i].getMinimumSuggested(), 6, parameters[i].getMinimumAllowed(), parameters[i].getMaximumAllowed());			suppressNewPanel();			max[i] = addDoubleField("Max: ", parameters[i].getMaximumSuggested(), 6, parameters[i].getMinimumAllowed(), parameters[i].getMaximumAllowed());			if (constraints!= null && i<constraints.length && constraints[i]>=-1){				suppressNewPanel();				String[] constraintNames = new String[parameters.length];				for (int k = 0; k<parameters.length; k++)					if (k == i)						constraintNames [k]= "-";					else						constraintNames[k] = parameters[k].getName();				constraintMenu[i] = addPopUpMenu ("Constrain = ", constraintNames, constraints[i]); 			}			if (!StringUtil.blank(parameters[i].getExplanation())){				addLabel (parameters[i].getExplanation(), Label.LEFT);			}			addHorizontalLine(1);		}	}	public void acceptParameters(){		for (int i=0; i<parameters.length; i++){			parameters[i].setValue(value[i].getValue());			parameters[i].setMinimumSuggested(min[i].getValue());			if (max[i].getValue()<min[i].getValue())				max[i].setValue(min[i].getValue());			parameters[i].setMaximumSuggested(max[i].getValue());		}		if (constraints != null) {			for (int i=0; i<constraints.length; i++){				if (constraintMenu[i] != null){					constraints[i] = constraintMenu[i].getSelectedIndex();					if (constraints[i] == i)						constraints[i] = -1;				}			}		}	}	int getNumSelected(){		if (!usingSelection)			return 0;		int count = 0;		for (int i=0; i<selected.length; i++){			if (selected[i])				count++;		}		return count;	}	int getOldest(boolean selectedYes){		if (!usingSelection)			return -1;		int min = age+1;		int oldest = 0;		for (int i=0; i<selectionAge.length; i++){			if (selected[i]==selectedYes && selectionAge[i] < min){				min = selectionAge[i];				oldest = i;			}		}		return oldest;	}	void expandSelectToMin(int changed){		while (getNumSelected()<minSelect && getNumSelected() < selected.length){			int oldest = getOldest(false);			dontListen = true;			boxes[oldest].setState(true);			selected[oldest] = true;			selectionAge[oldest] = age++;			dontListen = false;		}	}	void contractSelectToMax(int changed){				while (getNumSelected()>maxSelect && (getNumSelected()> 0)){			int oldest = getOldest(true);			dontListen = true;			boxes[oldest].setState(false);			selected[oldest] = false;			//selectionAge[oldest] = 0;			dontListen = false;		}	}	boolean dontListen = false;	/*.................................................................................................................*/	public void itemStateChanged(ItemEvent e){		if (!usingSelection || dontListen){			return;		}		for (int i=0; i<boxes.length; i++){			if (e.getItem().equals(boxes[i].getLabel())){				if (boxes[i].getState())					selectionAge[i] = age++;				selected[i] = boxes[i].getState();				int num = getNumSelected();				if (num< minSelect)					expandSelectToMin(i);				else if(num > maxSelect)					contractSelectToMax(i);				return;			}		}	}}