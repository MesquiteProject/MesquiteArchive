/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)modified 26 July 01: protected against NullPointerException if null images in paint */package mesquite.lib;import java.awt.*;import java.awt.event.*;import java.util.*;/* ======================================================================== *//** The information bar just above the window contents.  This has icon-buttons to choose graphics versus various text modes.For the most part the InfoBar is responsible for controlling the display of the window itself. There are 9 modes: Two represent the output of the modules controlling the window (the standard graphics output and a text version).The other seven modes are informational modes that Mesquite composes and controls to inform the user about the modules currently contributing to the window and their parameters, explanations, and citations.*/public class HelpSearchStrip extends MousePanel implements Commandable {	TextArea searchBox;	int searchBoxAndX, searchBoxAndY;	public static boolean searchAND = true;	static Image andImage, orImage;	Font smallFont = new Font("SanSerif", Font.PLAIN, 10);	MesquiteCommand searchCommand = MesquiteTrunk.makeCommand("searchKeywords", this);	public HelpSearchStrip(MesquiteWindow window) {		super();		setLayout(null);		searchBox = new TextArea("", 1, 8, TextArea.SCROLLBARS_NONE);		add(searchBox);		searchBox.setBounds(0, 1, 130, 14);		searchBox.setVisible(true);		searchBox.setFont(smallFont);		searchBox.addKeyListener(new KIListener(this));		if (andImage==null && MesquiteModule.getRootPath()!=null){ //done here instead of static in case root path not yet defined when static run			andImage=  MesquiteImage.getImage(MesquiteModule.getRootImageDirectoryPath() + "and.gif");  			orImage=  MesquiteImage.getImage(MesquiteModule.getRootImageDirectoryPath() + "or.gif");  		}		setFont(smallFont);		if (window!=null)			setBackground(ColorDistribution.light[window.getColorScheme()]);		//setBackground(Color.green);		setCursor(Cursor.getDefaultCursor());	}	void enterPressed(){		String string = searchBox.getText();		if (!StringUtil.blank(string)) {			string = StringUtil.stripTrailingWhitespace(string);			string = StringUtil.replace(string, '"', '\'');			searchCommand.doItMainThread(ParseUtil.tokenize(string), null, false, false);		}	}	/*.................................................................................................................*/	public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {		if (checker.compare(this.getClass(), "Searches for keywords", "[keywords]", commandName, "searchKeywords")) {			String string = new Parser().getFirstToken(arguments);			if (!StringUtil.blank(string)) {				string = StringUtil.stripTrailingWhitespace(string);				searchBox.setText(string);				searchBox.selectAll();				MesquiteTrunk.mesquiteTrunk.searchKeyword(string, false, commandRec);			}		}		else			return super.doCommand(commandName, arguments, commandRec, checker);		return null;	}	/*.................................................................................................................*/	public void paint (Graphics g) {		if (MesquiteWindow.checkDoomed(this))			return;		Rectangle searchBoxRect = searchBox.getBounds();		searchBoxAndX = searchBoxRect.x+searchBoxRect.width+2;		searchBoxAndY = searchBoxRect.y + 2;		g.setColor(ColorDistribution.brown);		g.fillRect(searchBoxAndX-2, searchBoxRect.y, 12, searchBoxRect.height);		g.setColor(Color.black);		if (searchAND)			g.drawImage(andImage, searchBoxAndX, searchBoxAndY, this);		else			g.drawImage(orImage, searchBoxAndX, searchBoxAndY, this);		g.drawString("Search", searchBoxAndX+12, searchBoxAndY+10);		for (int i=0; i<2000; i+=15)			g.drawString(Integer.toString(i), i, i);		MesquiteWindow.uncheckDoomed(this);	}	int count = 0;	/*.................................................................................................................*/	public void mouseDown(int modifiers, int clickCount, long when, int x, int y, MesquiteTool tool) {		if (MesquiteWindow.checkDoomed(this))			return;		if (x> searchBoxAndX && x< searchBoxAndX+12  && y > searchBoxAndY && y< searchBoxAndY +12) {				searchAND = ! searchAND;				repaint();			}		else if (x> searchBoxAndX + 12 && x< searchBoxAndX+50  && y > searchBoxAndY && y< searchBoxAndY +12) {			enterPressed();		}						MesquiteWindow.uncheckDoomed(this);	}}class KIListener extends KeyAdapter {	HelpSearchStrip infoBar;	public KIListener(HelpSearchStrip bar){		infoBar = bar;	}	public void keyPressed(KeyEvent e){		//Event queue		super.keyPressed(e);		if (e.getKeyCode()== KeyEvent.VK_ENTER) {			infoBar.enterPressed();		}	}}