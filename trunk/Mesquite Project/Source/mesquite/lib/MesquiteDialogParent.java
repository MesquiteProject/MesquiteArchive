/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison. Version 1.11, June 2006. Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code.  The commenting leaves much to be desired. Please approach this source code with the spirit of helping out. Perhaps with your help we can be more than a few, and make Mesquite better. Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY. Mesquite's web site is http://mesquiteproject.org This source code and its compiled class files are free and modifiable under the terms of  GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.lib;import java.awt.*;import javax.swing.JEditorPane;/* =============================================== *//** A dialog box */public class MesquiteDialogParent extends Dialog {	LayoutManager layout;	Component current;	boolean enlargeOnly = false;	MDPShowThread showThread;	MDPHelperThread helperThread;	boolean isWizard = false;	WizardInfoPanel infoPanel;	public static int infoWidth = 200;	MesquiteDialog currentDialog;	public static long totalCreated = 0;	public static long totalDisposed = 0;	public static long totalFinalized  = 0;	public MesquiteDialogParent(Frame f, String title, boolean b) {		super(f, title, b);		//setLocation(0, 0);		totalCreated++;		setLayout(layout = new CardLayout());		setResizable(false);		setForeground(Color.black);		showThread = new MDPShowThread(this);		showThread.start();		helperThread = new MDPHelperThread(this);		helperThread.start();		MesquiteWindow.centerWindow(this);	}	/*-------------------------------------------------------*/	public void finalize() throws Throwable {		totalFinalized++;		super.finalize();	}	public void pleaseDispose(){		helperThread.pleaseDispose = true;	}	public void pleaseShow(){		showThread.pleaseShow = true;	}	boolean alreadyDisposed = false;	public void dispose(){		if (alreadyDisposed) {			return;		}		alreadyDisposed = true;		if (isWizard)			remove(infoPanel);		removeAll();		showThread.go = false;		helperThread.go = false;				super.setVisible(false);		totalDisposed++;		super.dispose();	}		public void setVisible(boolean b){		if (alreadyDisposed)			return;		super.setVisible(b);		if (helperThread != null)			helperThread.pleaseRepack = 1;	}	public Dimension getPreferredSize(){		if (isWizard)			return new Dimension(MesquiteDialog.wizardWidth, MesquiteDialog.wizardHeight);		return super.getPreferredSize();	}	public void add(MesquiteDialog dlog, Component c, String s){		if (alreadyDisposed)			return;		if (layout instanceof BorderLayout) {			super.add(c,BorderLayout.LINE_END);		}		else{			super.add(c, s);			((CardLayout)layout).show(this, s);	}		if (current != null)			remove(current);		current = c;		currentDialog = dlog;		resetSizes();	}	public MesquiteDialog getCurrentDialog(){		return currentDialog;	}	public void setAsWizard(){		setLayout(layout = new BorderLayout());		if (infoPanel == null){			infoPanel = new WizardInfoPanel(this);			infoPanel.setSize(infoWidth, getBounds().height);			infoPanel.setVisible(true);			add(infoPanel, BorderLayout.LINE_START);		}		resetSizes();		enlargeOnly = true;		isWizard = true;	}	public boolean isWizard(){		return isWizard;	}	void resetSizes(){		if (alreadyDisposed)			return;		if (layout instanceof CardLayout){			if (helperThread != null)				helperThread.pleaseResetInfo = true;			return;		}		Insets insets = getInsets();		int netHeight = getBounds().height - insets.top - insets.bottom;		int netWidth = getBounds().width - insets.left - insets.right;		if (infoPanel != null)			infoPanel.setBounds(insets.left, insets.top, infoWidth, netHeight);		if (current != null) {			current.setBounds(insets.left + infoWidth, insets.top, netWidth - infoWidth, netHeight);		}		if (helperThread != null)			helperThread.pleaseResetInfo = true;	}	void resetInfo(){		if (alreadyDisposed)			return;		if (currentDialog instanceof ExtensibleDialog){			String st = ((ExtensibleDialog)currentDialog).getHelpString();			if (st != null && infoPanel != null)				infoPanel.setText(st);		}		if (current != null){			current.doLayout();		current.invalidate();		current.validate();		}	}	 public void pack(){			if (alreadyDisposed)				return;		if (isWizard){			resetSizes();			super.pack();			invalidate();			validate();			doLayout();			MesquiteWindow.rpAll(current);			resetSizes();		}		else			super.pack();	}		public void setSize(int w, int h){		if (alreadyDisposed)			return;//		if (h>MesquiteDialog.wizardHeight)	Debugg.printStackTrace("SETSIZE " + h);		if (enlargeOnly){			if (w < getWidth())				w = getWidth();			if (h < getHeight())				h = getHeight();		}		super.setSize(w, h);		resetSizes();	}	public void setBounds(int x, int y, int w, int h){		if (alreadyDisposed)			return;//		if (h>MesquiteDialog.wizardHeight) Debugg.printStackTrace("SETBOUNDS " + h);		if (enlargeOnly){			if (w < getWidth())				w = getWidth();			if (h < getHeight())				h = getHeight();		}//		if (isWizard && locOnceSet)		super.setBounds(x, y, w, h);		resetSizes();	}	public void setLocation(int x, int y){		if (alreadyDisposed)			return;//		Debugg.printStackTrace("SETLOCATION");		super.setLocation(x, y);	}}class MDPShowThread extends Thread {	MesquiteDialogParent parent;	boolean pleaseShow = false;	int count = 0;	boolean go;	public MDPShowThread(MesquiteDialogParent parent){		this.parent = parent;	}	public void run(){		go = true;		try{			while (go){				Thread.sleep(50);				if (pleaseShow){					pleaseShow = false;					go = false;					parent.setVisible(true);				}			}		}		catch (InterruptedException e){		}	}}class MDPHelperThread extends Thread {	MesquiteDialogParent parent;	boolean pleaseDispose = false;	boolean pleaseResetInfo = false;	int pleaseRepack = 0; //to deal with a JVM bug, possibly only in OS X	boolean go;	int count = 0;	public MDPHelperThread(MesquiteDialogParent parent){		this.parent = parent;	}	public void run(){		go = true;		try{			while (go){				Thread.sleep(50);				if (pleaseResetInfo){					parent.resetInfo();					pleaseResetInfo = false;				}				/*Debugg.println("+++");				if (pleaseRepack ==1){					pleaseRepack = 2;				}				else if (pleaseRepack == 2){					parent.pack();					pleaseRepack = 0;									}*/				if (pleaseDispose){					parent.dispose();					pleaseDispose = false;					go = false;				}			}		}		catch (InterruptedException e){		}		parent.dispose();	}}class WizardInfoPanel extends MesquitePanel {	MesquiteDialogParent parent;	JEditorPane text;	public WizardInfoPanel (MesquiteDialogParent parent){		this.parent = parent;		setLayout(null);		text = new JEditorPane("text/html","<html><body bgcolor=\"#DEB887\"></body></html>");		add(text);		text.setVisible(true);		setBackground(ColorDistribution.mesquiteBrown);		//text.setBounds(0, 0, 50, 50);	}	public void setText(String s){		text.setText("<html><body bgcolor=\"#DEB887\">" + s + "</body></html>");	}	public void setSize(int w, int h){		super.setSize(w, h);		text.setBounds(4, 4, w-8, h-8);	}	public void setBounds(int x, int y, int w, int h){		super.setBounds(x, y, w, h);		text.setBounds(4, 4, w-8, h-8);	}	public Dimension getPreferredSize(){		return new Dimension(parent.infoWidth, MesquiteDialog.wizardHeight);	}}