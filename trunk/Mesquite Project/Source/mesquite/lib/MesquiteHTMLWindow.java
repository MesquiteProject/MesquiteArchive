/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.lib;import java.awt.*;import java.awt.datatransfer.*;import javax.swing.*;import javax.swing.event.*;import javax.swing.text.html.*;/* ======================================================================== *//** A window that displays text.  Yet to do: make it editable or not, have getText, etc.. */public class MesquiteHTMLWindow extends MesquiteWindow implements HyperlinkListener {	JEditorPane tA;	String assignedTitle;	MesquiteCommand copyCommand;	MesquiteCommand pasteCommand = null;	HTMLOwner owner;	public MesquiteHTMLWindow(MesquiteModule module, HTMLOwner owner, String assignedTitle, boolean showInfoBar) {		super(module, showInfoBar);// еее		this.assignedTitle = assignedTitle;		//setBackground(Color.white);		setWindowSize(600, 400);		this.owner = owner;		tA= new JEditorPane("text/html","<html></html>");		tA.setEditable(false);		tA.setBackground(Color.white);		tA.setForeground(Color.black);		tA.setVisible(true);		tA.addHyperlinkListener(this);		addToWindow(tA);		tA.setSize(getWidth(), getHeight());		pack();		resetTitle();	}	/*.................................................................................................................*/	/** When called the window will determine its own title.  MesquiteWindows need	to be self-titling so that when things change (names of files, tree blocks, etc.)	they can reset their titles properly*/	public void resetTitle(){		setTitle(assignedTitle);	}	public MesquiteCommand getPasteCommand() {		return pasteCommand; 	}	/*.................................................................................................................*/	/** Gets the minimum height of the content area of the window */	public int getMinimumContentHeight(){		return 100;	}	public void setEditable(boolean ed) {		tA.setEditable(ed);	}	public void setText(String s) {		tA.setText(s);		tA.repaint();	}	public String getText() {		return tA.getText();	}	/*.................................................................................................................*/	/** to be overridden by MesquiteWindows for a text version of their contents*/	public String getTextContents() {		return getText();	}	/*.................................................................................................................*/	public void printWindow(MesquitePrintJob pjob) {		if (pjob != null) {			if (infoBar.getMode()>0) 				super.printWindow(pjob);			else 				pjob.printText(getText(), new Font("Monospaced", Font.PLAIN, 12));		}	}	/*.................................................................................................................*/	/**	@author Peter Midford	 */	public void windowToPDF(MesquitePDFFile pdfFile, int fitToPage) {		if (pdfFile != null) {			if (infoBar.getMode()>0)				super.windowToPDF(pdfFile, fitToPage);			else				//Changed font size to 10, since courier is the only adobe supplied monospace font and				//it is a little larger than the system supplied monospace font.				pdfFile.printText(getText(), new Font("Monospaced", Font.PLAIN, 10));		}	}	/*.................................................................................................................*/	public void windowResized(){		super.windowResized();		if (tA!=null)			tA.setSize(getWidth(), getHeight()); //getFullWidth	}	/** Sets the window size.  To be used instead of setSize. 	public void containerSizeSet(int width, int height) {	}	/*.................................................................................................................*/	/** Sets the window size.  To be used instead of setSize. */	public void setWindowSize(int width, int height) {		super.setWindowSize(width, height);		if (tA!=null)			tA.setSize(getWidth(), getHeight());	}	/*.................................................................................................................*/	public void copyGraphicsPanel(){		if (tA == null)			return;		String s = tA.getSelectedText();		if (!StringUtil.blank(s)) {			Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();			StringSelection ss = new StringSelection(s);			clip.setContents(ss, ss);		}		else {			Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();			StringSelection ss = new StringSelection(tA.getText());			clip.setContents(ss, ss);		}	}	/*.................................................................................................................*/	/** Respond to commands sent to the window. */	public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {		if (checker.compare(MesquiteWindow.class, "Prints the contents of the window", null, commandName, "printWindow")) {			prWindow(MesquitePrintJob.AUTOFIT);		}		else if (checker.compare(getClass(), "Copies selection to clipboard", null, commandName, "paste")) {			if (tA == null)				return null;			Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();			Transferable t = clip.getContents(this);			try {				String s = (String)t.getTransferData(DataFlavor.stringFlavor);				if (s!=null && tA!=null) {					String text = tA.getText();					String newText = text.substring(0, tA.getSelectionStart()) + s + text.substring(tA.getSelectionEnd(), text.length());					tA.setText(newText);					return s;				}			}			catch(Exception e){				MesquiteMessage.printStackTrace(e);			}			return null;		}		else 			return super.doCommand(commandName, arguments, commandRec, checker); //note that this will repeat the setFont for the window		return null;	}	public void hyperlinkUpdate(HyperlinkEvent e) {		if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {			JEditorPane pane = (JEditorPane) e.getSource();			if (e instanceof HTMLFrameHyperlinkEvent) {				HTMLFrameHyperlinkEvent  evt = (HTMLFrameHyperlinkEvent)e;				HTMLDocument doc = (HTMLDocument)pane.getDocument();				doc.processHTMLFrameHyperlinkEvent(evt);			} else {				try {						pane.setPage(e.getURL());				} catch (Throwable t) {					owner.linkTouched(e.getDescription());				}			}		}	}}