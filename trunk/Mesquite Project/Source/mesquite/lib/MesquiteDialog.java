/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.1, May 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.lib;import java.awt.*;import java.awt.event.*;import java.util.*;import mesquite.lib.duties.EmployeeTree;import mesquite.lib.duties.FileCoordinator;/*===============================================*//** A dialog box*/public abstract class MesquiteDialog extends Dialog implements Listable, ComponentListener, KeyListener, MouseListener {	static int numCreated=0;	int id=0;	boolean alreadyDisposed=false;	protected String defaultButtonString = null;	int savedX =0;	int savedY = 0;	public int tickled = 0;	boolean autoDispose = true;	Thread thread;	public MesquiteDialog (String title) {		super(MesquiteWindow.dialogAnchor, title, true);		MesquiteWindow.numDialogs++;		if (MesquiteModule.mesquiteTrunk.dialogVector!=null)			MesquiteModule.mesquiteTrunk.dialogVector.addElement(this, false);		setLocation(0,0);		MainThread.setShowWaitWindow(false);		setForeground(Color.black);		alreadyDisposed=false;		numCreated++;		id = numCreated;		addComponentListener(this);		setBackground(ColorDistribution.light[0]);		setCursor(Cursor.getDefaultCursor());		this.setResizable(false);		//MesquiteWindow.dialogAnchor.toFront();	}	public long getID(){		return id;	}	public String getName(){		return getTitle();	}	/*.................................................................................................................*/	/*	public Component add(Component c){		if (c!=null)			c.addKeyListener(this);		return super.add(c);	}	public void add(Component c, Object obj){		if (c!=null)			c.addKeyListener(this);		super.add(c, obj);	}	public void add(Component c, Object obj, int i){		if (c!=null)			c.addKeyListener(this);		super.add(c, obj, i);	}	public Component add(Component c, int i){		if (c!=null)			c.addKeyListener(this);		return super.add(c, i);	}	public Component add(String s, Component c){		if (c!=null)			c.addKeyListener(this);		return super.add(s, c);	}	public Component addWithoutKeyListener(Component c){		return super.add(c);	}	public void addWithoutKeyListener(Component c, Object obj){		 super.add(c, obj);	}	public void addWithoutKeyListener(Component c, Object obj, int i){		 super.add(c, obj, i);	}	public Component addWithoutKeyListener(Component c, int i){		return super.add(c, i);	}	public Component addWithoutKeyListener(String s, Component c){		return super.add(s, c);	}	 */	/*.................................................................................................................*/	public void setAutoDispose (boolean autoDispose) {		this.autoDispose = autoDispose;	}	/*.................................................................................................................*/	public boolean getAutoDispose () {		return autoDispose;	}	/*.................................................................................................................*/	public void componentResized(ComponentEvent e){}	/*.................................................................................................................*/	public void componentMoved(ComponentEvent e){}	/*.................................................................................................................*/	public void componentHidden(ComponentEvent e){}	/*.................................................................................................................*/	public void componentShown(ComponentEvent e){		if (MesquiteTrunk.isMacOSXJaguar()) { //attempts to get around Jaguar bugs			valAll(this);			setLocation(savedX, savedY);		}		Toolkit.getDefaultToolkit().sync();	}	public void getButtons(Component c, Vector v){		if (c==null || v == null)			return;		if (c instanceof Button)			v.addElement(((Button)c).getLabel());		if (c instanceof Container){			Component[] cc = ((Container)c).getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++)					getButtons(cc[i], v);		}	}	private void valAll(Component c){		if (c==null)			return;		if (c instanceof Container){			c.invalidate();			c.validate();			Component[] cc = ((Container)c).getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++)					valAll(cc[i]);		}	}	private void rpAll(Component c){		if (c==null)			return;		c.repaint();		if (c instanceof Container){			Component[] cc = ((Container)c).getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++)					rpAll(cc[i]);		}	}	/*.................................................................................................................*/	public static void addComponent(Container container, Component component, int gridx, int gridy, int gridwidth, int gridheight, int weightx, int weighty, int fill, int anchor){		LayoutManager lm = container.getLayout();		if (lm instanceof GridBagLayout) {			GridBagConstraints gbc = new GridBagConstraints();			gbc.gridx = gridx;			gbc.gridy = gridy;			gbc.gridwidth = gridwidth;			gbc.gridheight = gridheight;			gbc.weightx = weightx;			gbc.weighty = weighty;			gbc.fill = fill;			gbc.anchor = anchor;			((GridBagLayout)lm).setConstraints(component, gbc);		}		container.add(component);	}	public abstract void buttonHit( String buttonLabel, Button button);	public void dispose(){		if (alreadyDisposed){			MainThread.setShowWaitWindow(true);			return;		}		alreadyDisposed=true;		MesquiteWindow.numDialogs--;		if (MesquiteModule.mesquiteTrunk.dialogVector!=null)			MesquiteModule.mesquiteTrunk.dialogVector.removeElement(this, false);		if (MesquiteWindow.numDialogs<=0)			MesquiteWindow.dialogAnchor.toBack();		super.dispose();		MainThread.setShowWaitWindow(true);	}	private void setMouseListeners(Component c){		if (c==null)			return;		if (c instanceof Button)			c.addMouseListener(this);		if (c instanceof Container){			Component[] cc = ((Container)c).getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++)					setMouseListeners(cc[i]);		}	}//	TODO: have way to remove default button or set default button in all dialog boxes	private void setKeyListeners(Component c){		if (c==null)			return;		c.addKeyListener(this);		if (c instanceof Button && defaultButtonString!=null && defaultButtonString.equals(((Button)c).getLabel())){			Font f = c.getFont();			Font fontToSet = new Font (f.getName(), Font.ITALIC, f.getSize());			c.setFont(fontToSet);		}		if (c instanceof Container){			Component[] cc = ((Container)c).getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++)					setKeyListeners(cc[i]);		}	}	public void setLocation(int x, int y){		savedX = x;		savedY = y;		super.setLocation(x, y);	}	public void setVisible(boolean vis){		if (vis){			if (!MesquiteWindow.GUIavailable ||  MesquiteWindow.suppressAllWindows)				return;			//if defaultButtonString flag is non null, then recurse through components setting key listeners			if (defaultButtonString !=null)				setKeyListeners(this);			setMouseListeners(this);			//pack();			thread = Thread.currentThread();			/*if (mt instanceof MesquiteThread) {				thread = (MesquiteThread)mt;			}*/			//waitForOtherDialogThreads();		}		if (vis && (!MesquiteTrunk.isMacOS() || MesquiteTrunk.getJavaVersionAsDouble()>=1.4)) {			if (!(this instanceof ExtensibleDialog))				System.out.println("Dialog box shown.  Title: " + getName());		}		super.setVisible(vis);		invalidate();//attempt to workaround bug in Jaguar		validate(); //attempt to workaround bug in Jaguar	}	//don't show dialog if there are already showing dialogs on other threads!!!!!	private void waitForOtherDialogThreads(){		try {			while (othersExist()){				Thread.sleep(20);			}		}		catch (Exception e){		}		catch (Error e){		}	}	private boolean othersExist(){		ListableVector ds = MesquiteModule.mesquiteTrunk.dialogVector;		if (ds==null || ds.size() <1)			return false;		for (int i=0; i<ds.size(); i++) {			MesquiteDialog dlog = (MesquiteDialog)ds.elementAt(i);			if (dlog != this && dlog.isVisible() && dlog.thread !=null && thread !=null && dlog.thread != thread)				return true;		}		return false;	}	public void setDefaultButton(String s){		defaultButtonString = s;	}	public void keyTyped(KeyEvent e){	}	public void keyPressed(KeyEvent e){	}	public void keyReleased(KeyEvent e){		if (e.getKeyCode() == 10 && defaultButtonString!=null) {			buttonHit(defaultButtonString, null);			if (autoDispose)				dispose();		}	}	public void mouseClicked(MouseEvent e){	}	public void mouseEntered(MouseEvent e){	}	public void mouseExited(MouseEvent e){	}	public void mousePressed(MouseEvent e){	}	public void mouseReleased(MouseEvent e){		if (e.getComponent() instanceof Button) {			buttonHit(((Button)e.getComponent()).getLabel(), (Button)e.getComponent());			dispose();		}	}	public void selectButton(String label){ //for use by scripting & console		buttonHit(label, null);		dispose();	}}