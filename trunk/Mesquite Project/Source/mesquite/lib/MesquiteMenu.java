/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.1, May 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lib;import java.awt.*;import java.awt.event.*;import mesquite.lib.duties.*;/* ======================================================================== *//** A menu.*/public class MesquiteMenu extends Menu{	public static int totalSubmenus = 0;	public boolean recycle = false;	MesquiteMenuSpec spec;	//static MesquiteSubmenu[] menus = new MesquiteSubmenu[255];	long id = 0;	static long numInstances = 0;		public MesquiteMenu(MesquiteMenuSpec spec) {		super(spec.getLabel(), true);  // true to designate as tearoff; doesn't seem to work on macos		id = numInstances++;		if (spec.getLabel() == null) {			MesquiteMessage.println("menu with no name: ");			setEnabled(false);		}		if (!spec.isEnabled())			setEnabled(false);		this.spec = spec;	}	public MesquiteMenu(String label) {		super(label, true);  // true to designate as tearoff; doesn't seem to work on macos		id = numInstances++;		if (label == null) {			MesquiteMessage.println("menu with no name: ");			setEnabled(false);		}		this.spec = null;	}	public MesquiteMenuSpec getSpec(){		return spec;	}	public static MesquiteMenu getMenu(MesquiteMenuSpec spec) {/*		for (int i=0; i<255; i++) {			if (menus[i]!=null && menus[i].recycle) {				menus[i].recycle = false;				menus[i].setLabel(menuName);				return menus[i];			}			else if (menus[i] == null) {				menus[i] = new MesquiteSubmenu(menuName);				return menus[i];			}		}*/		return new MesquiteMenu(spec);	}	public long getID(){		return id;	}	boolean itemWithSameLabelExists(String label){		for (int i=0; i<getItemCount(); i++)			if (getItem(i).getLabel().equals(label))				return true;		return false;	}	static boolean itemWithSameLabelExists(Menu menu, String label){		if (menu == null)			return false;		for (int i=0; i<menu.getItemCount(); i++)			if (menu.getItem(i).getLabel().equals(label))				return true;		return false;	}	public MenuItem add(MenuItem mmi) {		if (mmi==null)			return null;/*		while (itemWithSameLabelExists(mmi.getLabel())){			mmi.setLabel(mmi.getLabel()+".");		}*/		if (mmi instanceof Menu)			totalSubmenus++;		return super.add(mmi);	}	public static void add(Menu menu, MenuItem mmi) {		if (mmi==null  || menu == null)			return;/*		while (itemWithSameLabelExists(menu, mmi.getLabel())){			mmi.setLabel(mmi.getLabel()+".");		}*/				menu.add(mmi);	}}