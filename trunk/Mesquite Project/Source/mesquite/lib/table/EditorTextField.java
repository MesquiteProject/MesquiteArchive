/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison. Version 1.1, May 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lib.table;import java.awt.*;import java.awt.event.*;import mesquite.lib.*;import java.util.*;/* ======================================================================== *//** A text field that is moved from place to place as the text is edited in a panel of a MesquiteTable.*/public class EditorTextField extends TextField {	int row, column;	EditorPanel panel;	boolean editing;	boolean forgetFocusGained=false;	boolean suppressFocusLost = false;	FontMetrics fontMetrics;	boolean wasEditingListener=false;	String previousText = "";	boolean allowReturn = true;	MesquiteCommand textReturnedCommand;	public EditorTextField (EditorPanel panel, int column, int row) {		super();		try {			setFocusTraversalKeysEnabled(false);			//setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, null);		}		catch (Error e){		}		this.panel = panel;		this.column=column;		this.row = row;		editing = false;		textReturnedCommand = MesquiteModule.makeCommand("returnText", panel);		textReturnedCommand.setSuppressLogging(true);		setBackground(ColorDistribution.veryLightGray);	//	setBackground(ColorDistribution.cyan);		addKeyListener(new KListener());		addFocusListener(new FListener());	}		public void setEditing(boolean editing) {		selStart = -1;		selEnd = -1;		this.editing = editing;		wasEditingListener = true;	}	public boolean getEditing() {		return editing;	}	public void setFont(Font f){		super.setFont(f);		Graphics g = getGraphics();		if (g==null)			return;		fontMetrics = g.getFontMetrics(getFont());		g.dispose();	}		private int ccc = 0;	public void setText(String s){		if (s == null)			super.setText("");		else			super.setText(s);		allowReturn = true;	}		public int getMinimalWidth(){		if (fontMetrics==null) {			Graphics g=getGraphics();			if (g==null)				return 0;			fontMetrics = g.getFontMetrics(getFont());			g.dispose();			if (fontMetrics==null)				return 0;		}		return fontMetrics.stringWidth(getText())+MesquiteModule.textEdgeCompensationWidth;	}	public void dontRestoreIfFocusGained() {		forgetFocusGained = true;	}	public void setSuppressFocusLost(boolean b) {		suppressFocusLost = b;	}	public void setColumnRow (int column, int row) {		if (this.column!=column || this.row!=row)			previousText = null;		this.column=column;		this.row = row;	}	public void paint(Graphics g){ //^^^	   	if (MesquiteWindow.checkDoomed(this))	   		return;		super.paint(g);		if (fontMetrics==null) {			fontMetrics = g.getFontMetrics(getFont());			panel.checkBounds();		}		MesquiteWindow.uncheckDoomed(this);	}			public int getColumn() {		return column;	}	public int getRow() {		return row;	}	int selStart=0;	int selEnd=0;	public void offEdit() {		if (editing) {			boolean refreshPanel = false;			if (column>=-1 && row >=-1 && allowReturn){				panel.aboutToReturnText(column, row);				textReturnedCommand.doItMainThread(Integer.toString(column) + " " + row + "  " + ParseUtil.tokenize(getText()), null, this);				refreshPanel = true;			}			selStart = -1;			selEnd = -1;			allowReturn = false;			setEditing(false);			if (refreshPanel)				panel.checkEditFieldLocation();		}	}	public void recordEdit() {		if (editing) {			if (column>=-1 && row >=-1 && allowReturn){				panel.aboutToReturnText(column, row);				textReturnedCommand.doItMainThread(Integer.toString(column) + " " + row + "  " + ParseUtil.tokenize(getText()), null, this);			}			allowReturn = false;		}	}	class FListener extends FocusAdapter {		public void focusLost(FocusEvent e){						if (editing && !suppressFocusLost) {				wasEditingListener = editing;				selStart = getSelectionStart();				selEnd = getSelectionEnd();				previousText = getText();				panel.recordEdit();			}		}		public void focusGained(FocusEvent e){			if (wasEditingListener && !forgetFocusGained) {				if (previousText !=null)					setText(previousText);				previousText = null;				try{					if (selStart<0 || selEnd <0) {						selectAll();						selStart = getSelectionStart();						selEnd = getSelectionEnd();					}					else {						setSelectionStart(selStart);						setSelectionEnd(selEnd);					}				}				catch (NullPointerException npe){				}				setEditing(true);			}		}	}	class KListener extends KeyAdapter {		public void keyPressed(KeyEvent e){			//Event queue			if (e.getKeyCode()== KeyEvent.VK_ENTER) {				panel.enterPressed(e);			}			else if (e.getKeyCode()== KeyEvent.VK_TAB) {				panel.tabPressed(e);			}			else if (e.getKeyCode()== KeyEvent.VK_RIGHT){				if (getSelectionStart()==0 && getSelectionEnd()== getText().length())					panel.rightArrowPressed(e);			}			else if (e.getKeyCode()== KeyEvent.VK_LEFT) {				if (getSelectionStart()==0 && getSelectionEnd()== getText().length())					panel.leftArrowPressed(e);			}			else if (e.getKeyCode()== KeyEvent.VK_UP)				panel.upArrowPressed(e);			else if (e.getKeyCode()== KeyEvent.VK_DOWN)				panel.downArrowPressed(e);		}	}}