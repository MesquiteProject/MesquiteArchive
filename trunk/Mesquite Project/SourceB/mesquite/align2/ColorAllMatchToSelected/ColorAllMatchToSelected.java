/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align2.ColorAllMatchToSelected; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;/* ======================================================================== */public class ColorAllMatchToSelected extends DataWindowAssistantI implements CellColorer {	MesquiteTable table;	CharacterData data;	double[][] best;	boolean notCalculated = true;	DataMatcher matchTask;	MesquiteString matchTaskName;	MesquiteCommand ntC;	MesquiteSubmenuSpec mss;	Class stateClass;		String ntName;	boolean showmaxWindowMatch;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		ntC =makeCommand("setMatchTask",  this); 		matchTaskName = new MesquiteString();		return true;	}	public void setActiveColors(boolean active, CommandRecord commandRec){		this.active = active; 		if (active){			if (numCompatibleModulesAvailable(DataMatcher.class, stateClass, this)>0) {				mss = addSubmenu(null, "Match Criterion", ntC, DataMatcher.class);	 			mss.setSelected(matchTaskName);	 			mss.setCompatibilityCheck(stateClass);				mss.setEnabled(false);			}	 		if (!StringUtil.blank(ntName)) //remember last one used				matchTask = (DataMatcher)hireNamedEmployee(commandRec, DataMatcher.class, ntName, data.getStateClass());//shouldn't ask as this is an init and might not be needed.  "Value to calculate for character state in taxon"						if (matchTask == null)				matchTask = (DataMatcher)hireCompatibleEmployee(commandRec, DataMatcher.class, data.getStateClass(), "Number for nodes");//shouldn't ask as this is an init and might not be needed.  "Value to calculate for character state in taxon"//Debugg.println("matchTask " + matchTask + " data " + data);				 		if (matchTask != null){		 		ntName = "#"+matchTask.getShortClassName();		 		matchTask.setHiringCommand(ntC);		 		matchTaskName.setValue(matchTask.getName()); 			} 			mss.setCompatibilityCheck(data.getStateClass());			mss.setEnabled(active);			calculateNums(commandRec);		}		else {			fireEmployee(matchTask);			matchTask = null;			deleteMenuItem(mss);		}		resetContainingMenuBar();	}	public void endJob(){		if (data!=null)			data.removeListener(this);		super.endJob();	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		if (this.data!=data && this.data!=null)			this.data.removeListener(this);		this.data = data;		data.addListener(this);		stateClass = data.getStateClass();		if (mss !=null && mss.getCompatibilityCheck() == null) { 			mss.setCompatibilityCheck(data.getStateClass()); 			resetContainingMenuBar(); 		}	}	/*.................................................................................................................*/	public void calculateNums(CommandRecord commandRec){ 		notCalculated = true;		if (!active)			return;//Debugg.println("calculateNums === matchTask " + matchTask + " this " + this + "  employer " + getEmployer());		   	 	if (data == null || matchTask == null)    	 		return;   	 	if (best == null || best.length!=data.getNumChars() || best[0].length != data.getNumTaxa()){   	 		best = new double[data.getNumChars()][data.getNumTaxa()];   	 	}		int targetTaxon = -1;		int targetStartChar = -1;		int targetEndChar = -1;		boolean found = false;		//find selected sequence, if only one		for (int it = 0; it< data.getNumTaxa(); it++){			for (int ic = 0; ic< data.getNumChars(); ic++) {				if (table.isCellSelectedAnyWay(ic, it)) {//selected cell found					if (found){  //second sequence of cells, can use only one sequence						//logln("Nothing selected based on current selection, because more than one discontiguous sections of sequences currently selected.  A contiguous sequence of states within a single taxon needs to be selected to define the search string.");						return;					}					targetTaxon = it;					targetStartChar = ic;					int ic2;					for (ic2 = ic+1; ic2< data.getNumChars() && !found; ic2++){ //go to end of first sequence of selected cells						if (!table.isCellSelectedAnyWay(ic2, it)) {							found= true;							targetEndChar = ic2-1;						}					}					if (!found)						targetEndChar = data.getNumChars()-1;					found = true;					ic = ic2;				}			}		}		if (targetTaxon <0){			return;		}   	 	   	 	//calculating best scores for each character 		for (int ic = 0; ic < data.getNumChars(); ic++) 			for (int it = 0; it < data.getNumTaxa(); it++) 				best[ic][it] = matchTask.sequenceMatch(data, table,  targetTaxon, targetStartChar, targetEndChar, it, ic, null, commandRec); 						notCalculated = false;   	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	if (matchTask ==null) 	 		return null;   	 	Snapshot temp = new Snapshot(); 	 	temp.addLine("setMatchTask ", matchTask);    	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {   	 	if (checker.compare(this.getClass(), "Sets the module that calculates matches of sequence", "[name of module]", commandName, "setMatchTask")) {    	 		DataMatcher temp =  (DataMatcher)replaceCompatibleEmployee(commandRec, DataMatcher.class, arguments, matchTask, stateClass); 			if (temp!=null) { 				matchTask = temp;		 		ntName = "#"+matchTask.getShortClassName();		 		matchTask.setHiringCommand(ntC);		 		matchTaskName.setValue(matchTask.getName());				calculateNums(commandRec);				table.repaintAll();	 			return matchTask;	 		}    	 	}      	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/   	 public void tableSelectionChanged() {			calculateNums(CommandRecord.getRecNSIfNull());			if (table !=null)				table.repaintAll();   	 }	/*.................................................................................................................*/   	public void viewChanged(){   	}	/*.................................................................................................................*/   	 public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {			calculateNums(commandRec);			if (table !=null)				table.repaintAll();   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Color All Matches to Selected";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Colors the cells of a character matrix according to whether they match the selected sequence.";   	 }	public Color getCellColor(int ic, int it){		if (ic<0 || it<0)			return null;		if (data == null || best == null)			return null;		else if (data.isInapplicable(ic, it)){			return ColorDistribution.straw;		}		else if (notCalculated)			return null;		else			return MesquiteColorTable.getRedScale(best[ic][it], 0, 1, false);	}	/** passes which object changed, along with optional code number (type of change) and integers (e.g. which character)*/	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		if (obj instanceof CharacterData){			//if (Notification.appearsCosmetic(notification))			//	return;			calculateNums(commandRec);			if (table!=null)				table.repaintAll();		}	}		/*.................................................................................................................*/    	 public boolean isPrerelease() {		return true;   	 }}