/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.QSourceQuality; import java.applet.*;import java.util.*;import java.awt.*;import java.text.Collator;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/*   to do:	- deal with Option cursor, Shift cursor	- pass taxaAreRows into this*//** ======================================================================== */public class QSourceQuality extends DataWindowAssistantI implements CellColorer {	TableTool sourceTool;	CharacterData data;	MesquiteTable table;		//####################	//to add new categories, leave the existing constants as they are, add new constants, then enter the constants and their menu equivalents in sequence in the int and String arrays	public static final int UNASSIGNED = 0;	public static final int ASSUMED = 1;	public static final int LITERATURE = 2;	public static final int OBSERVED = 3;	public static final int OBSPHOTO = 4;	public static int[] choices = new int[]{UNASSIGNED, ASSUMED, LITERATURE, OBSERVED, OBSPHOTO};	public static String[] menuItems = new String[]{"Unassigned (White)", "Assumed (Red)", "Literature (Orange)", "Observed (Yellow)","Obs./Photo (Green)"};	//####################	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		if (containerOfModule() instanceof MesquiteWindow) {			sourceTool = new TableTool(this, "matrixSource", getPath(), "source.gif", 1, 8, "Coding Source", "This tool controls assignment of Coding Source to cell of a character matrix.", MesquiteModule.makeCommand("source", this), null, null); 			((MesquiteWindow)containerOfModule()).addTool(sourceTool);		}		else return false;		return true;	}   	 public void setActiveColors(boolean active, CommandRecord commandRec){   	 }   	 public void viewChanged(CommandRecord commandRec){   	 }	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return true;   	 }   	 public boolean isPrerelease(){   	 	return true;   	 }	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		this.data = data;	}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}   	private int getSource(int ic, int it){   		if (data == null)   			return UNASSIGNED;   		if (ic<0 || it<0)   			return UNASSIGNED;   		Object obj = data.getCellObject(sourceNameRef, ic, it);   		if (obj instanceof MesquiteInteger)   			return ((MesquiteInteger)obj).getValue();   		return UNASSIGNED;   	}   	public String getCellString(int ic, int it){   		return "Coding Source: " + menuItems[getSource(ic, it)];   	}   	ColorRecord[] legend;   	public ColorRecord[] getLegendColors(CommandRecord commandRec){   		if (legend == null) {   			legend = new ColorRecord[5];   			legend[0] = new ColorRecord(Color.white, "Unassigned");   			legend[1] = new ColorRecord(Color.red, "Assumed");   			legend[2] = new ColorRecord(Color.orange, "Literature");   			legend[3] = new ColorRecord(Color.yellow, "Observed");   			legend[4] = new ColorRecord(ColorDistribution.lightGreen, "Observed, photo-documented");   		}   		return legend;   	}   	public String getColorsExplanation(CommandRecord commandRec){   		return null;   	}   	public Color getCellColor(int ic, int it){   		int source = getSource(ic, it);   		if (source == ASSUMED)   			return Color.red;   		else if (source == LITERATURE)   			return Color.orange;   		else if (source == OBSERVED)   			return Color.yellow;   		else if (source == OBSPHOTO)   			return ColorDistribution.lightGreen;   		return Color.white;   	}	/*.................................................................................................................*/	MesquiteInteger pos = new MesquiteInteger();	NameReference sourceNameRef = NameReference.getNameReference("datasource");	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(),  "Shows popup to choose Coding Source", "[column touched][row touched]", commandName, "source")) {	   	 		if (data == null)	   	 			return null;	   	 		MesquiteInteger io = new MesquiteInteger(0);	   			int column= MesquiteInteger.fromString(arguments, io);	   			int row= MesquiteInteger.fromString(arguments, io);				if (MesquiteInteger.isNonNegative(column)&& (MesquiteInteger.isNonNegative(row))) {						int source = getSource(column, row);			     			MesquitePopup popup = new MesquitePopup(table.getMatrixPanel());						for (int i=0; i<menuItems.length; i++)							popup.addItem(menuItems[i], this, MesquiteModule.makeCommand("setSource", this).setDefaultArguments(" " + column + " " + row + " " + choices[i]));						int x = table.getLeftOfColumn(column+1);						int y = table.getTopOfRow(row+1);						popup.showPopup(x,y);									   	 		return null;		   	 				   	 	}   	 	}    	 	else if (checker.compare(this.getClass(),  "Sets Coding Source", "[column touched][row touched][source value]", commandName, "setSource")) {	   	 		if (data == null)	   	 			return null;	   	 		MesquiteInteger io = new MesquiteInteger(0);	   			int column= MesquiteInteger.fromString(arguments, io);	   			int row= MesquiteInteger.fromString(arguments, io);	   			int source= MesquiteInteger.fromString(arguments, io);				if (MesquiteInteger.isCombinable(source) && MesquiteInteger.isNonNegative(column)&& (MesquiteInteger.isNonNegative(row))) {						MesquiteInteger ms = new MesquiteInteger(source);						if (table != null && table.isCellSelectedAnyWay(column, row)){							for (int ic = 0; ic< data.getNumChars(); ic++){								for (int it = 0; it< data.getNumTaxa(); it++)									if (table.isCellSelectedAnyWay(ic, it))										data.setCellObject(sourceNameRef, ic, it, ms);							}						}						else							data.setCellObject(sourceNameRef, column, row, ms);						if (table != null)							table.repaintAll();						if (!commandRec.scripting()){							MesquiteModule mb = findEmployerWithDuty(DataWindowMaker.class);							if (mb != null && mb instanceof DataWindowMaker)								((DataWindowMaker)mb).requestCellColorer(this,"Do you want the cells to be colored to show Coding Source?", commandRec);						}			   	 		return null;		   	 				   	 	}   	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Coding Source";   	 }    	 public String getNameForMenuItem() {		return "*Coding Source Quality";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Provides a tool with which to set the Coding Source for cells of a character matrix.";   	 }}