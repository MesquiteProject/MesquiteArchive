/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.MatrixCellHyperlink; import java.applet.*;import java.util.*;import java.awt.*;import java.text.Collator;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/*   to do:	- deal with Option cursor, Shift cursor	- pass taxaAreRows into this*//** ======================================================================== */public class MatrixCellHyperlink extends DataWindowAssistantI implements CellColorer {	TableTool hyperlinkTool;	CharacterData data;	MesquiteTable table;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		if (containerOfModule() instanceof MesquiteWindow) {			hyperlinkTool = new TableTool(this, "matrixHyperlink", getPath(), "link.gif", 4, 0, "Go to link", "This tool follows a hypertext link to a web page.  Hold down Control when using to enter a URL.", MesquiteModule.makeCommand("link", this), null, null); 			((MesquiteWindow)containerOfModule()).addTool(hyperlinkTool);		}		else return false;		return true;	}   	 public void setActiveColors(boolean active, CommandRecord commandRec){   	 }   	 public void viewChanged(CommandRecord commandRec){   	 }	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }//	public void setTableAndTaxa(MesquiteTable table, Taxa taxa, boolean taxaAreRows, CommandRecord commandRec){	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		this.data = data;		//this.taxaAreRows = taxaAreRows;	}	/*.................................................................................................................*  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	Snapshot temp = new Snapshot();			temp.addLine("toggleLT " + lessthan.toOffOnString());  	 	return temp;  	 }  	 */   	public boolean hasDisplayModifications(){   		if (data == null)   			return false;   		return (data.getWhichCellObjects(linkNameRef)!=null);   	}   	public String getDisplayModString(int ic, int it){   		if (data.getCellObject(linkNameRef, ic, it)!=null)   			return "@";   		return null;   	}	/*.................................................................................................................*/	MesquiteInteger pos = new MesquiteInteger();	NameReference linkNameRef = NameReference.getNameReference("hyperlink");	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(),  "Sets or goes to link", "[column touched][row touched]", commandName, "link")) {	   	 		if (data == null)	   	 			return null;	   	 		MesquiteInteger io = new MesquiteInteger(0);	   			int column= MesquiteInteger.fromString(arguments, io);	   			int row= MesquiteInteger.fromString(arguments, io);				if (MesquiteInteger.isNonNegative(column)&& (MesquiteInteger.isNonNegative(row))) {		  			if (arguments.indexOf("control")>=0) {  //url						Hyperlink hL = (Hyperlink)data.getCellObject(linkNameRef, column, row);						if (hL == null)							hL = new Hyperlink("");			   	 		String url = MesquiteString.queryShortString(containerOfModule(), "URL", "URL to which to link cell", hL.getURL());			   	 		if (StringUtil.blank(url))			   	 			return null;			   	 		hL.setURL(url);						data.setCellObject(linkNameRef, column, row, hL);						data.setCellObjectDisplay(column, row);						if (table != null)							table.repaintAll();			   	 		return null;					}						    	 		else {						Hyperlink hL = (Hyperlink)data.getCellObject(linkNameRef, column, row);						if (hL!=null) {							String link = hL.getURL();							if (link!=null){								if (link.startsWith("http:")) {									showWebPage(link, false);								}								else if (link.endsWith(".html") || link.endsWith(".htm")) {									showWebPage(MesquiteFile.composePath(getProject().getHomeDirectoryName(),  link), false);								}							}						}		 				else if (!commandRec.scripting()) {							alert("There is no link associated with that cell.  If you want to attach a link, hold down the control key while you touch the cell to enter a URL.");						}		   	 		}		   	 	}   	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	ColorRecord[] legend;   	public ColorRecord[] getLegendColors(CommandRecord commandRec){   		if (legend == null) {   			legend = new ColorRecord[2];   			legend[0] = new ColorRecord(Color.white, "No hyperlink");   			legend[1] = new ColorRecord(ColorDistribution.lightBlue, "With hyperlink");  		}   		return legend;   	}   	public String getColorsExplanation(CommandRecord commandRec){   		return null;   	}	public Color getCellColor(int ic, int it){		if (data == null || data.getCellObject(linkNameRef, ic, it) ==null)			return Color.white;		else {			return ColorDistribution.lightBlue;		}	}	/*.................................................................................................................*/    	 public String getNameForMenuItem() {		return "Hyperlink";   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Matrix Cell Hyperlink";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Provides a tool with which to set and use hyperlinks for cells of a character matrix.";   	 }}