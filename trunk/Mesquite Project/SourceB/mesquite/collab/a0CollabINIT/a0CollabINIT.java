/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.a0CollabINIT; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/* ======================================================================== */public class a0CollabINIT extends DataWindowAssistantI  {	public MesquiteMenuSpec collabMenu;	CharacterData data;	MesquiteTable table;	MesquiteBoolean warn = new MesquiteBoolean(true);	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		loadPreferences();		MesquiteModule dwm = findEmployerWithDuty(DataWindowMaker.class);		if (dwm != null)			collabMenu = dwm.addAuxiliaryMenu("Collaboration");		addCheckMenuItem(collabMenu, "Warn if No Unique IDs by Default", makeCommand("toggleWarn",  this), warn);		addMenuItem(collabMenu, "1. Link matrix", makeCommand("link",  this));		if (NexusBlock.numBackups < 4)			NexusBlock.numBackups = 4;		return true;	}	public void processPreferencesFromFile (String[] prefs) {		if (prefs!=null && prefs.length>0) {				warn.setValue( !"nowarn".equals(prefs[0]));		}	}	/*.................................................................................................................*/	public String[] preparePreferencesForFile () {		if (warn.getValue()){			return (new String[] {"warn"});		}		else {			return (new String[] {"nowarn"});		}	}  	 	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {   	 	if (checker.compare(MesquiteWindow.class, "Changes warning default", null, commandName, "toggleWarn")) {    	 		warn.toggleValue(parser.getFirstToken(arguments));     	 		storePreferences();  			return null;    	 	}   	 	else if (checker.compare(this.getClass(), "reminds to link", null, commandName, "link")) {    	 		alert("To link the contributor's matrix, use the Link File item under Edit.  Indicate you want to delete the duplicate block.");    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	boolean warnedSet = false;	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.data = data;		this.table = table;		if (data != null && !warnedSet){			if (!checkIDs(data, commandRec)){				warnedSet = true;			}		}		/*		if (table != null && icPanel == null){			Panel p = table.getColumnNamesPanel();			icPanel = new ICPanel(table);			p.add(icPanel);			icPanel.setLocation(0,0);			icPanel.setSize(20,20);			icPanel.setVisible(true);		}		*/	}	int icLast = -1;	int pixelWidthLast = -1;	int pixelStartLast = -1;	int timesThisOne = 0;	/*.................................................................................................................*/   	public void focusInCell(int ic, int it){   		if (data == null || table == null || ic == icLast)   			return;   		if (true)   			return;		EditorPanel p = table.getColumnNamesPanel();				if (icLast>=0){			int i = icLast -1;						while (p.startOfColumn(i)<= pixelStartLast+pixelWidthLast)				p.redrawCell(i++, -1);			if (i<= data.getNumChars())				p.redrawCell(i++, -1);			if (i<= data.getNumChars())				p.redrawCell(i, -1);		}		if (ic<0)			return;		Graphics g = p.getGraphics();		if (g != null){			Color c = g.getColor();			g.setColor(ColorDistribution.lightGreen);			String iS = Integer.toString(ic+1);			FontMetrics fm=g.getFontMetrics(g.getFont());			int thisWidth =fm.stringWidth(iS);			int height = (fm.getMaxAscent() + fm.getMaxDescent() + 6);			pixelStartLast = p.startOfColumn(ic);			g.fillRect(pixelStartLast, 0, thisWidth+6, height);			g.setColor(Color.black);			g.drawString(iS, pixelStartLast+3, height -fm.getMaxDescent() - 3);			g.drawRect(pixelStartLast, 0, thisWidth+6, height);			g.setColor(c);			g.dispose();			icLast = ic;			pixelWidthLast = thisWidth;		}		else icLast = -1;   	}		/*.................................................................................................................*/	 boolean checkIDs(CharacterData data, CommandRecord commandRec){			int error = allIDd(data);			if (error <0){				if (warn.getValue()){					if (!AlertDialog.query(containerOfModule(), "Unique IDs", "WARNING: some taxa lack unique IDs.  This may cause serious problems with collaborative features. (" + error + ").  Unique IDs can be assigned in the List of Taxa window by showing the Unique IDs column and selecting from the column's drop down menu, but this should be done by the Data Administrator.", "OK", "Turn off Warning")){					warn.setValue(false);						storePreferences();					}				}				return false;			}			if (error > 0){				if (warn.getValue()){					if (!AlertDialog.query(containerOfModule(), "Unique IDs", "WARNING: some characters lack unique IDs.    This may cause serious problems with collaborative features. (" + error + ").  Unique IDs can be assigned in the List of Characters window by showing the Unique IDs column and selecting from the column's drop down menu, but this should be done by the Data Administrator.", "OK", "Turn off Warning")){						warn.setValue(false);						storePreferences();					}				}				return false;			}			return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {		if (data != null){			if (!checkIDs(data, CommandRecord.nonscriptingRecord)){			}		}  	 	return null;  	 }  		int allIDd(CharacterData data){			for (int it=0; it<data.getNumTaxa(); it++){				if (StringUtil.blank(data.getTaxa().getUniqueID(it)))					return -it-1;				for (int ic = 0; ic< data.getNumChars(); ic++) {					if (StringUtil.blank(data.getUniqueID(ic)))						return ic+1;				}			}			return 0;	}	/*.................................................................................................................*/    	 public String getName() {		return "Collaboration INIT";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Provides utilities for collab package.";   	 }   	 	}