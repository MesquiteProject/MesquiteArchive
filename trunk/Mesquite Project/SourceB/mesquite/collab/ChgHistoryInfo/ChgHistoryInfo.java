/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.ChgHistoryInfo; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/** ======================================================================== */public class ChgHistoryInfo extends DataWindowAssistantI {	CharacterData data;	MesquiteTable matrixTable;	DWPanel panel;	DWTable table;	MesquiteBoolean showPanel;	NameReference historyNameRef = NameReference.getNameReference("ChangeHistory");	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		showPanel = new MesquiteBoolean(false);		addCheckMenuItem(null, "Show History Panel", makeCommand("togglePanel", this), showPanel);		return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	temp.addLine("togglePanel " + showPanel.toOffOnString());  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether or not the history panel is shown", "[on = shown; off]", commandName, "togglePanel")) {    	 		showPanel.toggleValue(parser.getFirstToken(arguments));			setPanel();    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/	public void panelGoAway(){		showPanel.setValue(false);		setPanel();	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }   	 public void viewChanged(CommandRecord commandRec){   	 }   	 	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.matrixTable = table;		this.data = data;				setPanel();	}	void setPanel(){		Frame f = containerOfModule();		if (f instanceof TableWindow){			if (showPanel.getValue()){				if (panel == null)					panel = new DWPanel(this);				((TableWindow)f).addSidePanel(panel, DWPanel.width);				table = panel.getTable();			}			else {				if (panel != null)					((TableWindow)f).removeSidePanel(panel);			}		}			}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	/*.................................................................................................................*/   	public void focusInCell(int ic, int it){   		if (data == null || table == null)   			return;   		   		ChangeHistory cH = (ChangeHistory)data.getCellObject(historyNameRef, ic, it);   		table.erase();   		panel.setCell(ic, it, data.getTaxa().getTaxonName(it));   		if (cH != null)	   		for (int i = 0; i<cH.getNumEvents(); i++){	   			ChangeEvent e = cH.getEvent(i);				table.setRowName("to " + e.getChange(), i);  //what changed to				int column = 0;		   		//by whom		   		Author a = e.getAuthor();				if (a != null)					table.setCell(a.getName(),  column++, i);		   		//when				table.setCell("" + new Date(e.getTime()),  column++, i);	   		}		table.repaintAll();		panel.repaint();   	}	/*.................................................................................................................*/    	 public String getName() {		return "Data History Info";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Installs a panel with information about history of changes of a character matrix.";   	 }}class DWPanel extends MousePanel{	static final int width = 300;	static final int height = 36;	int ic;	int it;	DWTable table;	Image goaway;	String taxonName = null;	ChgHistoryInfo pw;	public DWPanel (ChgHistoryInfo pw){		super();		this.pw = pw;		table = new DWTable();		goaway = MesquiteImage.getImage(MesquiteModule.getRootImageDirectoryPath() + "goaway.gif");		setLayout(null);		table.setVisible(true);		add(table);		setBackground(ColorDistribution.paleGoldenRod);		setSize(width, 500);	}	DWTable getTable(){		return table;	}	public void setSize(int w, int h){		table.setSize(w, h-height);		super.setSize(w, h);	}	public void setBounds(int x, int y, int w, int h){		table.setBounds(0, height, w, h-height);		super.setBounds(x, y, w, h);	}	void setCell(int ic, int it, String name){		this.ic = ic;		this.it = it;		taxonName = name;	}	public void paint(Graphics g){		g.drawString("History of changes", 20, height - 22);   		String s = "Character " + (ic+1) + " in taxon " + taxonName;		if (taxonName != null)			g.drawString(s,20, height - 6);	   	g.drawImage(goaway, 2, 2, this);		g.fillRect(0, height-2, getBounds().width, 2);	}	/* to be used by subclasses to tell that panel touched */   	public void mouseUp(int modifiers, int x, int y, MesquiteTool tool) {		if (y> 2 && y< 2 + 16 && x >= 2 && x <= 2 + 16) 			pw.panelGoAway();			}	}class DWTable extends MesquiteTable{	boolean ready = false;	String[][] cells = new String[9][101];	String[] rowNames = new String[101];		String blank = "";	public DWTable (){		super(100, 2, 500, 1000, 20, 0, false, false);		autosizeColumns = true;		erase();	}	public void erase(){		for (int ic = 0; ic<cells.length; ic++)			for (int it=0; it<cells[0].length; it++)				cells[ic][it] = "";		for (int it=0; it<rowNames.length; it++)			rowNames[it] = "";	}	public void setCell(String t, int ic, int it){		//box.setString(t);		cells[ic][it] =t;	}	public void setRowName(String t, int it){		//box.setString(t);		rowNames[it] =t;	}		public String getCornerText(){		return "Changed";	}	public String getMatrixText(int column, int row){		if (column < 0 || column>=cells.length || row < 0 || row >= cells[0].length)			return "";		return cells[column][row];	}	public String getColumnNameText(int column){		if (column == 0)			return "Changed by";		else if (column == 1)			return "when";		return "";	}	public String getRowNameText(int row){		return rowNames[row];	}	/*	public void paint(Graphics g){		if (ready)			box.draw( g, 5, 20);	}	*/	}