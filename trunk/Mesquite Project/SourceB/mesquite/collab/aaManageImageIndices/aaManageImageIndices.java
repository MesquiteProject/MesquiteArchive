/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.aaManageImageIndices; import java.util.*;import java.awt.*;import java.io.*;import java.awt.event.*;import mesquite.lib.*;import mesquite.lib.table.*;import mesquite.lib.characters.*;import mesquite.collab.lib.*;/** ======================================================================== */public class aaManageImageIndices extends ImageIndexManager implements ActionListener {	boolean remote = false;	Vector listeners = new Vector();	String indexDirectory = null;	String relativeDirectory = "";	String previousDirectory; 	String previousRemoteIndex = "";	//String previousRemoteIndex = "http://salticus.zoology.ubc.ca/ATOLSpiders/ATOLImages";		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		loadPreferences();		addMenuItem("-", null);		addMenuItem( "Indexed Image Location...", makeCommand("askDirectories",  this));		return true;  	 }  	 public void requestLoadIndices(IndexListener listener){  	 	IndexThread thread = new IndexThread(listener);  	 	thread.start();  	 }  	 public void addListener(IndexListener listener){  	 	if (listeners.indexOf(listener)<0)  	 		listeners.addElement(listener);  	 }  	 public void removeListener(IndexListener listener){  	 		listeners.removeElement(listener);  	 }  	 public void notifyListeners(CommandRecord commandRec){   	 	for (int i =0; i < listeners.size(); i++) {  	 		((IndexListener)listeners.elementAt(i)).indexChanged(commandRec);  	 	}  	 }  	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){  	 }  	   	public String getImageRootPath(CommandRecord commandRec){  		if (indexDirectory == null)  			askDirectories(commandRec);		return indexDirectory;  	}  	public String getIndexDirectory(CommandRecord commandRec){  		if (indexDirectory == null)  			askDirectories(commandRec);		return indexDirectory;  	}	public boolean useLocalImages(){		return !remote;	}		TextArea directoryLabel;	boolean localChosen = true;	Label locTitle = null;	/*.................................................................................................................*/	 public  void actionPerformed(ActionEvent e) {	 		if (e.getActionCommand() == "chooseIndexDirectory") {				String id = MesquiteFile.chooseDirectory("Directory of image index files", previousDirectory);				if (StringUtil.blank(id))					return;				localChosen = true;				indexDirectory = id;				relativeDirectory = MesquiteFile.decomposePath(getProject().getHomeFile().getDirectoryName(), indexDirectory);				locTitle.setText("Using Local Directory: ");				if (directoryLabel != null)					directoryLabel.setText(indexDirectory);			}	 		else if (e.getActionCommand() == "chooseServer") {				String id = MesquiteString.queryString(containerOfModule(), "Image Server", "URL of image index files", previousRemoteIndex);				if (StringUtil.blank(id))					return;				localChosen = false;				indexDirectory = id;				relativeDirectory = id;				locTitle.setText("Using Remote Server: ");				previousRemoteIndex = id;				if (directoryLabel != null)					directoryLabel.setText(indexDirectory);			}	 }	/*.................................................................................................................*/   	 void askDirectories(CommandRecord commandRec){   	 	if (commandRec.scripting())   	 		return;		MesquiteInteger buttonPressed = new MesquiteInteger(1);				ExtensibleDialog dlog = new ExtensibleDialog(containerOfModule(), "Location of Images and Indices",  buttonPressed);		dlog.addLargeOrSmallTextLabel("Indicate the location at which images and indices are stored..");		Button indexDirButton = dlog.addButton("Use Local Directory...");//,ind);		indexDirButton.addActionListener(this);		indexDirButton.setActionCommand("chooseIndexDirectory");		Button indexServerButton = dlog.addButton("Use Remote Server...");//,ind);		indexServerButton.addActionListener(this);		indexServerButton.setActionCommand("chooseServer");		//dlog.suppressNewPanel();		String s = "";		for (int i = 0; i<10; i++)			s += "888888888";		 String title = "Using Local directory: ";		if (remote) {			title = "Using Remote Server: ";			localChosen = false;		}		else			localChosen = true;		locTitle = dlog.addBoldLabel(title);		directoryLabel = dlog.addLargeTextLabel(s);		String base = previousRemoteIndex;		if (base == null)			base = "";		directoryLabel.setText( indexDirectory);		boolean oldRemote = remote;		String oldID = indexDirectory;		String oldRD = relativeDirectory;		dlog.completeAndShowDialog(true);		String localDir = directoryLabel.getText();		directoryLabel = null;		boolean ok = (dlog.query()==0);				if (!ok)			return;				if (localChosen) {  //local			indexDirectory = localDir;			relativeDirectory = MesquiteFile.decomposePath(getProject().getHomeFile().getDirectoryName(), indexDirectory);			remote = false;		}		else { //remote			indexDirectory = localDir;			relativeDirectory = indexDirectory;			previousRemoteIndex = indexDirectory;			remote = true;		}		if (StringUtil.blank(indexDirectory))			return;		logln("Images index directory set to " + indexDirectory);		if (!remote){			File d = new File(indexDirectory);			previousDirectory = d.getParent();		}				if ( remote != oldRemote || !(oldID != null && oldID.equals(indexDirectory)) || !(oldRD != null && oldRD.equalsIgnoreCase(relativeDirectory))) {			logln("Notifying of change of image index location");			notifyListeners(commandRec);		}		storePreferences(); 	 }	/*.................................................................................................................*/ 	 boolean setIndexDirectory(CommandRecord commandRec, String path){		if (path == null) {			return false;		}		else {			relativeDirectory = path;			if (path.indexOf("://")<0) {				indexDirectory =  MesquiteFile.composePath(getProject().getHomeFile().getDirectoryName(), path);				remote = false;;			}			else {				indexDirectory = path;				previousRemoteIndex = path;				remote = true;			}		}		logln("Images index directory set to " + indexDirectory);		if (StringUtil.blank(indexDirectory))			return false;		if (!remote){			File d = new File(indexDirectory);			previousDirectory = d.getParent();		}		storePreferences();		return true;  	 }	/*.................................................................................................................*/	public void processPreferencesFromFile (String[] prefs) {		if (prefs!=null && prefs.length>0) {			previousDirectory = prefs[0];			if (prefs.length>1)				previousRemoteIndex = prefs[1];		}	}	/*.................................................................................................................*/	public String[] preparePreferencesForFile () {		String pD = previousDirectory;		String pRI = previousRemoteIndex;		if (pD == null)			pD = "";		if (pRI == null)			pRI = "";		return (new String[] {pD, pRI});	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();    	 /*    	 	if (pathIsURLIndices)  	 		temp.addLine("setRemoteIndices");  	 	else  	 		temp.addLine("setLocalIndices");  	 */	 	if (!StringUtil.blank(indexDirectory) )  	 		temp.addLine("setIndexDirectory " + ParseUtil.tokenize(relativeDirectory));    	 	if (remote)   	 		temp.addLine("setRemote");	 	else  	 		temp.addLine("setLocal");  	 	if (!StringUtil.blank(previousRemoteIndex))  	 		temp.addLine("setPrevIndexBase " + ParseUtil.tokenize(previousRemoteIndex));  	 	temp.addLine("reset");  	 	  	 	return temp;  	 }  		/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets the directory to the path of the indices", "[path]", commandName, "setIndexDirectory")) {    	 		if (setIndexDirectory(commandRec, parser.getFirstToken(arguments)))    	 		 if (!commandRec.scripting())    	 			notifyListeners(commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Asks the user for the directories to the index and images", null, commandName, "askDirectories")) {    	 		askDirectories(commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "", "[path]", commandName, "setPrevIndexBase")) {    	 		previousRemoteIndex =  parser.getFirstToken(arguments);    	 	}    	 	else if (checker.compare(this.getClass(), "Images are remote", null, commandName, "setRemote")) {    	 		remote = true;    	 	}    	 	else if (checker.compare(this.getClass(), "Images are local", null, commandName, "setLocal")) {    	 		remote = false;    	 	}    	 	else if (checker.compare(this.getClass(), "Requests reset", null, commandName, "reset")) {    	 		notifyListeners(commandRec);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);	return null;   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Manage Image Indices";   	 }   	 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Manages choice of image indices." ;   	 }}class IndexThread extends Thread {	IndexListener listener;	public IndexThread (IndexListener listener) {		this.listener = listener;	}	/** DOCUMENT */	public void run() {		listener.loadIndices();	}}