/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.BasicTaxaWindowMaker;/*~~  */import java.util.*;import java.awt.*;import java.awt.print.*;import java.awt.event.*;import mesquite.lib.*;import mesquite.lib.duties.*;import java.awt.datatransfer.*;/** Makes and manages a Taxa Window for taxa editing and visualization */public class BasicTaxaWindowMaker extends TaxaWindowMaker implements CommandableOwner, TaxaDisplayActive {	public DrawTaxaCoordinator taxaDrawCoordTask;//	public TaxaSource taxaSourceTask;	public Vector contextListeners;	Taxa taxa;	static boolean warnUnsaved;	BasicTaxaWindow basicTaxaWindow;//	MesquiteString taxaSourceName;//	MesquiteCommand tsC;	static {		warnUnsaved = true;	}		/*...................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		loadPreferences();		makeMenu("Taxa");/*		taxaSourceTask= (TaxaSource)hireCompatibleEmployee(commandRec, TaxaSource.class, condition, "Source of taxa (Taxa window)");		if (taxaSourceTask == null)			return sorry(commandRec, getName() + " couldn't start because no source of taxa was obtained.");		taxaSourceName = new MesquiteString(taxaSourceTask.getName());		tsC = makeCommand("setTaxaSource",  this);		taxaSourceTask.setHiringCommand(tsC);		defineMenus(false);*/				contextListeners = new Vector();		//setAutoSaveMacros(true);		return true;  	 }  	 /*--------------------------------------*/  	 public boolean isPrerelease(){  	 	return true;  	 }  	 //  	 public String getExpectedPath(){//		return getPath() + "recent";//  	 }  	 /*--------------------------------------*/  	 /*Menus defined in this method are visible to Mesquite's automatic documentation system  <b>(overrides method of MesquiteModule)</b>*	public void defineMenus(boolean accumulating){		if (accumulating || numModulesAvailable(TaxaSource.class)>1) {			MesquiteSubmenuSpec mss = addSubmenu(null, "Taxa Source", tsC);			if (!accumulating){				mss.setSelected(taxaSourceName);				mss.setList(TaxaSource.class);				if (taxa !=null)					mss.setCompatibilityCheck(taxa);			}		}	}  	 /*--------------------------------------*/  	public  Commandable[] getCommandablesForAccumulation(){  	 	Commandable[] cs = new Commandable[1];  	 	cs[0]= new BasicTaxaWindow();  	 	return cs;  	 }	public void processPreferencesFromFile (String[] prefs) {		if (prefs!=null && prefs.length>0) {				if (prefs[0].equals("warned")) {						warnUnsaved = false;			}		}	}  	 public void employeeQuit(MesquiteModule m){  	 	if (basicTaxaWindow!=null)  	 		basicTaxaWindow.contentsChanged();  	 }	/*.................................................................................................................*/	public String[] preparePreferencesForFile () {		if (!warnUnsaved)			return (new String[] {"warned"});		else			return (new String[] {"notwarned"});	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {  	 	if (basicTaxaWindow==null)  	 		return null;   	 	Snapshot temp = new Snapshot();  	 	Snapshot fromWindow = basicTaxaWindow.getSnapshot(file);  	 	//   	 	temp.addLine("setTaxaSource " , taxaSourceTask);  	 	temp.addLine("setAssignedID " + getPermanentIDString());  //for taxa context		temp.addLine("getTaxaWindow");		temp.addLine("tell It");		temp.incorporate(fromWindow, true);		for (int i = 0; i<getNumberOfEmployees(); i++) {			Object e=getEmployeeVector().elementAt(i);			if (e instanceof TaxaDisplayAssistantD || e instanceof TaxaDisplayAssistantA) {				temp.addLine("\tnewAssistant " , ((MesquiteModule)e));			}		}		for (int i = 0; i<getNumberOfEmployees(); i++) {			Object e=getEmployeeVector().elementAt(i);			if (e instanceof TaxaWindowAssistantC || e instanceof TaxaWindowAssistantN) {				temp.addLine("\tnewWindowAssistant " , ((MesquiteModule)e));			}		}		temp.addLine("endTell");    	 	temp.addLine("showWindow");  	 		 	return temp;  	 }	/*.................................................................................................................*/	/** Query module as to whether conditions are such that it will have to quit soon -- e.g. if its taxa block has been doomed.  The taxa window, data window, 	etc. override this to return true if their object is doomed. This is useful in case MesquiteListener disposing method is not called for an employer before one of its	employees discovers that it needs to quit.  If the employer is going to quit anyway,there is no use to use auto rehire for the quit employee.*/	public boolean quittingConditions(){		return (taxa.isDoomed());	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Returns the block of taxa associated with this taxa window", null, commandName, "getTaxa")) {    	 		return taxa;    	 	}    	 	else if (checker.compare(this.getClass(), "Displays the taxa window", null, commandName, "show")) {    	 		displayTaxaWindow();    	 	}  	 	else if (checker.compare(this.getClass(), "Constructs a taxa window referring to a block of taxa, or returns the existing window if this module has already made one.", "[number of block of taxa, 0 based]", commandName, "makeTaxaWindow")) {    	 		if (basicTaxaWindow != null)    	 			return basicTaxaWindow;    	 		String tRef = parser.getFirstToken(arguments);   	 		int setNumber = MesquiteInteger.fromString(tRef);   	 		Taxa taxa = null;   	 		if (!MesquiteInteger.isCombinable(setNumber)) {   	 			taxa = getProject().getTaxa(tRef);    	 		}   	 		else   	 			taxa = getProject().getTaxa(checker.getFile(), setNumber);   	 		if (taxa !=null) {				makeTaxaWindow(taxa, commandRec);    	 			return basicTaxaWindow;    	 		}    	 	}    	 	else if (checker.compare(this.getClass(), "Returns the taxa draw coordinating module", null, commandName, "getTaxaDrawCoordinator")) {    	 		return taxaDrawCoordTask;    	 	}    	 	else if (checker.compare(this.getClass(), "Returns the taxa window", null, commandName, "getTaxaWindow")) {    	 		return basicTaxaWindow;    	 	}    	 	else if (checker.compare(this.getClass(), "Hires a taxa display assistant module", "[name of assistant module]", commandName, "newAssistant")) {    	 		return basicTaxaWindow.doCommand(commandName, arguments, commandRec, checker);    	 	}    	 	else if (checker.compare(this.getClass(), "Hires a taxa window assistant module", "[name of assistant module]", commandName, "newWindowAssistant")) {    	 		return basicTaxaWindow.doCommand(commandName, arguments, commandRec, checker);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/ 	public void employeeOutputInvalid(MesquiteModule employee, MesquiteModule source, CommandRecord commandRec) {		if (basicTaxaWindow==null)			return;		basicTaxaWindow.contentsChanged();		basicTaxaWindow.taxaDisplay.pleaseUpdate(false, commandRec);	}	/*.................................................................................................................*/ 	public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {		if (basicTaxaWindow==null)			return;		if (employee instanceof DrawTaxaCoordinator && taxaDrawCoordTask!=null){ 			Dimension d = taxaDrawCoordTask.getPreferredSize();			if (d == null && basicTaxaWindow.oldPreferred == null)				return;			if ((d == null && basicTaxaWindow.oldPreferred !=null)|| (basicTaxaWindow.oldPreferred == null && d != null) || (d.width != basicTaxaWindow.oldPreferred.width && d.height != basicTaxaWindow.oldPreferred.height)) {				if (basicTaxaWindow.useSuggestedSize.getValue()){					basicTaxaWindow.setSuggestedSize(false, true, commandRec);					basicTaxaWindow.taxaDisplay.pleaseUpdate(true, commandRec);				}			}						}		else if (employee instanceof TaxaSource) {			if (Notification.getCode(notification) != MesquiteListener.SELECTION_CHANGED){//				basicTaxaWindow.resetForTaxaSource(false, false, commandRec);				basicTaxaWindow.contentsChanged();			}		} 		else  {			if (basicTaxaWindow.taxaDisplay!=null) {				basicTaxaWindow.contentsChanged();				TaxaDisplayExtra[] ee = basicTaxaWindow.taxaDisplay.getMyExtras(employee);				if (ee != null)					for (int i=0; i<ee.length; i++)						ee[i].setTaxa(basicTaxaWindow.taxaDisplay.getTaxa(), commandRec); //done to force recalculations				basicTaxaWindow.taxaDisplay.pleaseUpdate(false, commandRec);			} 		}	}	/*.................................................................................................................*/  	public TaxaDisplay getTaxaDisplay(){  		return basicTaxaWindow.taxaDisplay;  	}	/*.................................................................................................................*/  	public DrawTaxaCoordinator hireTaxaDrawCoordTask(CommandRecord commandRec) {		taxaDrawCoordTask= (DrawTaxaCoordinator)hireEmployee(commandRec, DrawTaxaCoordinator.class, null);		if (taxaDrawCoordTask== null) {			sorry(commandRec, getName() + " couldn't start because no taxa draw coordinating module was obtained.");			return null;		}		taxaDrawCoordTask.setToLastEmployee(true);		hireAllEmployees(commandRec, TaxaDisplayAssistantI.class);		hireAllEmployees(commandRec, TaxaDisplayAssistantDI.class);		return taxaDrawCoordTask;  	}	/*.................................................................................................................*/  	 public void makeTaxaWindow(Taxa taxa, CommandRecord commandRec){		incrementMenuResetSuppression();  	 	this.taxa = taxa;// Debugg.println("1"); 		BasicTaxaWindow btw = new BasicTaxaWindow( this, taxa, commandRec);// Debugg.println("2, btw: " + btw); 		if (btw==null || !btw.getProperlyFormed()) {			decrementMenuResetSuppression();			if (btw!=null)				btw.dispose();			return; 		}		setModuleWindow(btw);//*DRM 		taxaSourceTask.setPreferredTaxa(taxa); 		basicTaxaWindow = (BasicTaxaWindow) getModuleWindow();		Enumeration e = getEmployeeVector().elements();		while (e.hasMoreElements()) {			Object obj = e.nextElement();			if (obj instanceof TaxaDisplayAssistantI || obj instanceof TaxaDisplayAssistantDI) {				TaxaDisplayAssistant tca = (TaxaDisplayAssistant)obj;	 			basicTaxaWindow.addAssistant(tca, commandRec);	 		}		}		btw.sizeDisplay();		addMenuItem(MesquiteTrunk.analysisMenu, "-", null);		MesquiteCommand mC = makeCommand("newWindowAssistant",  (Commandable)basicTaxaWindow);		MesquiteSubmenuSpec mms = addSubmenu(MesquiteTrunk.analysisMenu, "New Chart for Taxa", mC); //getEmployer().		mms.setZone(0);		mms.setList(TaxaWindowAssistantC.class);		addModuleMenuItems( MesquiteTrunk.analysisMenu, makeCommand("newAssistant",  (Commandable)basicTaxaWindow), TaxaDisplayAssistantA.class);		addMenuItem(MesquiteTrunk.analysisMenu, "-", null);		 		 		if (!commandRec.scripting()) { 			displayTaxaWindow(); 		}		decrementMenuResetSuppression();  	 }  	void displayTaxaWindow(){		if (getModuleWindow() == null)			return; 		getModuleWindow().setVisible(true); 		basicTaxaWindow.showTaxa(); 		getModuleWindow().toFront();  	}	/*.................................................................................................................*/ 	public void windowGoAway(MesquiteWindow whichWindow) {		iQuit();	}	public void endJob(){		taxaDrawCoordTask=null;//		taxaSourceTask=null;		basicTaxaWindow = null;		super.endJob();	}	/*.................................................................................................................*/    	 public String getName() {		return "Taxa Window";   	 }   	 	/*.................................................................................................................*/   	  	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Makes a basic taxa window, which contains tool palette.  Hires assistants for the taxa window." ;   	 }	/*.................................................................................................................*/ 	public String getParameters() {		String s = "";		; 		if (getModuleWindow()!=null){ 			if (((BasicTaxaWindow)getModuleWindow()).getTaxa()!=null) 				s+= "Taxa: " + ((BasicTaxaWindow)getModuleWindow()).getTaxa().getName(); 		} 		return s ;   	 }	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return true;   	 }	/*.................................................................................................................*/   	 public boolean mouseDownInTaxaDisplay(int modifiers, int x, int y, TaxaDisplay taxaDisplay, Graphics g) {		if (x>2000000 || y> 2000000)			return true; //here because of bug in Mac OS X 10.0.4   		return basicTaxaWindow.ScanTouch(g, x, y, modifiers);   	 }	/*.................................................................................................................*/   	 public boolean mouseUpInTaxaDisplay(int modifiers, int x, int y, TaxaDisplay taxaDisplay, Graphics g) {		if (x>2000000 || y> 2000000)			return true; //here because of bug in Mac OS X 10.0.4		basicTaxaWindow.ScanDrop( g, x, y, modifiers);		return true;   	 }   	 	/*.................................................................................................................*/   	 public boolean mouseMoveInTaxaDisplay(int modifiers, int x, int y, TaxaDisplay taxaDisplay, Graphics g) {		if (x>2000000 || y> 2000000)			return true; //here because of bug in Mac OS X 10.0.4   			basicTaxaWindow.ScanFlash(g, x, y, modifiers);		//basicTaxaWindow.setExplanation(basicTaxaWindow.baseExplanation, false);   		 return true;   	 }	/*.................................................................................................................*/   	 public boolean mouseDragInTaxaDisplay(int modifiers, int x, int y, TaxaDisplay taxaDisplay, Graphics g) {		if (x>2000000 || y> 2000000)			return true; //here because of bug in Mac OS X 10.0.4	   	basicTaxaWindow.ScanDrag(g, x, y, modifiers);   		 return true;   	 }	/*.................................................................................................................*/	/**Returns command to hire employee if clonable*/	public String getClonableEmployeeCommand(MesquiteModule employee){		if (employee!=null && employee.getEmployer()==this) {			if (employee.getHiredAs()==TaxaWindowAssistant.class)				return ("newWindowAssistant " + StringUtil.tokenize(employee.getName()) + ";");//quote			if (employee.getHiredAs()==TaxaDisplayAssistant.class)				return ("newAssistant " + StringUtil.tokenize(employee.getName()) + ";");//quote		}		return null;	}	/*.................................................................................................................*  	 public CompatibilityTest getCompatibilityTest() {  	 	return new BTWCompatibilityTest();  	 }	/*.................................................................................................................*/}/*class BTWCompatibilityTest extends CompatibilityTest{	//should find out if available matrices of chosen sort	public  boolean isCompatible(Object obj, MesquiteProject project, EmployerEmployee prospectiveEmployer){		return true;	}}/* ======================================================================== */class BasicTaxaWindow extends MesquiteWindow implements Fittable, MesquiteListener, AdjustmentListener {	TaxaDisplay taxaDisplay;	boolean properlyFormed = false;	Taxa taxa;	DrawTaxaCoordinator taxaDrawCoordTask;	boolean taxaEdited=false;	TaxaScrollPane taxaPane;	Adjustable hAdjust, vAdjust;//	TaxaSource taxaSourceTask;	boolean warningGivenForTaxaSource = false;	static final int scrollWidth = 16;	static final int initalWindowHeight = 400;	static final int initalWindowWidth = 520;	static final int baseMessageWidth = 256;	int messageWidth = 256;	int totalTaxaFieldWidth = 800;	int totalTaxaFieldHeight  = 800;	MessagePanel messagePanel;	boolean canUndo = true;	TaxaTool currentTaxaTool;	MesquiteBoolean sizeToFit;	MesquiteBoolean useSuggestedSize;	MesquiteBoolean floatLegends;	BasicTaxaWindowMaker windowModule;	int highlightedTaxa=-1;	int xFrom, yFrom, xTo, yTo;	boolean usingDefaultBush = false;	MesquiteMenuItemSpec sizeItem;	static int numWindows=0;	private int windowNum=0;	int initPosX = 0;	int initPosY = 0;//	long treeVersion = 0;	MesquiteString baseExplanation;	boolean baseExplanationUsed=false;//	boolean treeAnnotationShown = false;	MesquiteMenuItemSpec floatLegendsItem;	int oldH = 0;	int oldV = 0;	boolean showTaxaListOnSave = false;  //have preference for this?	Dimension oldPreferred = null;		/*When lockStoredTrees is true (MacClade mode), editing a stored tree causes the tree to be treated as unsaved, and for the new tree to be saved, Store Tree or Replace Stored Tree must	be called.  When false, editing a stored tree changes the original in storage.*/ 	//boolean lockStoredTrees = false;		//LockPanel lockPanel;		public BasicTaxaWindow(){	}	public BasicTaxaWindow ( BasicTaxaWindowMaker ownerModule,  Taxa taxa, CommandRecord commandRec){		super(ownerModule, true); //INFOBAR      		setWindowSize(initalWindowWidth,initalWindowHeight);		ownerModule.setModuleWindow(this);		baseExplanation = new MesquiteString("");		numWindows++;		windowNum=numWindows;		windowModule = ownerModule;		this.taxa=taxa;		TaxaTool tool1 = new TaxaTool(this, "arrow", MesquiteModule.getRootImageDirectoryPath(), "arrow.gif", 4,2,"Arrow Tool", "This is the standard arrow tool.");		tool1.setTouchedCommand(MesquiteModule.makeCommand("touchTaxa",  this)); 		currentTaxaTool = tool1;		addTool(tool1);  	 	setCurrentTool(currentTaxaTool);    	 	currentTaxaTool.setInUse(true);    	 	currentTaxaTool.setIsArrowTool(true);		taxaDrawCoordTask= windowModule.hireTaxaDrawCoordTask(commandRec);		if (taxaDrawCoordTask==null)			return;				this.ownerModule = ownerModule;//		this.taxaSourceTask=tsT;		useSuggestedSize = new MesquiteBoolean(false);		sizeToFit = new MesquiteBoolean(true);		floatLegends = new MesquiteBoolean(true);		if (taxa!=null) {			taxa.addListener(this);		}		taxaDisplay =taxaDrawCoordTask.createOneTaxaDisplay(taxa, this, commandRec);				taxaDisplay.setLocation(0, 0);				ownerModule.addModuleMenuItems(null, ownerModule.makeCommand("newWindowAssistant", this), TaxaWindowAssistantN.class);		ownerModule.addModuleMenuItems(null, ownerModule.makeCommand("newAssistant",  this), TaxaDisplayAssistantD.class);				//		ownerModule.addMenuItem( "-", null);		MesquiteSubmenuSpec mBringToFrontAsst = ownerModule.addSubmenu(null, "Bring To Front");		mBringToFrontAsst.setList(taxaDisplay.getExtras());		mBringToFrontAsst.setListableFilter(TaxaDisplayDrawnExtra.class);		mBringToFrontAsst.setCommand(ownerModule.makeCommand("bringToFront",  this));		MesquiteSubmenuSpec mSaveMacroAsst = ownerModule.addSubmenu(null, "Save Taxa Analysis as Macro");		mSaveMacroAsst.setList(ownerModule.getEmployeeVector());		mSaveMacroAsst.setListableFilter(TaxaDisplayAssistantAD.class);		mSaveMacroAsst.setCommand(ownerModule.makeCommand("saveMacroDisplayAssistant",  this));		MesquiteSubmenuSpec mCloseAsst = ownerModule.addSubmenu(null, "Close/Remove");		mCloseAsst.setList(ownerModule.getEmployeeVector());		mCloseAsst.setListableFilter(TaxaDisplayAssistantAD.class);		mCloseAsst.setCommand(ownerModule.makeCommand("closeDisplayAssistant",  this));				taxaDrawCoordTask.addMenuItem("-", null);		taxaDrawCoordTask.addCheckMenuItem(null, "Use Suggested Size", ownerModule.makeCommand("useSuggestedSize",  this), useSuggestedSize);				taxaDrawCoordTask.addCheckMenuItem(null, "Size To Window", ownerModule.makeCommand("toggleSizeToFit",  this), sizeToFit);		sizeItem = taxaDrawCoordTask.addMenuItem("Drawing Size...", MesquiteModule.makeCommand("sizeDrawing",  this));		floatLegendsItem = taxaDrawCoordTask.addCheckMenuItem(null, "Float Legends", ownerModule.makeCommand("toggleLegendFloat",  this), floatLegends);						taxaDisplay.setTaxa(taxa);		taxaDisplay.setTaxonNameBuffer(30);		messagePanel=new MessagePanel(ownerModule);		addToWindow(messagePanel);		messagePanel.setVisible(true);				/*		lockPanel=new LockPanel(this);		addToWindow(lockPanel);		lockPanel.setLocation(0, getHeight()-scrollWidth);		lockPanel.setVisible(true);		*/				setBackground(Color.white);		messagePanel.setLocation(0, getHeight()-scrollWidth);		togglePane(true, commandRec);		taxaDisplay.setVisible(true);		    	 			ownerModule.hireAllEmployees(commandRec, TaxaWindowAssistantI.class);  		Enumeration em = ownerModule.getEmployeeVector().elements(); 		while (em.hasMoreElements()) {			Object obj = em.nextElement();			MesquiteModule mb = (MesquiteModule)obj;			if (mb instanceof TaxaWindowAssistant) {				((TaxaWindowAssistant)mb).setTaxa(taxa, commandRec);  			} 		}		setShowExplanation(true);		setShowAnnotation(true);		baseExplanation.setValue("This is a taxa window.  In it you can view taxa from various taxa sources.");		setExplanation(baseExplanation, true);//	   	taxaWindowTask.doCommand("makeTaxaWindow", getProject().getTaxaReferenceInternal(taxa), commandRec, checker);		sizeDisplay();		resetTitle();	   	doCommand("useSuggestedSize",null, commandRec, CommandChecker.defaultChecker);	   	properlyFormed = true;	}	/*.................................................................................................................*/	public boolean getProperlyFormed(){		return properlyFormed;	}	/*.................................................................................................................*/	/** When called the window will determine its own title.  MesquiteWindows need	to be self-titling so that when things change (names of files, tree blocks, etc.)	they can reset their titles properly*/	public void resetTitle(){		String t;		t = "Taxa Window " + windowNum + " for taxa \"" +taxa.getName() + "\"";		//else		//	t = "Taxa Window " + windowNum + " showing " + taxaSourceTask.getNameForMenuItem();		setTitle(t);	}		void setSuggestedSize(boolean  setToDefault, boolean togglepane, CommandRecord commandRec){		Dimension s = taxaDrawCoordTask.getPreferredSize();		oldPreferred = s;		if (!setToDefault && s != null) { //if taxadrawer has perferred size then put here			sizeToFit.setValue(false);			totalTaxaFieldWidth = s.width;			totalTaxaFieldHeight = s.height;			toggleLegendFloat();		}		else if (taxa.getNumTaxa()>50) {			sizeToFit.setValue(false);						totalTaxaFieldWidth = taxa.getNumTaxa()*14;  			totalTaxaFieldHeight  = taxa.getNumTaxa()*14;			toggleLegendFloat();		}		else {			sizeToFit.setValue(true);					}		if (togglepane)			togglePane(false, commandRec);		sizeDisplay();			}   	private void toggleLegendFloat(){   		if (taxaPane == null || sizeToFit.getValue() || floatLegends.getValue()) { //legends can't float			checkLegendPositionsLegal();		}		else {  //undoing floating			//get bounds on visible part of taxaDisplay  			Point pt = taxaPane.getScrollPosition();			Dimension dim = taxaPane.getViewportSize();			//cycle through all components getting those that are Legends 			Component[] cc = taxaDisplay.getComponents();			if (cc!=null && cc.length>0)				for (int i=0; i<cc.length; i++) {					if (cc[i] instanceof Legend){	   					//use getOffsetX(); for current and 	   					//adjustLocation	   					Legend legend = (Legend)cc[i];	   					Rectangle rect  = legend.getBounds();	   					int newOffsetX = 0;	   					int newOffsetY = 0;	   					boolean done = false;	   					if (rect.x - pt.x > dim.width /2) {	   						//move legend to right border	   						legend.setOffsetX(taxaDisplay.getBounds().width - dim.width + legend.getOffsetX());	   						done = true;	   					}	   					else {	   						//move legend to left border	   						legend.setOffsetX(legend.getOffsetX() - pt.x);	   						done = true;	   					}	   					if (rect.y - pt.y > dim.height/2){	   						//move legend to bottom border	   						legend.setOffsetY(taxaDisplay.getBounds().height - dim.height + legend.getOffsetY());	   						done = true;	   					}	   					else {	   						//move legend to left border	   						legend.setOffsetY(legend.getOffsetY() - pt.y);	   						done = true;	   					}	   					if (done) 	   						legend.adjustLocation();					}				}			checkLegendPositionsLegal();		}   	}   	void checkLegendPositionsLegal(){   		if (taxaDisplay == null)   			return;   		try {	   		if (taxaPane == null || sizeToFit.getValue() || !floatLegends.getValue()) { //legends can't float or aren't floating				Component[] cc = taxaDisplay.getComponents();				if (cc!=null && cc.length>0)					for (int i=0; i<cc.length; i++) {						if (cc[i] instanceof Legend){ //make sure legends are in bounds		   					//adjustLocation		   					Legend legend = (Legend)cc[i];		   					legend.setConstrainingContainer(null);		   					legend.adjustLocation();						}					}			}			else {				//get bounds on visible part of taxaDisplay  				Point pt = taxaPane.getScrollPosition();				Dimension dim = taxaPane.getViewportSize();				//cycle through all components getting those that are Legends 				Component[] cc = taxaDisplay.getComponents();				if (cc!=null && cc.length>0)					for (int i=0; i<cc.length; i++) {						if (cc[i] instanceof Legend){		   					//use getOffsetX(); for current and 		   					//adjustLocation		   					Legend legend = (Legend)cc[i];		   					legend.setConstrainingContainer(taxaPane);		   					Rectangle rect  = legend.getBounds();		   					int amountX = 0;		   					int amountY = 0;		   					if (rect.x + rect.width> pt.x+dim.width) {		   						//move legend left		   						amountX = - rect.x - rect.width + (pt.x+dim.width);		   					}		   					else if (rect.x<pt.x) {		   						//move legend right		   						amountX = pt.x- rect.x;		   					}		   					if (amountX!= 0)		   						legend.setOffsetX(legend.getOffsetX()+amountX);		   					if (rect.y + rect.height> pt.y+dim.height){		   						//move legend up		   						amountY = -rect.y - rect.height + ( pt.y+dim.height);		   					}		   					else if (rect.y<pt.y) {		   						//move legend down		   						amountY = pt.y - rect.y;		   					}		   					if (amountY!= 0)		   						legend.setOffsetY(legend.getOffsetY()+amountY);		   					if (amountX!=0 || amountY!=0) {		   						legend.adjustLocation();		   								   					}						}					}			}		}		catch (Exception ex){		}   	}   		/*.................................................................................................................*/	public void adjustmentValueChanged(AdjustmentEvent e) {		try {			if (taxaPane!=null && !sizeToFit.getValue() && taxaDisplay!=null && floatLegends.getValue()){				Adjustable a = e.getAdjustable();				if (a == hAdjust){					int change = a.getValue() - oldH;					if (change !=0){						Component[] cc = taxaDisplay.getComponents();						if (cc!=null && cc.length>0)							for (int i=0; i<cc.length; i++) {								if (cc[i] instanceof Legend){				   					Legend legend = (Legend)cc[i];				   					legend.setOffsetX( legend.getOffsetX() + change);				   					legend.adjustLocation();								}							}										}					oldH = a.getValue();				}				else if (a == vAdjust){					int change = a.getValue() - oldV;					if (change !=0){						Component[] cc = taxaDisplay.getComponents();						if (cc!=null && cc.length>0)							for (int i=0; i<cc.length; i++) {								if (cc[i] instanceof Legend){				   					Legend legend = (Legend)cc[i];				   					legend.setOffsetY( legend.getOffsetY() + change);				   					legend.adjustLocation();								}							}										}					oldV = a.getValue();				}			}		}		catch (Exception ex){					}		checkLegendPositionsLegal();	}	/*.................................................................................................................*/	public void togglePane(boolean initiating, CommandRecord commandRec) {		togglePane(initiating, true, commandRec);	}	/*.................................................................................................................*/	public void togglePane(boolean initiating, boolean resetOrigin, CommandRecord commandRec) {					if (!sizeToFit.getValue()) {			if (taxaPane==null || initiating) {				if (!initiating)					removeFromWindow(taxaDisplay);				messageWidth=baseMessageWidth;				taxaPane = new TaxaScrollPane(ScrollPane.SCROLLBARS_ALWAYS, this);				taxaPane.setLocation(0, 0);				hAdjust = taxaPane.getHAdjustable();				oldH = hAdjust.getValue();				hAdjust.addAdjustmentListener(this);				vAdjust = taxaPane.getVAdjustable();				oldV = vAdjust.getValue();				vAdjust.addAdjustmentListener(this);				taxaPane.addTaxaDisplay(taxaDisplay);				addToWindow(taxaPane);				sizeDisplay();				taxaPane.setScrollPosition(-initPosX, -initPosY);				sizeItem.setEnabled(true);				floatLegendsItem.setEnabled(true);				if (!initiating) {					ownerModule.resetContainingMenuBar();					taxaPane.setVisible(true);					taxaDisplay.pleaseUpdate(true, commandRec);					messagePanel.repaint();					//lockPanel.repaint();				}			}		}		else {			if (taxaPane!=null || initiating)  {				if (!initiating)					removeFromWindow(taxaPane);				if (hAdjust!=null)					hAdjust.removeAdjustmentListener(this);				hAdjust = null;				if (vAdjust!=null)					vAdjust.removeAdjustmentListener(this);				vAdjust = null;				taxaPane = null;				taxaDisplay.setLocation(0, 0);				sizeDisplay();				addToWindow(taxaDisplay);				if (sizeItem!=null)					sizeItem.setEnabled(false);				if (floatLegendsItem!=null)					floatLegendsItem.setEnabled(false);				if (!initiating) {					ownerModule.resetContainingMenuBar();					taxaDisplay.pleaseUpdate(true, commandRec);					messagePanel.repaint();					//lockPanel.repaint();				}			}    	 		if (resetOrigin)    	 			setOrigin(0, 0);		}	}	/*.................................................................................................................*/	/** Called in some circumstances (not all) when a component is added to a container in the window.  Currently used so that	the taxa window knows that a component has been added to the TaxaDisplay.*/	public void componentAdded(Container cont, Component comp){		checkLegendPositionsLegal();	}	/*.................................................................................................................*/	void sizeDisplay(){			if (taxaDisplay==null  ||messagePanel==null || sizeToFit == null)				return;			if (sizeToFit.getValue()) {				taxaDisplay.setSize(getWidth(),getHeight()-scrollWidth);				taxaDisplay.setFieldSize(getWidth(),getHeight()-scrollWidth);			}			else {				taxaDisplay.setFieldSize(totalTaxaFieldWidth, totalTaxaFieldHeight);				int useWidth = MesquiteInteger.maximum(totalTaxaFieldWidth, getWidth());				int useHeight = MesquiteInteger.maximum(totalTaxaFieldHeight, getHeight()-scrollWidth);				taxaDisplay.setSize(useWidth,useHeight);				if (taxaPane!=null){					taxaPane.setSize(getWidth(),getHeight()-scrollWidth);					taxaPane.setVisible(true);					taxaPane.doLayout();				}			}			messageWidth = getWidth();			messagePanel.setLocation(0, getHeight()-scrollWidth);			messagePanel.setSize(messageWidth,scrollWidth);			checkLegendPositionsLegal();	}	/*.................................................................................................................*/	public Taxa getTaxa() {		return taxa;	}	/*.................................................................................................................*/	public void hideTaxa() {		if (taxaDisplay!=null)			taxaDisplay.setVisible(false);	}	/*.................................................................................................................*/	public void showTaxa() {		if (taxaDisplay!=null)			taxaDisplay.setVisible(true);	}	/*.................................................................................................................*	public void setTaxaSource(TaxaSource tsTask, CommandRecord commandRec) {		boolean setToZero = tsTask != taxaSourceTask;		taxaSourceTask = tsTask;		resetTitle();    	 	if (!commandRec.scripting()){	     	 	resetForTaxaSource(setToZero, true, commandRec);   	 		contentsChanged();			taxaDisplay.repaint();		}    	 	else {	     	 	resetForTaxaSource(setToZero, true, commandRec);		}	}	/*.................................................................................................................*		public void resetForTaxaSource(boolean setToZero, boolean firstTimeTaxaSource, CommandRecord commandRec) {		if (firstTimeTaxaSource)			warningGivenForTaxaSource = false;		MesquiteTree editedTree = null;		if (taxa !=null && taxa.isDoomed()) {			ownerModule.iQuit();			return;		}		treeAnnotationShown = false;		taxaDisplay.setTaxa(null); //done to catch spurious redraws		checkLegendPositionsLegal(); 	 	resetBaseExplanation();	}	/*.................................................................................................................*/	public void addAssistant(TaxaDisplayAssistant tda, CommandRecord commandRec) {		taxaDrawCoordTask.addAssistantTask(tda);		TaxaDisplayExtra tce = tda.createTaxaDisplayExtra(taxaDisplay, commandRec);		if (tce==null) 			return;		tce.setTaxa(taxa,commandRec);		taxaDisplay.addExtra(tce);		checkLegendPositionsLegal();		taxaDisplay.pleaseUpdate(false, commandRec);		if (getMode()>0)			updateTextPage();	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();		temp.addLine("getTaxaDrawCoordinator", taxaDrawCoordTask);  	 	temp.incorporate(super.getSnapshot(file), false);		temp.addLine("useSuggestedSize " + useSuggestedSize.toOffOnString());		if (!useSuggestedSize.getValue()){			temp.addLine("toggleSizeToFit " + sizeToFit.toOffOnString());			if (!sizeToFit.getValue()) {				temp.addLine("sizeDrawing " + totalTaxaFieldWidth + " " + totalTaxaFieldHeight);				temp.addLine("toggleLegendFloat " + floatLegends.toOffOnString());				temp.addLine("setOrigin " + getOriginX() + " " + getOriginY());			}		}  	 	return temp;  	 }	/** Returns menu location for item to bring the window to the for (0 = custom or don't show; 1 = system area of Windows menu; 2 = after system area of Windows menu)*/	public int getShowMenuLocation(){		return 0;	}	/*.................................................................................................................*/	public String getPrintMenuItem() {		return "Print Taxa...";	}	/*.................................................................................................................*/	public String getPrintToFitMenuItemName() {		return "Print Taxa To Fit Page...";	}	/*.................................................................................................................*/	public void printWindow(MesquitePrintJob pjob) {    	 		if (pjob != null) {				if (infoBar.getMode()>0) 					super.printWindow(pjob);				else 					pjob.printComponent(taxaDisplay, null, null);    	 		}	}	/*.................................................................................................................*/	public void setCurrentTool(MesquiteTool tool){		if (tool!=null && !tool.getEnabled())			return;  	 	if (tool instanceof TaxaTool)  	 		currentTaxaTool = (TaxaTool)tool;  	 	super.setCurrentTool(tool);	}	/*...............................................................................................................*/	protected void setContentsCursor(Cursor c){		if (c == null)			MesquiteMessage.printStackTrace("Error: cursor of taxa window null");		else if (taxaDisplay !=null)			taxaDisplay.setCursor(c);	}	/*.................................................................................................................*/	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Hires a taxa display assistant module", "[name of assistant module]", commandName, "newAssistant")) {			ownerModule.incrementMenuResetSuppression();    	 		TaxaDisplayAssistant tda= (TaxaDisplayAssistant)ownerModule.hireNamedEmployee(commandRec, TaxaDisplayAssistant.class, arguments);			if (tda!=null) {				addAssistant(tda, commandRec);				if (!commandRec.scripting())					ownerModule.resetContainingMenuBar();			}			ownerModule.decrementMenuResetSuppression();			return tda;    	 	}    	 	else if (checker.compare(this.getClass(), "Returns the taxa draw coordinating module", null, commandName, "getTaxaDrawCoordinator")) {    	 		return taxaDrawCoordTask;    	 	}    	 	else if (checker.compare(this.getClass(), "Hires a taxa window assistant module", "[name of assistant module]", commandName, "newWindowAssistant")) {    	 		TaxaWindowAssistant tda= (TaxaWindowAssistant)ownerModule.hireNamedEmployee(commandRec, TaxaWindowAssistant.class, arguments);			if (tda!=null)				tda.setTaxa(taxa,commandRec);			return tda;    	 	}    	 	else if (checker.compare(this.getClass(), "Brings the graphics of an assistant module to the front", "[number of assistant module among TaxaDisplayDrawnExtra owners]", commandName, "bringToFront")) {    	 		int which = MesquiteInteger.fromFirstToken(arguments, pos);    	 		if (!MesquiteInteger.isCombinable(which))    	 			return null;      	 		ListableVector ev = taxaDisplay.getExtras();  	 		int count =0;			for (int i=0; i< ev.size(); i++){				TaxaDisplayExtra extra = (TaxaDisplayExtra)ev.elementAt(i);				if (extra!=null && extra instanceof TaxaDisplayDrawnExtra) {					if (count== which) {						TaxaDisplayExtra found = extra;						ownerModule.moveEmployeeToFront(extra.getOwnerModule());						taxaDisplay.moveExtraToFront(extra);						ownerModule.resetContainingMenuBar();						return null;					}					count++;				}			}    	 	}    	 	else if (checker.compare(this.getClass(), "Closes an assistant module", "[number of assistant module]", commandName, "closeDisplayAssistant")) {    	 		EmployeeVector ev = ownerModule.getEmployeeVector();    	 		int which = MesquiteInteger.fromFirstToken(arguments, pos);    	 		if (!MesquiteInteger.isCombinable(which))    	 			return null;    	 		int count =0;			for (int i=0; i< ev.size(); i++){				MesquiteModule mb = (MesquiteModule)ev.elementAt(i);				if (mb!=null && mb instanceof TaxaDisplayAssistantAD) {					if (count== which) {						ownerModule.fireEmployee(mb);						return null;					}					count++;				}			}    	 	}    	 	else if (checker.compare(this.getClass(), "Saves a macro to redo the analysis of an assistant module", "[number of assistant module]", commandName, "saveMacroDisplayAssistant")) {    	 		EmployeeVector ev = ownerModule.getEmployeeVector();    	 		int which = MesquiteInteger.fromFirstToken(arguments, pos);    	 		if (!MesquiteInteger.isCombinable(which))    	 			return null;    	 		int count =0;			for (int i=0; i< ev.size(); i++){				MesquiteModule mb = (MesquiteModule)ev.elementAt(i);				if (mb!=null && mb instanceof TaxaDisplayAssistantAD) {					if (count== which) {						String recipe = "newAssistant #" + mb.getClass().getName() + ";" + StringUtil.lineEnding() + "tell It;"+ StringUtil.lineEnding();						recipe += Snapshot.getSnapshotCommands(mb, null, "");						recipe += "endTell;"+ StringUtil.lineEnding();				    	 	MesquiteMacro.saveMacro(ownerModule, "Macro to start " + mb.getNameForMenuItem(), 0, recipe);						return null;					}					count++;				}			}    	 	}    	 	else if (checker.compare(this.getClass(), "Requests that the taxa are drawn to a default (suggested) size", null, commandName, "useSuggestedSize")) {    	 		useSuggestedSize.toggleValue(ParseUtil.getFirstToken(arguments, pos));    	 		if (useSuggestedSize.getValue()) {				setSuggestedSize(false, true, commandRec);    	 		}    	 		else				setSuggestedSize(true, false, commandRec);// reset to default suggested size in case prevous suggested size was ridiculous			taxaDisplay.pleaseUpdate(false, commandRec);   	 	}    	 	else if (checker.compare(this.getClass(), "Sets whether or not the taxa is drawn so as to fit within the window, or so as to fit within a scrollable pane", "[on or off to indicate whether constrained to window]", commandName, "toggleSizeToFit")) {    	 		boolean current = sizeToFit.getValue();  	    	 	useSuggestedSize.setValue(false);  	    	 	  	    	 	pos.setValue(0);    	 		sizeToFit.toggleValue(ParseUtil.getFirstToken(arguments, pos));    	 		if (current!=sizeToFit.getValue()) {    	 			if (current && !commandRec.scripting())    	 				doCommand("sizeDrawing", null, commandRec, checker);    	 			togglePane(false, commandRec);    	 		}    	 	}    	 	else if (checker.compare(this.getClass(), "When Size to Window is false, brings legends into view", null, commandName, "toggleLegendFloat")) {    	 		boolean current = floatLegends.getValue();  	    	 	pos.setValue(0);    	 		floatLegends.toggleValue(ParseUtil.getFirstToken(arguments, pos));    	 		if (current != floatLegends.getValue())    	 			toggleLegendFloat();    	 		else    	 			checkLegendPositionsLegal();    	 		    	 	}    	 	else if (checker.compare(this.getClass(), "Sets the size of the drawing pane area (only useful if Size To Fit is turned off)", "[width in pixels of drawing area] [height in pixels of drawing area]", commandName, "sizeDrawing")) {  	    	 	pos.setValue(0);  	 		int w = MesquiteInteger.fromString(arguments, pos);    	 		int h = MesquiteInteger.fromString(arguments, pos);    	 		if (MesquiteInteger.isCombinable(h)  && MesquiteInteger.isCombinable(w)) {				if (w>10 && h>10) {					totalTaxaFieldWidth = w;					totalTaxaFieldHeight = h;					sizeDisplay();				}    	 		}    	 		else { 	    	 		MesquiteBoolean answer = new MesquiteBoolean(false);	    	 		MesquiteInteger newWidth = new MesquiteInteger(totalTaxaFieldWidth);	    	 		MesquiteInteger newHeight =new MesquiteInteger(totalTaxaFieldHeight);				MesquiteInteger.queryTwoIntegers(ownerModule.containerOfModule(), "Size of taxa drawing", "Width (Pixels)",  "Height (Pixels)", answer,  newWidth, newHeight,10,MesquiteInteger.unassigned,10, MesquiteInteger.unassigned,"Enter the width and height of the taxa drawing.  These values must be at least 10 pixels each.");				if (answer.getValue() && newWidth.getValue()>10 && newHeight.getValue()>10) {					totalTaxaFieldWidth = newWidth.getValue();					totalTaxaFieldHeight = newHeight.getValue();					sizeDisplay();				}			}    	 	}        	else if (checker.compare(this.getClass(), "Sets size of taxa window", "[width in pixels of window] [height in pixels of window]", commandName, "setSize")) {   	 		MesquiteInteger io = new MesquiteInteger(0);   			int width= MesquiteInteger.fromString(arguments, io);   			int height= MesquiteInteger.fromString(arguments, io);    	 		if (MesquiteInteger.isCombinable(width) && MesquiteInteger.isCombinable(height)) {    	 			setWindowSize(width, height);    	 			sizeDisplay();    	 		}    	 	}	 	else if (checker.compare(this.getClass(), "Sets the origin for the scrolling area", "[origin x] [origin y]", commandName, "setOrigin")) {    	 		pos.setValue(0);   	 		int horiz = MesquiteInteger.fromString(arguments, pos);    	 		int vert = MesquiteInteger.fromString(arguments, pos);    	 		if (MesquiteInteger.isCombinable(horiz) && MesquiteInteger.isCombinable(vert)) {    	 			setOrigin(horiz, vert);    	 		}    	 	}    	 	else if (checker.compare(this.getClass(), "Sets the current tool", "[name of tool]", commandName, "setTool")) {    	 		ToolPalette palette = getPalette();    	 		if (palette ==null)    	 			return null;  	 		currentTaxaTool = (TaxaTool)palette.getToolWithName(arguments);  	 		setCurrentTool(currentTaxaTool);			setExplanation(currentTaxaTool.getDescription());    	 	}    	 	else if (checker.compare(this.getClass(), "Zoom image", "[x][y]", commandName, "zoom")) {   			int x= MesquiteInteger.fromFirstToken(arguments, pos);   			int y= MesquiteInteger.fromString(arguments, pos);    			boolean zoomIn = (arguments.indexOf("option")<0);    			zoom(x,y, zoomIn, commandRec);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	 	/*.................................................................................................................*/   	 void zoom(int x, int y, boolean zoomIn, CommandRecord commandRec){   	 	    	 		boolean current = sizeToFit.getValue();			int oX = getOriginX();			int oY = getOriginY();			//Debugg.println("=======\nbefore x " + x + " y " + y + " origin x " + getOriginX() + "  origin y " + getOriginY() + " OFFSET X " + (oX+x));  	    	 	useSuggestedSize.setValue(false);			int tW, tH;			if (current){				tW = taxaDisplay.getBounds().width;				tH = taxaDisplay.getBounds().height;			}			else {				tW = totalTaxaFieldWidth;				tH = totalTaxaFieldHeight;			}  	    	 	  	    	 	pos.setValue(0);    	 		if (current)    	 			sizeToFit.setValue(false);			int newWidth, newHeight;			if (zoomIn){				newWidth = tW*2;				newHeight = tH*2;			}			else {				newWidth = tW/2;				newHeight = tH/2;			}			totalTaxaFieldWidth = newWidth;			totalTaxaFieldHeight = newHeight;			sizeDisplay();			 			togglePane(false, false, commandRec);			int setX, setY;			if (zoomIn) {				setX = oX-x;				setY = oY-y +scrollWidth; //why is this needed?			}			else {				setX = oX+x/2;				setY = oY+y/2;			}			/*			if (zoomIn)				setOrigin(-(x+ 2*oX),-(y+2*oY));			else				setOrigin(-(oX-x)/2,-(oY-y)/2);			*/			setOrigin(setX, setY);//Debugg.println("after to set x " + setX + " to set y " + setY + " origin x " + getOriginX() + "  origin y " + getOriginY());			//taxaDisplay.getTaxaDrawing().recalculatePositions(taxaDisplay.getTree(), commandRec); //to force node locs recalc   	 }	/*.................................................................................................................*/	public String getTextContents() {		if (taxaDisplay==null)			return "";		String s = "Taxa window\n";		//if (taxaSourceTask !=null)		//	s += "Showing " + taxaSourceTask.getNameForMenuItem();		if (taxa!=null)			s += " for taxa \"" + taxa.getName() + "\"";		s += "\n\n"  + taxaDisplay.getTextVersion();		return s;	}	/*.................................................................................................................*/	 public void paintContents(Graphics g) {		if (taxaDisplay==null)			{			MesquiteMessage.warnProgrammer("Oh no, taxa display is null");			}      		else {//^^^			sizeDisplay();			taxaDisplay.repaint();			checkLegendPositionsLegal();			g.setColor(Color.black);		}	}	public void setOrigin(int x, int y) {		if (taxaPane !=null) {			taxaPane.setScrollPosition(-x,-y);			taxaPane.doLayout();		}		initPosX = x;		initPosY = y;	}	//for java 1.1 printing	public Object fit(Dimension dim){		/*int w;		int h;		int currentWidth = taxaDisplay.getFieldWidth();		int currentHeight = taxaDisplay.getFieldHeight();		if (currentHeight == 0 || currentWidth == 0) {			w = dim.width;			h = dim.height;		}		else if (((double)dim.width)/currentWidth > ((double)dim.height)/currentHeight) {			w = (int)(((double)dim.height)/currentHeight * currentWidth);			h = dim.height;		}		else {			w = dim.width;			h = (int)(((double)dim.width)/currentWidth * currentHeight);		}		*/		Dimension d = new Dimension(getOriginX(), getOriginY());		taxaDisplay.setFieldSize(dim.width,dim.height);		setOrigin(0,0);		taxaDisplay.getTaxaDrawing().recalculatePositions(taxa,CommandRecord.scriptingRecord); //to force node locs recalc		return d;	}	public void unfit(Object o){		int oX = 0;		int oY = 0;		if (o instanceof Dimension) {			oX = ((Dimension)o).width;			oY =  ((Dimension)o).height;		}		setOrigin(oX,oY);		sizeDisplay();	}	public int getOriginX() {		if (taxaPane ==null)			return 0;		Adjustable h = taxaPane.getHAdjustable();		return -(int)( ((1.0*(h.getValue()- h.getMinimum()))/(h.getMaximum()-h.getMinimum()))*taxaDisplay.getBounds().width);	}	public int getOriginY() {		if (taxaPane ==null)			return 0;		Adjustable v = taxaPane.getVAdjustable();		return -(int)( ((1.0*(v.getValue()- v.getMinimum()))/(v.getMaximum()-v.getMinimum()))*taxaDisplay.getBounds().height);	}	/*_________________________________________________*/		public   void InvertTaxa(Graphics g, int M) {		if (findTaxon(taxaDisplay.getMouseX(), taxaDisplay.getMouseY()) == M){ //still in taxa			g.setColor(Color.black);			g.setXORMode(Color.white);			taxaDisplay.fillTaxon(g, M);			g.setPaintMode();			g.setColor(Color.black);			highlightedTaxa=M;		}		Taxa t = taxaDisplay.getTaxa();		if (t !=null) {			if (t.getAnnotation(M)!=null)				setAnnotation(t.getAnnotation(M), "Annotation above refers to taxa \"" + t.getTaxonName(M) + "\"");			else				setExplanation("Taxon: " + t.getTaxonName(M));		}	   }	   	/*_________________________________________________*/	public   void RevertTaxa(Graphics g, int M) {		if (highlightedTaxa >= 0){			g.setColor(Color.black);			g.setXORMode(Color.white);			taxaDisplay.fillTaxon(g, highlightedTaxa);			g.setPaintMode();			highlightedTaxa=-1;			g.setColor(Color.black);		}		setAnnotation("", null);	   }	/*_________________________________________________*/	private int getTaxonSymbolNearLocation(int x, int y){		for (int it=0; it<taxa.getNumTaxa(); it++) {			if (taxaDisplay.getTaxaDrawing().locationNearTaxon(it,4,x,y))				return it;		}		return -1;	}	/*_________________________________________________*/	private int findTaxon(int x, int y){		for (int it=0; it<taxa.getNumTaxa(); it++) {			if (taxaDisplay.pointInTaxon(it,x,y))				return it;		}		return taxaDrawCoordTask.getNamesTask().findTaxon(null, x, y);  //*DRM 	}	/*_________________________________________________*/	public void ScanFlash(Graphics g, int x, int y, int modifiers) {		if (taxaDisplay == null || taxaDrawCoordTask == null || taxaDrawCoordTask.getNamesTask() == null || taxaDisplay.getTaxaDrawing()==null)			return;		if (taxaDisplay.getInvalid())			return;		int taxonFound = findTaxon(x, y);  // just finds taxon name		if (highlightedTaxa >= 0) {			if (taxonFound==-1) {				notifyExtrasOfTaxaExit(g, highlightedTaxa);				RevertTaxa(g, highlightedTaxa);		        	setExplanation(baseExplanation, false);  //revert explanation to default one			}			else if (taxonFound!=highlightedTaxa)  {				notifyExtrasOfTaxaExit(g, highlightedTaxa);				RevertTaxa(g, highlightedTaxa); 				notifyExtrasOfTaxaEnter(g, taxonFound);				InvertTaxa(g, taxonFound);	        	} 	        	else   				currentTaxaTool.taxonMoveOver(taxonFound, modifiers);	        }	        else if (taxonFound!=-1 && !currentTaxaTool.getIgnoreTaxa()) {   			currentTaxaTool.taxonMoveOver(taxonFound, modifiers);			notifyExtrasOfTaxaEnter(g, taxonFound);	        	InvertTaxa(g, taxonFound); 		}		else {			currentTaxaTool.moved(x,y,modifiers);			//notify extras?		}	        	 	}	int oldX=MesquiteInteger.unassigned;	int oldY=MesquiteInteger.unassigned;	int newX=MesquiteInteger.unassigned;	int newY=MesquiteInteger.unassigned;	static final int dotSize = 8;	/*.................................................................................................................*/ 	public void firstDot(Graphics g) {		ColorDistribution.setTransparentGraphics(g);  	 	if (MesquiteInteger.isCombinable(oldX) && MesquiteInteger.isCombinable(oldY)){  //erase old one	   		g.setColor(Color.darkGray);			g.fillOval(oldX-dotSize, oldY-dotSize, dotSize*2, dotSize*2);  	 	}		g.setPaintMode();		g.setColor(Color.black);		ColorDistribution.setOpaqueGraphics(g);    	 }	/*.................................................................................................................*/ 	public void moveDot(Graphics g) {  		ColorDistribution.setTransparentGraphics(g);  	 	if (MesquiteInteger.isCombinable(oldX) && MesquiteInteger.isCombinable(oldY)){  //erase old one	    		g.setXORMode(Color.gray);//	   		g.setColor(Color.black);//			g.drawOval(oldX-dotSize, oldY-dotSize, dotSize*2, dotSize*2);	   		g.setColor(Color.darkGray);			g.fillOval(oldX-dotSize, oldY-dotSize, dotSize*2, dotSize*2);  	 	}  	 	if (MesquiteInteger.isCombinable(newX) && MesquiteInteger.isCombinable(newY)){  //erase old one	    		g.setXORMode(Color.gray);//	   		g.setColor(Color.black);//			g.drawOval(newX-dotSize, newY-dotSize, dotSize*2, dotSize*2);	   		g.setColor(Color.darkGray);			g.fillOval(newX-dotSize, newY-dotSize, dotSize*2, dotSize*2);  	 	}		g.setPaintMode();		g.setColor(Color.black);		ColorDistribution.setOpaqueGraphics(g);      	 }	/*.................................................................................................................*/	int taxonTouched = MesquiteInteger.unassigned;	/*_________________________________________________*/	public void ScanDrop(Graphics g, int x, int y, int modifiers) {		if (taxaDisplay == null  || taxaDrawCoordTask == null || taxaDrawCoordTask.getNamesTask() == null || taxaDisplay.getTaxaDrawing()==null)			return;		if (taxaDisplay.getInvalid())			return;		xFrom = -1;		yFrom = -1;		xTo = -1;		yTo = -1;		        	int nameFound = findTaxon(x,y);	        if (MesquiteInteger.isCombinable(taxonTouched)){			newX=MesquiteInteger.unassigned;			newY=MesquiteInteger.unassigned;   			moveDot(g);   			currentTaxaTool.taxonMouseUp(taxonTouched, x,y,modifiers);	        } 	        else if (nameFound==-1 || currentTaxaTool.getIgnoreTaxa()) {			boolean fieldMouseUpAccepted = currentTaxaTool.fieldMouseUp(x,y,modifiers);		} 		//return false;	   }	/*_________________________________________________*/	public   boolean ScanTouch(Graphics g, int x, int y, int modifiers) {		if (taxaDisplay == null  || taxaDrawCoordTask == null || taxaDrawCoordTask.getNamesTask() == null || taxaDisplay.getTaxaDrawing()==null)			return false;		if (taxaDisplay.getInvalid())			return false;		xFrom = -1;		yFrom = -1;		xTo = -1;		yTo = -1;		oldX=MesquiteInteger.unassigned;		oldY=MesquiteInteger.unassigned;		newX=MesquiteInteger.unassigned;		newY=MesquiteInteger.unassigned;		taxonTouched = MesquiteInteger.unassigned;		        	int nameFound = findTaxon(x,y);	        if (nameFound!=-1 && !currentTaxaTool.getIgnoreTaxa()) {   			currentTaxaTool.taxonTouched(nameFound, modifiers);   			notifyExtrasOfTaxaTouch(g, nameFound);			if (highlightedTaxa >= 0 )				RevertTaxa(g, highlightedTaxa);			taxonTouched = nameFound;			//oldX = x;			//oldY = y; 			//firstDot(g);  			return true;		}		else {			boolean fieldTouchAccepted=true;			fieldTouchAccepted = currentTaxaTool.fieldTouched(x,y,modifiers);			//notify extras?			return fieldTouchAccepted;		} 		//return false;	   }	/*_________________________________________________*/	public   void ScanDrag(Graphics g, int x, int y, int modifiers) {		if (taxaDisplay == null || taxa == null)			return;		if (taxaDisplay.getInvalid())			return;		if (MesquiteInteger.isCombinable(taxonTouched)) {			newX = x;			newY = y;			moveDot(g);			oldX = x;			oldY = y;			currentTaxaTool.taxonDragged(taxonTouched,x,y,modifiers);		}// fill out DRM:	}	/*................................................................................................*/	public void notifyExtrasOfTaxaEnter(Graphics g, int M) {		if (taxaDisplay.getExtras()!=null) {			Enumeration e = taxaDisplay.getExtras().elements();			while (e.hasMoreElements()) {				Object obj = e.nextElement();				if (obj instanceof TaxaDisplayExtra) {					TaxaDisplayExtra tce = (TaxaDisplayExtra)obj;		 			tce.cursorEnterTaxon(M, g);		 		}			}		}	}	/*................................................................................................*/	public void notifyExtrasOfTaxaExit(Graphics g, int M) {		if (taxaDisplay.getExtras()!=null) {			Enumeration e = taxaDisplay.getExtras().elements();			while (e.hasMoreElements()) {				Object obj = e.nextElement();				if (obj instanceof TaxaDisplayExtra) {					TaxaDisplayExtra tce = (TaxaDisplayExtra)obj;		 			tce.cursorExitTaxon( M, g);		 		}			}		}	}	/*................................................................................................*/	public void notifyExtrasOfTaxaTouch(Graphics g, int M) {		if (taxaDisplay.getExtras()!=null) {			Enumeration e = taxaDisplay.getExtras().elements();			while (e.hasMoreElements()) {				Object obj = e.nextElement();				if (obj instanceof TaxaDisplayExtra) {					TaxaDisplayExtra tce = (TaxaDisplayExtra)obj;		 			tce.cursorTouchTaxon(M, g);		 		}			}		}	}	/*.................................................................................................................*/	/** passes which object is being disposed (from MesquiteListener interface)*/	public void disposing(Object obj){		if (obj instanceof Taxa &&  (Taxa)obj ==taxa) {			ownerModule.iQuit();		}	}	/*.................................................................................................................*/	/** passes which object is being disposed (from MesquiteListener interface)*/	public boolean okToDispose(Object obj, int queryUser){		return true;  //TODO: respond	}	/*.................................................................................................................*/	/** passes which object changed (from MesquiteListener interface)*/	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		int code = Notification.getCode(notification);		int[] parameters = Notification.getParameters(notification);		if (obj instanceof Taxa &&  (Taxa)obj ==taxa) {			if (code==MesquiteListener.PARTS_CHANGED || code ==MesquiteListener.PARTS_ADDED || code == MesquiteListener.PARTS_MOVED || code == MesquiteListener.PARTS_DELETED) {				canUndo = false;				taxaDisplay.pleaseUpdate(true, commandRec);			}			else if (code==MesquiteListener.NAMES_CHANGED || code == MesquiteListener.SELECTION_CHANGED || code == AssociableWithSpecs.SPECSSET_CHANGED) 				taxaDisplay.pleaseUpdate(true, commandRec);			if (getMode()>0)				updateTextPage();		}		super.changed(caller, obj, notification, commandRec);	}   		/*.................................................................................................................*/		void resetBaseExplanation(){		String td = "";		String td2 = "";		if (ownerModule.getProject().getNumberTaxas()>1)			td += "Taxa window shows taxa \"" + taxa.getName() + "\"\n";		baseExplanation.setValue(td + "Browsing Mode.  " + td2 + "The taxa shown are from " + taxa.getName());		setExplanation(baseExplanation, true);	}	/*.................................................................................................................*/   	public void setExplanation(String exp){			baseExplanationUsed = false;			super.setExplanation(exp);   	}	/*.................................................................................................................*/   	void setExplanation(MesquiteString exp, boolean setEvenIfAlreadyBase){			if (exp == null)				return;			if (exp != baseExplanation || !(baseExplanationUsed && !setEvenIfAlreadyBase)) {				baseExplanationUsed = true;				super.setExplanation(exp.toString());			}   	}	/*.................................................................................................................*/	public void windowResized(){			sizeDisplay();	}	/*.................................................................................................................*/   	 public void dispose(){		disposing = true;		waitUntilDisposable();	   	if (taxa!=null)	   		taxa.removeListener(this);		windowModule = null; 		if (currentTaxaTool!=null) {			currentTaxaTool.dispose();			currentTaxaTool = null;		}		taxaDrawCoordTask = null;//		taxaSourceTask = null;				if (taxaDisplay !=null){			removeFromWindow(taxaDisplay);			taxaDisplay.dispose();		}		taxaDisplay=null;		if (sizeToFit!=null)			sizeToFit.releaseMenuItem();		//if (rooted!=null)		//	rooted.releaseMenuItem();		super.dispose();   	 }}/* ======================================================================== */class TaxaScrollPane extends ScrollPane{	BasicTaxaWindow window;	public TaxaScrollPane (int scrollPolicy, BasicTaxaWindow window) {		super(scrollPolicy);		this.window = window;	}	public void addTaxaDisplay(Component c){		addImpl(c, null, 0);	}		public void setSize(int w, int h){		super.setSize(w, h);		window.checkLegendPositionsLegal();			}	public void setBounds(int x, int y, int w, int h){		super.setBounds(x, y, w, h);		window.checkLegendPositionsLegal();	}}/* ======================================================================== *class LockPanel extends MousePanel {	Image lockClosed, lockOpen, lockImage;	BasicTaxaWindow window;	int state;	public LockPanel(BasicTaxaWindow window){		super();		this.window = window;		lockClosed  = MesquiteImage.getImage(MesquiteModule.getRootPath() + "images/lockClosed.gif");		lockOpen  = MesquiteImage.getImage(MesquiteModule.getRootPath() + "images/lockOpen.gif");		setLockState(0);	}	public void setLockState(int state){		this.state = state;		if (state == 0)			lockImage = lockClosed;		else if (state ==1)			lockImage = lockClosed;		else if (state == 2)			lockImage = lockOpen;	}		public void paint(Graphics g) { //^^^	   	if (MesquiteWindow.checkDoomed(this))	   		return; 		g.drawImage(lockImage, 0, -1, this); 		g.drawLine(0, getBounds().height-1, getBounds().width, getBounds().height-1);		MesquiteWindow.uncheckDoomed(this); 	}    	public void mouseUp(int modifiers, int x, int y, MesquiteTool tool) {    		window.lockTouched();    		repaint();   	}}*//* ======================================================================== */class MessagePanel extends Panel {	String message;	MesquiteModule ownerModule;	boolean showDiamond = false;	boolean indicateModified;	String modifiedString = "";	Polygon poly;	int left = 4;	int top = 4;	int s = 8;	public MessagePanel(MesquiteModule ownerModule) {  //in future pass general MesquiteWindow		super();		message="";		poly = new Polygon();		poly.xpoints = new int[4];		poly.ypoints = new int[4];		poly.npoints=0;		poly.addPoint(left, top+s/2);		poly.addPoint(left + s/2, top);		poly.addPoint(left + s, top+s/2);		poly.addPoint(left + s/2, top+s);		poly.npoints=4;		this.ownerModule = ownerModule;		setBackground(ColorDistribution.light[ColorDistribution.getColorScheme(ownerModule)]);			}	public void paint(Graphics g) {	   	if (MesquiteWindow.checkDoomed(this))	   		return;		g.drawRect(0,0, getBounds().width -1, getBounds().height-1);		if (showDiamond){			g.fillPolygon(poly);			if (message != null)				g.drawString(modifiedString + message,  left + s + 4, 12);		}		else if (message != null)			g.drawString(modifiedString + message,  4, 12);		MesquiteWindow.uncheckDoomed(this);	}		public void setMessage(String s) {		message = s;		repaint();	}	public void setHighlighted(boolean showDiamond, boolean showGreen, boolean indicateModified) {		this.showDiamond = showDiamond;		if (indicateModified)			modifiedString ="Modified from ";		else			modifiedString = "";		if (showGreen)			setBackground(ColorDistribution.lightGreen);		else			setBackground(ColorDistribution.light[ColorDistribution.getColorScheme(ownerModule)]);		repaint();	}}/* ======================================================================== *//* scrollbar for taxa */class TaxaScroll extends MesquiteScrollbar {	BasicTaxaWindow basicTaxaWindow;	public TaxaScroll (BasicTaxaWindow basicTaxaWindow, int orientation, int value, int visible, int min, int max){		super(orientation, value, visible, min, max);		this.basicTaxaWindow=basicTaxaWindow;	}		public void scrollTouched() {		int currentValue = getValue();	}	public void dispose(){		basicTaxaWindow = null;		//super.dispose();	}}/* ======================================================================== *class MagnifyExtra extends TaxaDisplayExtra {	Image image;	public MagnifyExtra (MesquiteModule ownerModule, TaxaDisplay taxaDisplay, TaxaTool tool) {		super(ownerModule, taxaDisplay);		image = MesquiteImage.getImage(tool.getImagePath());	}	/*.................................................................................................................*	public   void drawOntaxa(Tree tree, int drawnRoot, Graphics g) {		if (drawnRoot!= tree.getRoot()) {			TaxaDrawing td = taxaDisplay.getTaxaDrawing();			g.drawImage(image, td.x[drawnRoot], td.y[drawnRoot], taxaDisplay);		}	}	public   void setTree(Tree tree, CommandRecord commandRec) {	}	/** Returns any strings to be appended to taxa name.*	public String getTaxaStringAddition(Taxa taxa){		Taxa taxa = taxa.getTaxa();		int which = taxa.whichTaxaNumber(taxa);		String s = taxa.getAnnotation(which);		if (!StringUtil.blank(s))			return "*";		return null;	}	public   void printOnTree(Tree tree, int drawnRoot, Graphics g) {	}	}	*/