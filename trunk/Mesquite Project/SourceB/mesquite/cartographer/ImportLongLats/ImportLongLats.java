/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.ImportLongLats;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.cont.lib.*;import mesquite.cartographer.lib.*;/* ======================================================================== */public class ImportLongLats extends GeogDataUtility {	int taxaToAdd = 0;	boolean changedGroup=false;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		return true;	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}	/*.................................................................................................................*/	public boolean isPrerelease(){		return false;	}	/*.................................................................................................................*/	public void calcNumToAdd(Taxa taxa, String contents){		taxaToAdd = 0;		if (taxa==null)			return;		Parser parser = new Parser();		parser.setString(contents);		if (!parser.isXMLDocument(false))   // check if XML			return;		if (!parser.resetToMesquiteTagContents())   // check if XML			return;		MesquiteString nextTag = new MesquiteString();		String tagContent = parser.getNextXMLTaggedContent(nextTag);		if ("geographicDistribution".equalsIgnoreCase(nextTag.getValue())) {  //make sure it has the right root tag			parser.setString(tagContent);			tagContent = parser.getNextXMLTaggedContent(nextTag);			while (!StringUtil.blank(tagContent)) {				if ("taxon".equalsIgnoreCase(nextTag.getValue())) {					if (taxa.getNumTaxa() >=Taxa.MAXNUMTAXA)						return; 					taxaToAdd++;				}				tagContent = parser.getNextXMLTaggedContent(nextTag);			}		} else			return;	}	/*.................................................................................................................*/	public boolean readLongLatData(Taxa taxa, GeographicData gData, String contents, int firstTaxon){		int it = firstTaxon;		if (taxa==null)			return false;		int count = 0;		changedGroup=false;		double value;		TaxaPartition currentGroups = (TaxaPartition)taxa.getCurrentSpecsSet(TaxaPartition.class);		TaxaGroupVector groups = (TaxaGroupVector)getProject().getFileElement(TaxaGroupVector.class, 0);		Object obj ;		TaxaGroup group;		Parser parser = new Parser();		Parser subParser = new Parser();		parser.setString(contents);		if (!parser.isXMLDocument(false))   // check if XML			return false;		if (!parser.resetToMesquiteTagContents())   // check if has mesquite tag, and reset to this if so			return false;		ProgressIndicator progIndicator;		String taxonNameForIndicator ="";		MesquiteString nextTag = new MesquiteString();		String tagContent = parser.getNextXMLTaggedContent(nextTag);		if ("geographicDistribution".equalsIgnoreCase(nextTag.getValue())) {  //make sure it has the right root tag			parser.setString(tagContent);			tagContent = parser.getNextXMLTaggedContent(nextTag);			String subTagContent;			progIndicator = new ProgressIndicator(getProject(),getName(), "Importing Longitude Latitude Data", taxaToAdd, true);			progIndicator.start();			while (!StringUtil.blank(tagContent)) {				count++;				if ("taxon".equalsIgnoreCase(nextTag.getValue())) {					it++;					subParser.setString(tagContent);					subTagContent = subParser.getNextXMLTaggedContent(nextTag);					while (!StringUtil.blank(nextTag.getValue())) {						if ("name".equalsIgnoreCase(nextTag.getValue())) {  // we've found the taxon name, stored in subTagContent							taxa.setTaxonName(it, subTagContent, false);  //don't notify about name change as this vastly increases time, and causes too many repaints							taxonNameForIndicator = " (" + subTagContent +")";						}						else if ("group".equalsIgnoreCase(nextTag.getValue())) {  // here's the group it belongs to, stored in subTagContent							 obj = groups.getElement(subTagContent);							 group = (TaxaGroup)obj;							 if (group==null)							 	group = TaxaGroup.makeGroup(this,subTagContent, taxa, groups);							if (group!=null) {								if (currentGroups==null) {								 		currentGroups= new TaxaPartition("Untitled Partition", taxa.getNumTaxa(), null, taxa);								 		currentGroups.addToFile(taxa.getFile(), getProject(), findElementManager(TaxaPartition.class));										taxa.setCurrentSpecsSet(currentGroups, TaxaPartition.class);								}								if (currentGroups!=null)									currentGroups.setProperty(group, it);							}							changedGroup = true;						}						else if ("longitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed longitude, stored in subTagContent							value = MesquiteDouble.fromString(subTagContent);							if (MesquiteDouble.isCombinable(value))								gData.setState(gData.getLongitudeCharacter(), it, 0, value);						}						else if ("latitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed latitude, stored in subTagContent							value = MesquiteDouble.fromString(subTagContent);							if (MesquiteDouble.isCombinable(value))								gData.setState(gData.getLatitudeCharacter(), it, 0, value);						}						subTagContent = subParser.getNextXMLTaggedContent(nextTag);					}				}				tagContent = parser.getNextXMLTaggedContent(nextTag);				if (progIndicator != null) {					if (progIndicator.isAborted()) {						if (!AlertDialog.query(containerOfModule(), "Continue with Import?", "Continue with Import?", "Continue", "Cancel", 1)) {							progIndicator.goAway();							return true;						}						break;					}					progIndicator.setText("Taxon " + count +taxonNameForIndicator);					progIndicator.setCurrentValue(count);				}			}		} else			return false;		if (progIndicator!=null) 			progIndicator.goAway();		return true;	}	/*.................................................................................................................*/   	 public boolean loadData(Taxa taxa, GeographicData gData, CommandRecord commandRec) {  		MesquiteString directoryName= new MesquiteString();		MesquiteString fileName= new MesquiteString();		String filePath = MesquiteFile.openFileDialog("Choose Long-Lat File...", directoryName, fileName);		if (filePath==null)			return sorry(commandRec, "Data file was not chosen.");		MesquiteFile dataFile =MesquiteFile.open(true, filePath);		if (dataFile==null || StringUtil.blank(dataFile.getFileName())) 			return sorry(commandRec, "Data file could not be found.");					taxaToAdd=0;		int it = taxa.getNumTaxa()-1;		String contents = MesquiteFile.getFileContentsAsString(filePath);		if (!StringUtil.blank(contents))   {			calcNumToAdd(taxa,contents);			if (taxaToAdd <= 0 )				return sorry(commandRec, "Data file could not be read.  It may not be a valid data file."); //D!			taxa.addTaxa(it, taxaToAdd, true);			if (!readLongLatData(taxa,gData,contents, it))				return sorry(commandRec, "Data file could not be read.  It may not be a valid data file."); //D!		}		if (taxaToAdd>0)  // as we had suppressed name change notification, we now need to do it.			taxa.notifyListeners(taxa, new Notification(MesquiteListener.NAMES_CHANGED, new int[] {}));	    	 if (changedGroup)	    	 	taxa.notifyListeners(this, new Notification(AssociableWithSpecs.SPECSSET_CHANGED), commandRec);  		if (!commandRec.scripting())			parametersChanged(null, commandRec);		return true;	 }	/*.................................................................................................................*/   	/** Called to alter data in all cells*/   	public boolean operateOnData(CharacterData data, CommandRecord commandRec){			if (!(data instanceof GeographicData))				return false;			GeographicData gData = (GeographicData)data;			Taxa taxa = data.getTaxa();			return loadData(taxa,gData, commandRec);   	}	/*.................................................................................................................*/    	 public String getName() {		return "Import Lat-Long Data...";   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Imports additional latitude - longitude data from a file." ;   	 }   	 }