/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.TransverseMercator;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.cartographer.lib.*;import mesquite.cont.lib.*;public class TransverseMercator extends CalibratedStandProj {	/* Equations used come from 		Snyder, J.ÊP.  1987.  Map Projections--A Working Manual. U.ÊS. Geological Survey Professional Paper 1395. 			Washington,  DC: U.ÊS. Government Printing Office.		*/		//	public MesquiteNumber scale = new MesquiteNumber();   // scaling factor	public MesquiteNumber originLatitude = new MesquiteNumber();   // phi-0	public MesquiteNumber originLongitude = new MesquiteNumber();   // lambda-0	protected double phi0=0.0;  // origin latitude	protected double lambda0 = 0.0;   // origin longitude	double k0 = 1.0;		double eprime2 = 0.0;	double e2 = 0.0;	double M0=0.0;  		/*.................................................................................................................*/  	public boolean parametersSpecified(){  		return (originLongitude.isCombinable() && originLatitude.isCombinable());  	}	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {  		addMenuItem("Projection Parameters...", makeCommand("projectionParameters",  this));  		return super.startJob(arguments,condition,commandRec,hiredByName);  	 }	/*_________________________________________________*/	/**   */   	public void processProjectionParameters(boolean duringOptimization){		super.processProjectionParameters(duringOptimization);		phi0 = GeographicData.getPolarLatitude(originLatitude.getDoubleValue());		lambda0 = GeographicData.getPolarLongitude(originLongitude.getDoubleValue());		if (getEllipsoid()) {			e2 = e*e; 			eprime2 = e2 /(1-e2 );		}		//k0=scale.getDoubleValue();		M0 = getM(phi0);   	}	/*.................................................................................................................*/   	public double getM(double phi){		double e4;		double e6;  		try { e4 = Math.pow(e,4);}  		catch (ArithmeticException e) { return MesquiteDouble.unassigned; }  		try { e6 = Math.pow(e,6);}  		catch (ArithmeticException e) { return MesquiteDouble.unassigned; }   		return a*((1-e2/4 - 3*e4/64-5*e6/256)*phi - (3*e2/8+3*e4/32+45*e6/1024)*Math.sin(2*phi) + (15*e4/256+45*e6/1024)*Math.sin(4*phi) - (35*e6/3072)*Math.sin(6*phi));   	}	/*.................................................................................................................*/   	public boolean convertToUnscaledProjectionCoordinates(double longitude, double latitude, MesquiteNumber x, MesquiteNumber y){   		if (MesquiteDouble.isCombinable(longitude) && MesquiteDouble.isCombinable(latitude)) {   			double phi = GeographicData.getPolarLatitude(latitude);   			double lambda = GeographicData.getPolarLongitude(longitude);			double lambdaDiff = getLambdaDiff90(lambda,lambda0,false);			if (getEllipsoid()) {				double M= getM(phi);				if (Math.abs(phi)==(Math.PI/2)) {					x.setValue(0);					y.setValue(k0*(M-M0));				}				else {					double z = e*Math.sin(phi);					double N = a/Math.sqrt(1-z*z);					double T = Math.tan(phi);					T=T*T;					double T2 = T*T;					z = Math.cos(phi);					double C = eprime2*z*z;					double A = lambdaDiff * z;					if (!MesquiteDouble.isCombinable(M))						return false;										double A3;					double A5;			  		try { A3 = Math.pow(A,3);}			  		catch (ArithmeticException e) { return false; }			  		try { A5 = Math.pow(A,5);}			  		catch (ArithmeticException e) { return false; }					x.setValue(k0*N*(A + (1-T+C)*A3/6 + (5-18*T +T2 + 72*C - 58*eprime2)*A5/120));										double A4;					double A6;			  		try { A4 = Math.pow(A,4);}			  		catch (ArithmeticException e) { return false; }			  		try { A6 = Math.pow(A,6);}			  		catch (ArithmeticException e) { return false; }					y.setValue(k0*(M-M0+N*Math.tan(phi)*(A*A/2 + (5 - T + 9*C + 4*C*C)*A4/24 + (61-58*T+T2 + 600*C - 330*eprime2)*A6/720)));				}			}			else {				double B = Math.cos(phi)*Math.sin(lambdaDiff);   				x.setValue(k0*Math.log((1+B)/(1-B))/2);				y.setValue(k0*Math.atan(Math.tan(phi)/Math.cos(lambdaDiff))-phi0);			}   			return true;   		}   		else   			return false;   	}	/*.................................................................................................................*/   	public boolean convertFromProjectionCoordinates(double x, double y, MesquiteNumber longitude, MesquiteNumber latitude){   		double lambda;   		double phi;		if (getEllipsoid()) {			double e1 = Math.sqrt(1-e2 );			e1 = (1-e1)*(1+e1);			double e4;			double e6;	  		try { e4 = Math.pow(e,4);}	  		catch (ArithmeticException e) { return false; }	  		try { e6 = Math.pow(e,6);}	  		catch (ArithmeticException e) { return false; }			double M = M0 + y/k0;			double mu = M/(a*(1-e2 /4 - 3*e4/64 - 5*e6/256));			double e3;	  		try { e4 = Math.pow(e1,4);}	  		catch (ArithmeticException e) { return false; }	  		try { e3 = Math.pow(e1,3);}	  		catch (ArithmeticException e) { return false; }			double phi1 = mu + (3*e1/2-27*e3/32)*Math.sin(2*mu) + (21*e1*e1/16 - 55*e4/32)*Math.sin(4*mu)+ (151*e3/96)*Math.sin(6*mu)+ (1097*e4/512)*Math.sin(8*mu);			double cosPhi1Squared = Math.cos(phi1);			cosPhi1Squared = cosPhi1Squared*cosPhi1Squared;			double C1=eprime2*cosPhi1Squared;			double T1= Math.tan(phi1);			T1=T1*T1;			double sinPhi1Squared = Math.sin(phi1);			sinPhi1Squared = sinPhi1Squared*sinPhi1Squared;			double N1 = a/Math.sqrt(1-e2 *sinPhi1Squared);			double R1 = (1-e2 *sinPhi1Squared);	  		try { R1 = Math.pow(R1,1.5);}	  		catch (ArithmeticException e) { return false; }			R1 = a*(1-e2 )/R1;			double D = x/(N1*k0);			double D3;			double D4;			double D5;			double D6;	  		try { D3 = Math.pow(D,3);}	  		catch (ArithmeticException e) { return false; }	  		try { D4 = Math.pow(D,4);}	  		catch (ArithmeticException e) { return false; }	  		try { D5 = Math.pow(D,5);}	  		catch (ArithmeticException e) { return false; }	  		try { D6 = Math.pow(D,6);}	  		catch (ArithmeticException e) { return false; }			phi=phi1 - (N1*Math.tan(phi1)/R1)*(D*D/2 - (5 + 3*T1 + 10*C1 - 4*C1*C1 - 9*eprime2)*D4/24 + (61+90*T1 + 298*C1 + 45*T1*T1 - 252*eprime2 - 3*C1)*D6/720);			lambda = lambda0 + (D- (1+2*T1+C1)*D3/6 + (5-2*C1+28*T1-3*C1*C1 + 8*eprime2 + 24*T1*T1)*D5/120)/Math.cos(phi1);		}		else {			double D = y/k0 + phi0;			phi = Math.asin(Math.sin(D)/cosh(x/k0));			lambda = lambda0 + Math.atan(sinh(x/k0)/Math.cos(D));		}   		   		longitude.setValue(GeographicData.getRegularLongitude(lambda));   		latitude.setValue(GeographicData.getRegularLatitude(phi));   		return true;   	}	/*.................................................................................................................*/	public boolean getEllipsoidFormAvailable(){		return true;	}	/*.................................................................................................................*/    	 public String getName() {		return "Transverse Mercator Projection";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Converts to and from a Transverse Mercator map projection.";   	 }   	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return false;   	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = super.getSnapshot(file);	 	temp.addLine("projectionParameters '" + originLatitude.toString() + "' '" + originLongitude.toString()+"' ");	 	return temp;  	 }	/*.................................................................................................................*/	public String getProjectionParameters(CommandRecord commandRec){		String s = "";//		s += "\t\t\t<k0>" + scale.toString() + "</k0>\n";		s += "\t\t\t<originLongitude>" + originLongitude.toString() + "</originLongitude>\n";		s += "\t\t\t<originLatitude>" + originLatitude.toString() + "</originLatitude>\n";		return s;	}	/*.................................................................................................................*/	public boolean readProjectionParameters(String contents, CommandRecord commandRec){		Parser subParser = new Parser();		subParser.setString(contents);		MesquiteString nextTag = new MesquiteString();		String subTagContent = subParser.getNextXMLTaggedContent(nextTag);		while (!StringUtil.blank(nextTag.getValue())) {/*			if ("k0".equalsIgnoreCase(nextTag.getValue())) {// here's the scaling factor, stored in subTagContent				scale.setValue(MesquiteDouble.fromString(subTagContent));			}			else */			if ("originLongitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed longitude, stored in subTagContent				originLongitude.setValue(MesquiteDouble.fromString(subTagContent));			}			else if ("originLatitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed latitude, stored in subTagContent				originLatitude.setValue(MesquiteDouble.fromString(subTagContent));			}			subTagContent = subParser.getNextXMLTaggedContent(nextTag);		}		return true;	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {     	 	if (checker.compare(this.getClass(), "Sets the parameters of the map", "[top bottom left right]", commandName, "projectionParameters")) {    	 		if (StringUtil.blank(arguments) && !commandRec.scripting()) {    	 			if (queryStandards())     	 				if ((originLatitude.isCombinable() && originLongitude.isCombinable())) {						processProjectionParameters(false);						parametersChanged(null, commandRec); 					}    	 		}    	 		else {	    	 		originLatitude.setValue(MesquiteDouble.fromString(parser.getFirstToken(arguments)));	     	 		originLongitude.setValue(MesquiteDouble.fromString(parser.getNextToken()));	     	 //		scale.setValue(MesquiteDouble.fromString(parser.getNextToken()));    	 			if (!(originLatitude.isCombinable() && originLongitude.isCombinable()))	    	 			if (!commandRec.scripting())	    	 				queryStandards();    	 			if (!(originLatitude.isCombinable() && originLongitude.isCombinable()))	    	 			return null;	    	 		else  {					processProjectionParameters(false);	    	 			parametersChanged(null, commandRec); 	    	 		}    	 		}    	 	} 	 	else       	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/	public boolean queryStandards() {		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog queryDialog = new ExtensibleDialog(containerOfModule(), "Projection Parameters",  buttonPressed);		queryDialog.addLabel("Parameters of Projection", Label.CENTER);//		DoubleField k0Field = queryDialog.addDoubleField("Scaling factor:", scale.getDoubleValue(),8);		DoubleField latField = queryDialog.addDoubleField("Coordinate origin latitude:", originLatitude.getDoubleValue(),8,-90.0, 90.0);		DoubleField  longField = queryDialog.addDoubleField("Coordinate origin longitude:", originLongitude.getDoubleValue(),8,-180.0, 180.0);		String s = getStringDescribingLatLongs();		queryDialog.appendToHelpString(s);		queryDialog.completeAndShowDialog(true);					boolean ok = (queryDialog.query()==0);		MesquiteBoolean success = new MesquiteBoolean(true);				if (ok) {//			scale.setValue(k0Field.getValue());  // error checking!			originLatitude.setValue(latField.getValue(success)); 			originLongitude.setValue(longField.getValue(success));  		}				queryDialog.dispose();   		 		if (!success.getValue()) {			discreetAlert(CommandRecord.nonscriptingRecord, "Some values are out of bounds; these values will be reset to their previous values.");		}   		return ok;	}	/*.................................................................................................................*/	public double evaluate(MesquiteDouble param, Object param2){			return 0;	}	/*.................................................................................................................*	public double evaluate(double[] x, Object param){		if (x == null || x.length != 3) {			return 0;		}		if ( x[0]<=0.0)			return MesquiteDouble.veryLargeNumber;		if (x[1]>90.0 || x[1]<-90.0)			return MesquiteDouble.veryLargeNumber;		if (x[2]>90.0 || x[2]<-90.0)			return MesquiteDouble.veryLargeNumber;		scale.setValue(x[0]);  		originLatitude.setValue(x[1]);  		originLongitude.setValue(x[2]); 		processProjectionParameters(true);		return getMismatch();	}	/*.................................................................................................................*/	public double evaluate(double[] x, Object param){		if (x == null || x.length != 2) {			return 0;		}		if (x[0]>90.0 || x[0]<-90.0)			return MesquiteDouble.veryLargeNumber;		if (x[1]>90.0 || x[1]<-90.0)			return MesquiteDouble.veryLargeNumber;		originLatitude.setValue(x[0]);  		originLongitude.setValue(x[1]); 		processProjectionParameters(true);		double score = getMismatch();		reportOptimizationToUser(score);		return score;	}	/*.................................................................................................................*/    	 public void setParametersToCalibrationPoint(int j){		if (calibrations[j]!=null) {			originLatitude.setValue(calibrations[j].getLatitude().getDoubleValue());  			originLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 		}    	 }	/*.................................................................................................................*/    	 public void setParametersToTwoCalibrationPoints(int i, int j){ 		if (calibrations[i]!=null) {			originLatitude.setValue(calibrations[i].getLatitude().getDoubleValue());  		} 		if (calibrations[j]!=null) {			originLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 		}   	 }	/*.................................................................................................................*/    	 public int getNumParameters (){    	 	return 2;    	 }	/*.................................................................................................................*/		double scaleStored, originLatitudeStored, originLongitudeStored; 	/*.................................................................................................................*/    	 public void storeParameters() {//		scaleStored = scale.getDoubleValue();  		originLatitudeStored = originLatitude.getDoubleValue();  		originLongitudeStored =originLongitude.getDoubleValue();      	 }	/*.................................................................................................................*/    	 public void recoverStoredParameters() {//		scale.setValue(scaleStored);  		originLatitude.setValue(originLatitudeStored);  		originLongitude.setValue(originLongitudeStored);      	 }	/*.................................................................................................................*/    	 public void setParametersIfUnassigned(boolean setEvenIfAssigned) {		if (!originLatitude.isCombinable() || setEvenIfAssigned)			originLatitude.setValue(RandomBetween.getDouble(-90.0,90.0));  		if (!originLongitude.isCombinable() || setEvenIfAssigned)			originLongitude.setValue(RandomBetween.getDouble(-180.0,180.0));      	 }	/*.................................................................................................................*    	 public double[] getParamArray() {    	 	double[] x = new double[3];    	 	x[0] = scale.getDoubleValue();    	 	x[1] = originLatitude.getDoubleValue();    	 	x[2] = originLongitude.getDoubleValue();    	 	return x;    	 }	/*.................................................................................................................*/    	 public double[] getParamArray() {    	 	double[] x = new double[2];    	 	x[0] = originLatitude.getDoubleValue();    	 	x[1] = originLongitude.getDoubleValue();    	 	return x;    	 }	/*.................................................................................................................*/   	public String getParameters() { 		return "";   	}   	    	 }