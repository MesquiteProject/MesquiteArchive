/* Mesquite source code.  Copyright 1997-2003 W. Maddison and D. Maddison. Version 0.996+. August 2003.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.tol.GetToLTree;/*~~  */import java.net.*;import java.util.*;import java.io.*;import mesquite.lib.*;import mesquite.lib.duties.*;import org.jdom.*;import org.jdom.input.SAXBuilder;//import org.jdom.input.DOMBuilder;import org.jdom.output.*;public class ToLProjectOpener  {	/*.................................................................................................................*/ 	public MesquiteProject establishProject(MesquiteModule ownerModule, String arguments, CommandRecord commandRec){ 		FileCoordinator fileCoord = ownerModule.getFileCoordinator(); 		MesquiteFile thisFile = new MesquiteFile();		/* what it should be: */		String queryString = "http://dev.tolweb.org/cgi-bin/treeXML.pl?group=" + arguments + "&steptype=page&depth=1&verbosity=low";		//the following shouldn't be needed but reflects inertia in the MesquiteFile class		try {			thisFile.setLocs(false, new URL(queryString), arguments, null);	    	}	    	catch (MalformedURLException e){	    		ownerModule.discreetAlert(commandRec, "Sorry, the URL appears malformed");	    		return null;	    	}	    		    	//preparing XML parsing	        SAXBuilder saxBuilder = new SAXBuilder();	   //     DOMBuilder domBuilder = new DOMBuilder();		Document jdomDocument;		org.jdom.Element root = null;               try {			jdomDocument = saxBuilder.build(queryString);			root =jdomDocument.getRootElement();	    	}	    	catch (IOException e){	    		ownerModule.discreetAlert(commandRec, "Sorry, the database was inaccessible");	    		Debugg.println("IOException " + e);	    		return null;	    	}	    	catch (JDOMException e){	    		ownerModule.discreetAlert(commandRec, "Sorry, there has been a JDOMException");	    		Debugg.println("JDOMException " + e);	    		return null;	    	}		if (root == null) {	    		ownerModule.discreetAlert(commandRec, "Sorry, no tree was obtained from the database");			return null;		}		int numTaxa = countTerminals(root, "  ");		if (numTaxa == 0) {	    		ownerModule.discreetAlert(commandRec, "Sorry, no tree was obtained from the database");			return null;		}							//looks as if tree was recovered properly; prepare project	    	MesquiteProject p = fileCoord.initiateProject(thisFile.getFileName(), thisFile);		MesquiteFile sf = commandRec.getScriptingFile();		if (commandRec.scripting())			commandRec.setScriptingFile(thisFile);				//getting taxon names & building Taxa block		String[] names= new String[numTaxa];		getTerminals(root, names, new MesquiteString(), new MesquiteInteger(0));		TaxaManager taxaTask = (TaxaManager)ownerModule.findElementManager(Taxa.class);		Taxa taxa = taxaTask.makeNewTaxa("Taxa from ToL", numTaxa, false);		NameReference notesRef = NameReference.getNameReference("notes");		for (int i = 0; i<numTaxa; i++){			Taxon t = taxa.getTaxon(i);			t.setName(names[i]);			taxa.setAnnotation(i, names[i]);			//AttachedNotesVector attachedNotes = new AttachedNotesVector(taxa);			//AttachedNote newNote = new AttachedNote();			//newNote.setAuthor("tolweb.org");			//newNote.setComment(names[i], true);			//attachedNotes.addNote(newNote, true);			//taxa.setAssociatedObject(NameReference.getNameReference("notes"), i, attachedNotes);		}		taxa.addToFile(thisFile, p, taxaTask);				//getting tree structure		MesquiteTree tree = new MesquiteTree(taxa);		buildTree(root, tree, tree.getRoot(), names, new MesquiteInteger(0));		tree.setName("Tree for " + arguments);		TreeVector trees = new TreeVector(taxa);		trees.addElement(tree, false);		trees.addToFile(thisFile,p,ownerModule.findElementManager(TreeVector.class));			trees.setName("Trees for " + arguments);				//cleaning up and scripting the windows to show the tree		commandRec.setScriptingFile(sf);		 		MesquiteModule treeWindowCoord = ownerModule.getFileCoordinator().findEmployeeWithName("#BasicTreeWindowCoord");		if (treeWindowCoord!=null){			String commands = "makeTreeWindow " + p.getTaxaReference(taxa) + "  #BasicTreeWindowMaker; tell It; ";			commands += "getEmployee #mesquite.cipres2.SearchToLTaxon.SearchToLTaxon; tell It; enableTools; endTell;";			commands += "setTreeSource  #StoredTrees; tell It; setTaxa " + p.getTaxaReference(taxa) + " ;  setTreeBlock 1; endTell; ";			commands += "getTreeDrawCoordinator #mesquite.trees.BasicTreeDrawCoordinator.BasicTreeDrawCoordinator;";			commands += "tell It; suppress; setTreeDrawer  #mesquite.trees.SquareTree.SquareTree; tell It; orientRight; endTell; desuppress; endTell;";			commands += "getWindow; tell It; getToolPalette; tell It; setTool mesquite.cipres2.SearchToLTaxon.SearchToLTaxonToolExtra.goToLTaxon; endTell; endTell;";			commands += "  showWindow; endTell; ";			MesquiteInteger pos = new MesquiteInteger(0);			Puppeteer pup = new Puppeteer(ownerModule);			pup.execute(treeWindowCoord, commands, pos, null, false);		} 		return p;   	 }  /*--------------------------*/    public int countTerminals(Element element, String spacer) {    	boolean isNode = isNode(element);        List children = element.getContent();        Iterator iterator = children.iterator();        int terms = 0;        while (iterator.hasNext()) {            Object o = iterator.next();            if (o instanceof Element) {            	Element e = (Element)o;            	if (isContinuable(e))            		terms += countTerminals(e, spacer + "   ");            }        }        if (isNode && terms == 0) {        	return 1;       }        else  {        	return terms;        }    }    /*--------------------------*/	boolean isNode(Element element){		return "Node".equalsIgnoreCase(element.getName());	}	boolean isAncestor(Element element){		return "Ancestor".equalsIgnoreCase(element.getName()) || "Ancestors".equalsIgnoreCase(element.getName()) || "Ancestors_INFO".equalsIgnoreCase(element.getName());	}	boolean isContinuable(Element element){		return "TREE".equalsIgnoreCase(element.getName())|| "NAME".equalsIgnoreCase(element.getName()) || "NODES".equalsIgnoreCase(element.getName()) || "NODE".equalsIgnoreCase(element.getName());	}  /*--------------------------*/    public int getTerminals(Element element, String[] names, MesquiteString termName, MesquiteInteger c) {    	boolean isNode = isNode(element);    	boolean isName = "Name".equalsIgnoreCase(element.getName());        List children = element.getContent();        Iterator iterator = children.iterator();        int terms = 0;        while (iterator.hasNext()) {            Object o = iterator.next();           if (isName){            	if (o instanceof CDATA) {           		termName.setValue(((CDATA)o).getText());           	}           }           else if (o instanceof Element) {            	Element e = (Element)o;               	 if (isContinuable(e))               	 	terms += getTerminals((Element) o, names, termName, c);            }        }        if (isNode && terms == 0) {        	        	names[c.getValue()] =  new String(termName.getValue()); //element.getAttributeValue("NAME");       	c.increment();        	return 1;        }        else         	return terms;    }    /*--------------------------*/	boolean isRoot = true; //will be true only up until first node found		public void buildTree(Element element, MesquiteTree tree, int node, String[] names, MesquiteInteger c) {		if (countTerminals(element, "  ") == 1 && isNode(element)) {			tree.setTaxonNumber(node, c.getValue(), false); //StringArray.indexOf(names, element.getAttributeValue("NAME")), false);			c.increment();		}		else {			List children = element.getContent();			Iterator iterator = children.iterator();			while (iterator.hasNext()) {				Object o = iterator.next();				if (o instanceof Element) {					Element e = (Element)o;					if (isNode(e)){ // is a node						if (isRoot){							isRoot = false;							buildTree((Element) o, tree, node, names, c);						}						else							buildTree((Element) o, tree, tree.sproutDaughter(node, false), names, c);					}					else if (isContinuable(e))						buildTree((Element) o, tree, node, names, c);				}			}		}    }    /*--------------------------*/}