/* Mesquite source code.  Copyright 1997-2003 W. Maddison & D. Maddison. Version 0.994. February 2003.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.wayne.TaxonPairsChart;/*~~  */import java.awt.*;import java.util.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.distance.lib.*;/*THIS SOURCE CODE FILE IS CURRENTLY NOT USED BY MESQUITE.  It is disabled in the Codewarrior project and thus not compiled./* ======================================================================== *//**=== Class TaxonPairsChart.    ===*/public class TaxonPairsChart extends FileAssistantCP  {	NumberFor2Taxa numberTask;	private Number2DArray taxonPairValues;	private Taxa taxa;	DrawChart charterTask;	MesquiteString numberTaskName;	PairsWindow window;	MesquiteSubmenuSpec msNT;	int suspend = 0;	MesquiteCommand ntC;	MesquiteInteger numTaxa;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) { 		charterTask = (DrawChart)hireNamedEmployee(commandRec, DrawChart.class, "Scattergram");		if (charterTask == null)			return sorry(commandRec, getName() + " couldn't start because no charting module obtained");		makeMenu("Chart");		ntC = makeCommand("setCalculator",  (Commandable)this);		msNT = addSubmenu(null, "Values", ntC, NumberFor2Taxa.class);		numTaxa = new MesquiteInteger();		if (!commandRec.scripting()){			taxa = getProject().chooseTaxa(containerOfModule(), "For which block of taxa do you want to show a chart of taxon pairs?", commandRec);	 		if (taxa ==null)	 			return false;	 		taxa.addListener(this);	 	}		numberTask=(NumberFor2Taxa)hireEmployee(commandRec, NumberFor2Taxa.class, "Value to calculate for taxon pairs");		if (numberTask == null)			return false;		numberTask.setHiringCommand(ntC);		numberTaskName = new MesquiteString(numberTask.getName());		msNT.setSelected(numberTaskName);				if (!commandRec.scripting()){			taxonPairValues = new Number2DArray(taxa.getNumTaxa(), taxa.getNumTaxa());  //	public PairsWindow (MesquiteModule ownerModule, Number2DArray pairValues, DrawChart charterTask, String itemTypeName, MesquiteInteger numItems, CommandRecord commandRec) {			setModuleWindow( window = new PairsWindow(this, taxonPairValues, charterTask, "Taxa", numTaxa, commandRec));			window.setWindowSize(400,400);			if (!commandRec.scripting()) {				doCounts(commandRec);				window.setVisible(true);			}	 		resetContainingMenuBar();			resetAllWindowsMenus();		}		//getModuleWindow().setTitle("Trees: " + treeSourceTask.getSourceName());		return true; 	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	} 	public void employeeQuit(MesquiteModule m){ 		if (m == charterTask) 			iQuit(); 	}	/*.................................................................................................................*/	public void endJob(){			if (taxa!=null)				taxa.removeListener(this);			super.endJob();	}	/*.................................................................................................................*/	/** passes which object is being disposed (from MesquiteListener interface)*/	public void disposing(Object obj){		if (obj instanceof Taxa && (Taxa)obj == taxa) {			iQuit();		}	}	/*.................................................................................................................*/ 	public void windowGoAway(MesquiteWindow whichWindow) {			whichWindow.hide();			whichWindow.dispose();			iQuit();	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = new Snapshot();  	 	temp.addLine("suspendCalculations");   	 	temp.addLine("setTaxa " + getProject().getTaxaReference(taxa));    	 	temp.addLine("setCalculator ", numberTask);   	 	if (window!=null) {	  	 	temp.addLine("getWindow");	  	 	temp.addLine("tell It");	  	 	temp.incorporate(window.getSnapshot(file), true);	  	 	temp.addLine("endTell");	  	 	temp.addLine("resumeCalculations"); 	  	 	temp.addLine("showWindow");  	 	}	  	else	  	 	temp.addLine("resumeCalculations");   	 	return temp;  	 }	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {   	 	if (checker.compare(this.getClass(), "Sets the taxa block used", "[block reference, number, or name]", commandName, "setTaxa")) {   	 		Taxa t = getProject().getTaxa(checker.getFile(), parser.getFirstToken(arguments));   	 		if (t!=null){	   	 		if (taxa!=null)	   	 			taxa.removeListener(this);	   	 		taxa = t;	   	 		if (taxa!=null)	   	 			taxa.addListener(this);				taxonPairValues = new Number2DArray(taxa.getNumTaxa(), taxa.getNumTaxa());  				setModuleWindow(window =  new PairsWindow(this, taxonPairValues, charterTask, "Taxa", numTaxa, commandRec));				window.setWindowSize(400,400);				if (!commandRec.scripting()) {					doCounts(commandRec);					getModuleWindow().setVisible(true);				}		 		resetContainingMenuBar();				resetAllWindowsMenus();	   	 		return taxa;   	 		}				      	 	 }    	 	else if (checker.compare(this.getClass(), "Suspends calculations", null, commandName, "suspendCalculations")) {			suspend++;     	 	}   	 	else if (checker.compare(this.getClass(), "Resume calculations", null, commandName, "resumeCalculations")) {			suspend--;     	 	}   	 	else if (checker.compare(this.getClass(), "Recalculates the chart's information", null, commandName, "recalculate")) {			suspend=0;			doCounts(commandRec); 			getModuleWindow().repaint();     	 	}   	 	else if (checker.compare(this.getClass(), "Recalculates and shows the chart window", null, commandName, "showWindow")) {			doCounts(commandRec);			getModuleWindow().setVisible(true);     	 	}   	 	else if (checker.compare(this.getClass(), "Sets the module calculating the number for taxon pairs", "[name of module]", commandName, "setCalculator")) {    	 		NumberFor2Taxa temp =  (NumberFor2Taxa)replaceEmployee(commandRec, NumberFor2Taxa.class, arguments, "Value to calculate for taxon pairs", numberTask);    	 		//((TaxonPairsChartWindow)getModuleWindow()).setNumberTask(numberTask); 			if (temp!=null) { 				numberTask = temp;				numberTask.setHiringCommand(ntC);				numberTaskName.setValue(numberTask.getName());				doCounts(commandRec);	 			getModuleWindow().repaint();	 			return numberTask;	 		}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/	public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {			doCounts(commandRec); 			if (window!=null) 				window.repaint();	}	/*...................................................................................................................*/	public void resetSizes(Taxa taxa, CommandRecord commandRec){    	 	numTaxa.setValue(taxa.getNumTaxa());		taxonPairValues.resetSize(numTaxa.getValue(), numTaxa.getValue());  	}	/*.................................................................................................................*/    	 public void doCounts(CommandRecord commandRec) {    	 	if (suspend>0)    	 		return;    	 	if (taxa==null || getModuleWindow()==null || taxonPairValues==null)    	 		return;    	 	int numTaxa = taxa.getNumTaxa();    	 	if (window==null )    	 		return;    	 	((PairsWindow)window).blankChart();    	 	resetSizes(taxa, commandRec);    	 	taxonPairValues.deassignArray();    	 	    	 	MesquiteNumber sum=new MesquiteNumber(0);    	 	MesquiteNumber cNum=new MesquiteNumber(0);    	 	for (int i=0; i<numTaxa; i++) {			Taxon taxonA = taxa.getTaxon(i);	    	 	for (int j=0; j<numTaxa;j ++) {				Taxon taxonB = taxa.getTaxon(j);				numberTask.calculateNumber(taxonA, taxonB, cNum, null, commandRec);				if (taxonPairValues!=null)					taxonPairValues.setValue(i, j, cNum);				sum.add(cNum);			}		}		((PairsWindow)getModuleWindow()).recalcChart(commandRec);	}	/*.................................................................................................................*/    	 public String getName() {		return "Taxon Pair Values";   	 }	/*.................................................................................................................*/    	 public String getNameForMenuItem() {		return "Taxa";   	 }	/*.................................................................................................................*/  	 public String getParameters() {		if (taxa==null)			return "Taxa block used: null";		else			return "Taxa block used: " + taxa.getName();   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Makes a chart showing some value for each of a pair of taxa.";   	 }   	 }