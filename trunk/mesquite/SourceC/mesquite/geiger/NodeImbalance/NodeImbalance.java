/* Mesquite module ~~ Copyright 1997-2001 W. & D. Maddison*/package mesquite.geiger.NodeImbalance;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;/** ======================================================================== */public class NodeImbalance extends NumbersForNodes {	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		return true;   	} 		/*.................................................................................................................*/   	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/   	public void initialize(Tree tree, CommandRecord commandRec){   	}	/*.................................................................................................................*/	public  void calculateNumbers(Tree tree, NumberArray result, MesquiteString resultString, CommandRecord commandRec) {		if (result==null)			return;		result.deassignArray();		visitNodes(tree, tree.getRoot(), result);		if (resultString!= null){				resultString.setValue("Node balance.");		}	}  	 private void visitNodes(Tree tree,int node, NumberArray result){		if (tree.nodeIsInternal(node)){			for (int daughter = tree.firstDaughterOfNode(node); tree.nodeExists(daughter); daughter = tree.nextSisterOfNode(daughter))				visitNodes(tree, daughter, result);		}				result.setValue(node, balance(tree, node));		  	 }  	double balance(Tree tree, int node){  	//todo what if polytomous?  	 		int numLeft =tree.numberOfTerminalsInClade(tree.firstDaughterOfNode(node));   	 		int numRight =tree.numberOfTerminalsInClade(tree.lastDaughterOfNode(node));   	 		return (1.0*numLeft/(numRight + numLeft));  	}	/*.................................................................................................................*/    	 public String getName() {		return "Node Imbalance";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Calculates the imbalance of a node.";   	 }   	 }