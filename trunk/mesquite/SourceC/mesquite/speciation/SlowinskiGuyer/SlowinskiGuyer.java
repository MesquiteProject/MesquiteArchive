/* Mesquite. Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.speciation.SlowinskiGuyer;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.categ.lib.*;import pal.statistics.ChiSquareDistribution;/* ======================================================================== *//**Calculates a number for a character and a tree.*/public class SlowinskiGuyer extends NumberForCharAndTree  {	MesquiteBoolean H1bigger;	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		H1bigger = new MesquiteBoolean(true); 		return true;  	} 		/*.................................................................................................................*/	public void initialize(Tree tree, CharacterDistribution states, CommandRecord commandRec) {  	 }		double probAtSplit(int n0, int n1){		if (n0 == 1 && n1 == 1)			return 1.0;		int n = n0 + n1;		if (H1bigger.getValue()){			//if (n1>=n0)				return (n0)*1.0/(n-1);  //(0000111111)  //0000011111			//else 			//	return 1.0 - n1*1.0/(n-1); //0000001111)						}		else {			//if (n0>=n1){				return (n1)*1.0/(n-1);			//}			//else {			//	return 1.0 - n0*1.0/(n-1);			//}		}	}	/*.................................................................................................................*/	public long statesAbove(int node, Tree tree, CategoricalDistribution states) {		if (tree.nodeIsTerminal(node))			return states.getState(tree.taxonNumberOfNode(node));		long left = statesAbove(tree.firstDaughterOfNode(node), tree, states);		long right = statesAbove(tree.lastDaughterOfNode(node), tree, states);		if (CategoricalState.cardinality(left) == 1 && CategoricalState.cardinality(right) ==1 && CategoricalState.cardinality(left | right) > 1){			int leftState = CategoricalState.minimum(left);			int rightState = CategoricalState.minimum(right);			if (leftState == 0 && rightState == 1){				int n0 = tree.numberOfTerminalsInClade(tree.firstDaughterOfNode(node));				int n1 = tree.numberOfTerminalsInClade(tree.lastDaughterOfNode(node));				if (n1 != 1 || n0 != 1){					n0s[count] = n0; //recording for debugging					n1s[count]=n1;					splitPs[count++] = probAtSplit(n0, n1);				}//Debugg.println(" probAtSplit(n0, n1) " + probAtSplit(n0, n1) + " n0 " + n0 + " n1 " + n1);			}			else if (leftState == 1 && rightState == 0){				int n1 = tree.numberOfTerminalsInClade(tree.firstDaughterOfNode(node));				int n0 = tree.numberOfTerminalsInClade(tree.lastDaughterOfNode(node));				if (n1 != 1 || n0 != 1){					n0s[count] = n0; //recording for debugging					n1s[count]=n1;					splitPs[count++] = probAtSplit(n0, n1);				}//Debugg.println(" probAtSplit(n0, n1)b " + probAtSplit(n0, n1) + " n0 " + n0 + " n1 " + n1);			}		}		return left | right;	}	int count = 0;	double[] splitPs;	int[] n0s, n1s;	/*.................................................................................................................*/	public  void calculateNumber(Tree tree, CharacterDistribution observedStates, MesquiteNumber result, MesquiteString resultString, CommandRecord commandRec) {      	 	if (result==null)    	 		return;		result.setToUnassigned();//		for (int i=2; i<16; i+=2)//			Debugg.println("X2 " + i + " " + ChiSquareDistribution.cdf(i*1.0, 8));		if (tree==null || observedStates==null) {			if (resultString!=null)				resultString.setValue("Sister diversification unassigned because no tree or no character supplied");			return;		}		int ntaxa = tree.getTaxa().getNumTaxa();		if (splitPs == null || splitPs.length<ntaxa){			splitPs = new double[ntaxa];			n0s = new int[ntaxa];			n1s = new int[ntaxa];		}		for (int i = 0; i< splitPs.length ; i++)			splitPs[i] = -1;		count = 0;//for (int i = 1; i<8; i++)//	Debugg.println("probaAtSplit " + probAtSplit(10-i, i) + " n0 " + (10-i) + " n1 " + i);//Debugg.println("oops1");		statesAbove(tree.getRoot(), tree, (CategoricalDistribution)observedStates);//Debugg.println("oops2");		if (count>0){//Debugg.println("oops3");			double x2 = 0;			for (int i=0; i<count; i++)				x2 += Math.log(splitPs[i]);			x2 *= -2;			double p = 0;			if (x2 < 100000000){				p = 1.0 - ChiSquareDistribution.cdf(x2, count*2);			//		Debugg.println(" x2 " + x2 + "  df " + count*2 + " p = " + p);	//		for (int i=0; i<count; i++)//				Debugg.println("     split p  " + splitPs[i] + "  n0s " + n0s[i] + "  n1s " + n1s[i]);//Debugg.println("oops5");			result.setValue(p);			if (resultString != null)				resultString.setValue("Slowinski-Guyer P value on  " + count + " comparisons: " + p);			}		}		else			if (resultString != null)				resultString.setValue("No usable sister clade comparisons found");		}	/*.................................................................................................................*/    	 public String getName() {		return "Slowinski-Guyer Diversification test";   	 }	/*.................................................................................................................*/    	 public boolean showCitation() {		return true;   	 }	/*.................................................................................................................*/   	 public boolean isPrerelease(){  	 	return true;  	 } 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Compares sister clades and returns Slowinski-Guyer P value examining sister pairs of uniform clades of state 1 & state 0." ;   	 }  	public CompatibilityTest getCompatibilityTest(){		return new CategoricalStateTest();	}	 }