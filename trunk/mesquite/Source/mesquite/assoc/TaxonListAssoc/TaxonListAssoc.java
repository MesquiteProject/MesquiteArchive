/* Mesquite.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, August 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.assoc.TaxonListAssoc;/*~~  */import mesquite.lists.lib.*;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.assoc.lib.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/* ======================================================================== */public class TaxonListAssoc extends TaxonListAssistant {	Taxa taxa, otherTaxa;	MesquiteTable table=null;	MesquiteMenuItemSpec m1, m2, m3;	AssociationSource associationTask;	TaxaAssociation association;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		associationTask = (AssociationSource)hireEmployee(commandRec, AssociationSource.class, "Source of taxon associations");		if (associationTask == null)			return sorry(commandRec, getName() + " couldn't start because no source of taxon associations obtained.");		return true;  	 }	public boolean isPrerelease(){		return false;	}	public boolean canHireMoreThanOnce(){		return true;	}  	 private void setAssociate(Taxon taxon, boolean add, boolean append, CommandRecord commandRec){ 		if (table !=null && taxa!=null && association != null) { 			boolean changed=false; 			if (add){	 			Taxa otherTaxa = association.getOtherTaxa(taxa);	 			if (taxon == null)	 				taxon = otherTaxa.userChooseTaxon(containerOfModule(), "Select the taxon to be associated with the selected rows");				if (taxon == null)					return;			}			if (employer!=null && employer instanceof ListModule) {				int c = ((ListModule)employer).getMyColumn(this); 				for (int i=0; i<taxa.getNumTaxa(); i++) { 					if (table.isCellSelectedAnyWay(c, i)) { 						Taxon t = taxa.getTaxon(i); 						if (!append) 							association.zeroAllAssociations(t); 						if (add) 							association.setAssociation(t, taxon, true); 						changed = true; 					} 				}			}	 	 			if (changed) { 				association.notifyListeners(this, new Notification(MesquiteListener.UNKNOWN), commandRec);       	 			parametersChanged(null, commandRec);     	 		} 		}  	 }  	 MesquiteInteger pos = new MesquiteInteger(0);	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	 if (checker.compare(this.getClass(), "Sets which other taxon is associated with these; replaces existing", null, commandName, "setAssociate")) {    	 		setAssociate(null, true, false, commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Sets which other taxon is associated with these; adds to existing", null, commandName, "addAssociate")) {    	 		setAssociate(null, true, true, commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Creates a new taxon and adds to existing", null, commandName, "createAssociate")) {	 		if (association == null)	 			return null;	 		Taxa otherTaxa = association.getOtherTaxa(taxa);    	 		otherTaxa.addTaxa(otherTaxa.getNumTaxa()-1, 1, false);    	 		Taxon t = otherTaxa.getTaxon(otherTaxa.getNumTaxa()-1);    	 		String n = MesquiteString.queryString(containerOfModule(), "Name of Taxon", "Name the new taxon", "Taxon");    	 		t.setName(n);    	 		otherTaxa.notifyListeners(this, new Notification(MesquiteListener.PARTS_ADDED), commandRec);    	 		setAssociate(t, true, true, commandRec);    	 	}    	 	else if (checker.compare(this.getClass(), "Deletes associations", null, commandName, "removeAssociates")) {    	 		setAssociate(null, false, false, commandRec);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	/*.................................................................................................................*/	public void setTableAndTaxa(MesquiteTable table, Taxa taxa, CommandRecord commandRec){		deleteMenuItem(m1);		deleteMenuItem(m2);		deleteMenuItem(m3);		m1 = addMenuItem(null, "Set Associate...", makeCommand("setAssociate", this));		m2 = addMenuItem(null, "Add Associate...", makeCommand("addAssociate", this));		m3 = addMenuItem(null, "Remove Associates", makeCommand("removeAssociates", this));		m2 = addMenuItem(null, "Create New Associated Taxon...", makeCommand("createAssociate", this));				this.taxa = taxa;		this.table = table;		resetAssociation(commandRec);	}	void resetAssociation(CommandRecord commandRec){        	association = associationTask.getCurrentAssociation(taxa, commandRec);         	if (association == null)        		association = associationTask.getAssociation(taxa, 0, commandRec);     		if (association == null)    			otherTaxa=null;     		else if (association.getTaxa(0)== taxa)    			otherTaxa = association.getTaxa(1);    		else    			otherTaxa = association.getTaxa(0);	}	/*.................................................................................................................*/ 	public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {        	resetAssociation(commandRec);		parametersChanged(notification, commandRec);	}	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		if (Notification.appearsCosmetic(notification))			return;		outputInvalid(commandRec);		parametersChanged(notification, commandRec);	}	public String getTitle() {		return "Associates";	}	Taxon[] associates;	public String getStringForTaxon(int ic){		if (taxa!=null) {			//if (association==null)			//	resetAssociation(CommandRecord.nonscriptingRecord);			if (association==null)				return "?";			if (associates==null ||  associates.length < otherTaxa.getNumTaxa())				associates = new Taxon[otherTaxa.getNumTaxa()];			associates = association.getAssociates(taxa.getTaxon(ic), associates);			if (associates!= null) {				String s = "";				boolean first = true;				for (int i=0; i<associates.length; i++)					if (associates[i]!=null){						if (!first)							s += ", ";						s += associates[i].getName();						first = false;					}				return s;			}			return "-";		}		return "?";	}	public boolean useString(int ic){		return true;	}	/*public void drawInCell(int ic, Graphics g, int x, int y,  int w, int h, boolean selected){		if (taxa==null || g==null)			return;		TaxaPartition part = (TaxaPartition)taxa.getCurrentSpecsSet(TaxaPartition.class);		Color c = g.getColor();		boolean colored = false;		if (part!=null) {			TaxaGroup tg = part.getTaxaGroup(ic);			if (tg!=null){				Color cT = tg.getColor();				if (cT!=null){					g.setColor(cT);					g.fillRect(x+1,y+1,w-1,h-1);					colored = true;				}			}		}		if (!colored){ 			if (selected)				g.setColor(Color.black);			else				g.setColor(Color.white);			g.fillRect(x+1,y+1,w-1,h-1);		}					String s = getStringForRow(ic);		if (s!=null){			FontMetrics fm = g.getFontMetrics(g.getFont());			if (fm==null)				return;			int sw = fm.stringWidth(s);			int sh = fm.getMaxAscent()+ fm.getMaxDescent();			if (selected)				g.setColor(Color.white);			else				g.setColor(Color.black);			g.drawString(s, x+(w-sw)/2, y+h-(h-sh)/2);			g.setColor(c);		}	}	*/	public String getWidestString(){		return "88888888888  ";	}	/*.................................................................................................................*/    	 public String getName() {		return "Associated Taxa";   	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}   	 	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Lists what other taxa (e.g. contained or containing) are associated with these." ;   	 }}