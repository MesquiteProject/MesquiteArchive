/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.StateImages; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.collab.lib.*;/** ======================================================================== */public class StateImages extends DataWindowAssistantI implements PanelOwner  {	CharacterData data;	StateDWPanel panel;	StateDWImagePanel iPanel;	MesquiteBoolean showPanel;	CharStateImageSource imageSource = null;	MesquiteTable table;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		showPanel = new MesquiteBoolean(false);				addCheckMenuItem(null, "Show States Images Panel", makeCommand("togglePanel", this), showPanel);		return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	temp.addLine("togglePanel " + showPanel.toOffOnString());  	 	//todo here: set source of images, and split as separate command below  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether or not the states panel is shown", "[on = shown; off]", commandName, "togglePanel")) {    	 		showPanel.toggleValue(parser.getFirstToken(arguments));    	 		if (showPanel.getValue() && imageSource == null){    	 			imageSource = (CharStateImageSource)hireEmployee(commandRec, CharStateImageSource.class, "Source of images");    	 			if (imageSource == null)    	 				showPanel.setValue(false);			}			setPanel(commandRec);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }   	 public void viewChanged(CommandRecord commandRec){   	 }   	 	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		this.data = data;				setPanel(commandRec);	}		/*.................................................................................................................*/	void setPanel(CommandRecord commandRec){		Frame f = containerOfModule();		if (f instanceof TableWindow){			if (showPanel.getValue()){				if (panel == null) {					panel = new StateDWPanel(this);				}								((TableWindow)f).addSidePanel(panel, DWPanel.width);				iPanel = (StateDWImagePanel)panel.getPanel();				iPanel.setData(data);				iPanel.setImageSource(imageSource);			}			else {				if (panel != null)					((TableWindow)f).removeSidePanel(panel);			}		}			}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	public void panelGoAway(){		showPanel.setValue(false);		setPanel(CommandRecord.nonscriptingRecord);	}   	 public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {   	 	if (employee == imageSource){   	 		if (table != null)   	 			table.repaintAll();   	 		parametersChanged(null, commandRec);   	 		focusInCell(previousChar, previousTax);   	 	}   	 	   	 }   	 int previousChar = -1;   	 int previousTax = -1;	/*.................................................................................................................*/   	public void focusInCell(int ic, int it){  		if (data == null || iPanel == null)   			return;   		if (panel == null || imageSource == null)   			return;   		previousChar = ic;   		previousTax = it;   		panel.setCell(ic, imageSource.getNumCharacterStateImages(data, ic, CommandRecord.nonscriptingRecord));		//iPanel.repaint();		//panel.repaint();   	}	/*.................................................................................................................*/    	 public String getName() {		return "Character State Images";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Installs a panel with images of states for a character matrix.";   	 }}class StateDWPanel extends DWPanel{	int ic = -1;	public StateDWPanel (StateImages pw){		super(pw);		setBackground(ColorDistribution.veryVeryLightGreen);	}	public DWImagePanel makePanel(){		return new StateDWImagePanel();	}	public String getTitleString(){		if (ic<0)			return "Images typifying character states";		return "States of Character " + (ic+1);	}   	 /**/	void setCell(int ic,  int[] numImages){		if (ic == this.ic || numImages == null){			return;		}		this.ic = ic;		this.numImagesVertical = numImages.length;		//scroll.setMaximumValue(numImages-1);				((StateDWImagePanel)getPanel()).showImages(ic, numImages);		repaint();		getPanel().repaint();	}}class StateDWImagePanel extends DWImagePanel{	CharStateImageSource source;	CharacterData data;	int currentIC = 0;	public StateDWImagePanel (){		super();		setBackground(Color.white);	}	public void setData(CharacterData data){		this.data = data;	}	public void setImageSource(CharStateImageSource source){		this.source = source;	}	public void showImages(int ic, int[] numImages){		if (source == null)			return;   		prepareMemory(numImages);   		   		currentIC = ic;   		for(int i=0; i<numImages.length; i++) {   			location.setValue("");   			Vector comment = new Vector();   			Vector location = new Vector();   			images[i] = source.getCharacterStateImages(i, data, ic, comment, location, CommandRecord.nonscriptingRecord);   			for (int im = 0; im < images[i].length; im++){   				comments[i][im] = new StringInABox("State " + i + ":  " + comment.elementAt(im), font, getBounds().width-8);   				locations[i][im] = new StringInABox("" + location.elementAt(im), font, getBounds().width-8);   			}   		}	}  	public void mouseDown (int modifiers, int clickCount, long when, int x, int y, MesquiteTool tool) {   		int im = findImage(y);   		if (clickCount>1 && source != null){    			source.showCloseupCharImage(im,  data, currentIC, modifiers, CommandRecord.nonscriptingRecord);   		}   		   	}			}