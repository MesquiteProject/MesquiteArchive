/* Mesquite source code.  Copyright 1997-2002 W. Maddison & D. Maddison. Version 0.992.  September 2002.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.CellInfo; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/** ======================================================================== */public class CellInfo extends DataWindowAssistantI {	TableTool infoTool;	CharacterData data;	MesquiteTable table;	TextDisplayer displayer;	/*		TODO:		update window text if matrix changes	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		if (containerOfModule() instanceof MesquiteWindow) {			infoTool = new TableTool(this, "info", getPath(), "info.gif", 8,1, "Cell Information", "This tool shows information about cells of a character matrix.", MesquiteModule.makeCommand("showInfo", this), null, null); 			((MesquiteWindow)containerOfModule()).addTool(infoTool);		}		else return false;		return true;	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }	public void setTableAndData(MesquiteTable table, CharacterData data, CommandRecord commandRec){		this.table = table;		this.data = data;	}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	/*.................................................................................................................*/	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(),  "Shows information about a cell of the matrix", "[column touched][row touched]", commandName, "showInfo")) {	   	 		if (data == null)	   	 			return null;	     			if (displayer == null){					displayer = (TextDisplayer)hireEmployee(commandRec, TextDisplayer.class, null);					if (displayer == null)						return null;	     			}	   	 		MesquiteInteger io = new MesquiteInteger(0);	   			int column= MesquiteInteger.fromString(arguments, io);	   			int row= MesquiteInteger.fromString(arguments, io);				if (MesquiteInteger.isNonNegative(column)&& (MesquiteInteger.isNonNegative(row))) {	   					StringBuffer info = new StringBuffer("Information for character " + (column+1) + ", taxon " + (row+1) + "\n\n");	   					info.append("Current state: ");	   					data.statesIntoStringBuffer(column, row, info, true);	   					info.append("  [internally coded as: ");	   					data.statesIntoStringBuffer(column, row, info, false);	   					info.append(" ]\n\n");				   	 	MesquiteModule emp = getEmployer();						for (int i = 0; i<emp.getNumberOfEmployees(); i++) {							Object e=emp.getEmployeeVector().elementAt(i);							if (e instanceof DataWindowAssistant) {								String cs = ((DataWindowAssistant)e).getCellString(column, row);								if (!StringUtil.blank(cs))									info.append(cs + "\n\n");							}						}						displayer.showText(info.toString(), "Information for character " + (column+1) + ", taxon " + (row+1), true);			   	 		return null;		   	 				   	 	}   	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Show Info";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Shows information about cells in the matrix.";   	 }}