/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.CharChgHistoryDefaults;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lib.characters.*;/* ======================================================================== */public class CharChgHistoryDefaults extends DefaultsAssistant {	MesquiteBoolean recChanges;	boolean nowarnIDs = false;	boolean nowarnHistory = false;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		CharacterData.defaultSaveChangeHistory = true;		CharacterData.defaultInventUniqueIDs = true;		Taxa.inventUniqueIDs = true;		loadPreferences(); 		recChanges = new MesquiteBoolean(CharacterData.defaultSaveChangeHistory);		addCheckMenuItem(null, "Record History of Changes", makeCommand("recordHistory",  this), recChanges);		if (!Taxa.inventUniqueIDs || !CharacterData.defaultInventUniqueIDs){			if (!nowarnIDs && !AlertDialog.query(containerOfModule(), "Unique IDs", "For collaborative projects both menu items Invent Unique IDs in the Defaults menu of the Log window should be checked.  If you wish, turn off this warning.", "OK", "Turn off Warning")){				nowarnIDs = true;				storePreferences();			}			alert("For collaborative projects both menu items Invent Unique IDs in the Defaults menu of the Log window should be checked.");		}		if (!CharacterData.defaultSaveChangeHistory){			if (!nowarnHistory && !AlertDialog.query(containerOfModule(), "History", "For collaborative projects the menu item Record History of Changes in the Defaults menu of the Log window should be checked.  If you wish, turn off this warning.", "OK", "Turn off Warning")){				nowarnHistory = true;				storePreferences();			}		}		return true;  	 }	public void processPreferencesFromFile (String[] prefs) {		if (prefs!=null && prefs.length>0) {					if ("record".equalsIgnoreCase(prefs[0]))						CharacterData.defaultSaveChangeHistory = true;					else						CharacterData.defaultSaveChangeHistory = false;					if (prefs.length>2){							nowarnIDs = "true".equalsIgnoreCase(prefs[1]);							nowarnHistory = "true".equalsIgnoreCase(prefs[2]);					}		}	}	/*.................................................................................................................*/	public String[] preparePreferencesForFile () {		if (!StringUtil.blank(MesquiteModule.author.getName())) {			if (CharacterData.defaultSaveChangeHistory) 				return (new String[] {"record", Boolean.toString(nowarnIDs), Boolean.toString(nowarnHistory)});			else				return (new String[] {"noRecord", Boolean.toString(nowarnIDs), Boolean.toString(nowarnHistory)});		}		return null;	}	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(MesquiteWindow.class, "Sets the author for this account and machine", null, commandName, "recordHistory")) {    	 		recChanges.toggleValue(parser.getFirstToken(arguments));    	 		CharacterData.defaultSaveChangeHistory = recChanges.getValue();    	 		setCurrentAllProjects();    	 		storePreferences();    	 					return null;    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);   	 }  	   	 private void setCurrentAllProjects(){  	 //go through all projects changing current author or adding current author  	 	Projects p = MesquiteTrunk.mesquiteTrunk.getProjectList();  	 	for (int i=0; i<p.getNumProjects(); i++){  	 		MesquiteProject proj = p.getProject(i);  	 		ListableVector v = proj.getCharacterMatrices();  	 		for (int ia = 0; ia< v.size(); ia++){  	 			CharacterData au = (CharacterData)v.elementAt(ia); 	 			au.saveChangeHistory = CharacterData.defaultSaveChangeHistory;  	 		}  	 	}  	 }	/*.................................................................................................................*/    	 public String getName() {		return "Character Change History Default";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Sets the preferences for recording history of character changes.";   	 }}