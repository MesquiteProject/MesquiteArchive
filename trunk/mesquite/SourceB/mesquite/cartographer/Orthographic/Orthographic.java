/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.Orthographic;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.cartographer.lib.*;import mesquite.cont.lib.*;public class Orthographic extends CalibratedStand2Proj {	/* Equations used come from 				Snyder, J.ÊP.  1987.  Map Projections--A Working Manual. U.ÊS. Geological Survey Professional Paper 1395. 			Washington,  DC: U.ÊS. Government Printing Office.	lambda is longitude;  phi is latitude 		*/	double R=6371.0;			/*.................................................................................................................*/   	public boolean convertFromProjectionCoordinates(double x, double y, MesquiteNumber longitude, MesquiteNumber latitude){   		double lambda;   		double phi;   		double ro = Math.sqrt(x*x +y*y);   		if (ro==0.0) { 			lambda= lambda0;   			phi = phi1;   		}   		else { 	   		double c = Math.asin(ro/R);	   		phi = Math.asin(Math.cos(c)*Math.sin(phi1) + ((y*Math.sin(c)*Math.cos(phi1))/ro));	   		if (phi1==Math.PI/2)	   			lambda=lambda0+ Math.atan(-x/y);	   		else if (phi1==-Math.PI/2)	   			lambda=lambda0+Math.atan(x/y);	   		else {	   			double A = (x*Math.sin(c));	   			double B = ro*Math.cos(phi1)*Math.cos(c) - y*Math.sin(phi1)*Math.sin(c);	   			lambda = lambda0 + arctanRatio(A,B);	   		}    		}   		   		longitude.setValue(GeographicData.getRegularLongitude(lambda));   		latitude.setValue(GeographicData.getRegularLatitude(phi));   		return true;   	}	/*.................................................................................................................*/   	public boolean convertToUnscaledProjectionCoordinates(double longitude, double latitude, MesquiteNumber x, MesquiteNumber y){   		if (MesquiteDouble.isCombinable(longitude) && MesquiteDouble.isCombinable(latitude)) {   			double phi = GeographicData.getPolarLatitude(latitude);   			double lambda = GeographicData.getPolarLongitude(longitude);  			double lambdaDiff = getLambdaDiff(lambda,lambda0,true);   			   			double hprime = Math.sin(phi1)*Math.sin(phi) + Math.cos(phi1)*Math.cos(phi)*Math.cos(lambdaDiff);   			if (hprime>=0) {	   			x.setValue(R*Math.cos(phi)*Math.sin(lambdaDiff));	   			y.setValue(R*(Math.cos(phi1)*Math.sin(phi) - Math.sin(phi1)*Math.cos(phi)*Math.cos(lambdaDiff)));   			} else {	   			x.setToUnassigned();	   			y.setToUnassigned();	   			return false;   			}   			   			return true;   		}   		else   			return false;   	}	/*.................................................................................................................*/    	 public String getName() {		return "Orthographic Projection";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Converts to and from an Orthographic map projection.";   	 }   	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return false;   	 }   	 }