/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.ScreenSquared;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.cartographer.lib.*;import mesquite.cont.lib.*;/* ======================================================================== */public class ScreenSquared extends LocationReconstructor {	SquaredReconstructor reconstructor;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		reconstructor = new SquaredReconstructor();		return true;	} 	/*.................................................................................................................*/   	public double[][]  reconstructLocations(Tree tree, Double2DArray originalLocations, Double2DArray modifiedLocations, CommandRecord commandRec){   		if (projectionTask==null)   			return null;//Debugg.println("******* in reconstructLocations ");   		double[][] tempTerminalLocs = new double[2][tree.getNumTaxa()];		for (int axis = 0; axis<2; axis++) {			for (int it = 0; it<tree.getNumTaxa(); it++) {				tempTerminalLocs[axis][it] = modifiedLocations.getValue(axis,tree.nodeOfTaxonNumber(it));//Debugg.println("       |*| " + tempTerminalLocs[axis][it] + ", node: " + tree.nodeOfTaxonNumber(it));			}			}   	//second, use squared reconstructor   		reconstructor.reconstruct(tree, tempTerminalLocs, false, true, commandRec);   		return reconstructor.getReconstructedStates(0);   	}	/*.................................................................................................................*/   	public double[][]  reconstructLocations2(Tree tree, Double2DArray originalLocations, Double2DArray modifiedLocations, CommandRecord commandRec){   		if (projectionTask==null)   			return null;   		Double2DArray tempLocs = new Double2DArray(2,tree.getNumNodeSpaces());		for (int axis = 0; axis<2; axis++) {			for (int it = 0; it<tree.getNumNodeSpaces(); it++) {				tempLocs.setValue(axis,it,modifiedLocations.getValue(axis,it));			}			}			//Debugg.println("******* in reconstructLocations ");   	//first, convert terminalLocations to screen coordinates//   		projectionTask.convertLongLatsToProjected(tree,tree.getRoot(),tempLocs, null, false);//   		projectionTask.convertProjectedToScreenCoordinates(tree,tree.getRoot(), tempLocs,false);   		double[][] tempTerminalLocs = new double[2][tree.getNumTaxa()];		for (int axis = 0; axis<2; axis++) {			for (int it = 0; it<tree.getNumTaxa(); it++) {				tempTerminalLocs[axis][it] = tempLocs.getValue(axis,tree.nodeOfTaxonNumber(it));//Debugg.println("       |*| " + tempLocs.getValue(axis,tree.nodeOfTaxonNumber(it)) + ", node: " + tree.nodeOfTaxonNumber(it));			}			}   	//second, use squared reconstructor   		reconstructor.reconstruct(tree, tempTerminalLocs, false, true, commandRec);   		double[][] tempLocs2 = new double[2][tree.getNumNodeSpaces()];   		tempLocs2 = reconstructor.getReconstructedStates(0);//		for (int axis = 0; axis<2; axis++) {//			for (int it = 0; it<tree.getNumNodeSpaces(); it++) {//				tempLocs.setValue(axis,it,tempLocs2[axis][it]);//			}	//		}   		   	//finally, convert back to longlats   	//	projectionTask.convertScreenCoordinatesToLongLats(tree,tree.getRoot(), tempLocs,true);   		   		return tempLocs2;   	} 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Reconstructs ancestral locations using a simple screen-based squared change reconstructor." ;   	 }	public boolean isSubstantive(){		return true;	}   	 	public String getName(){		return "Screen-based Squared Reconstructor"; 	} 	}