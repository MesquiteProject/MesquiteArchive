/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 0.9, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.GeneralPerspective;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.cartographer.lib.*;public class GeneralPerspective extends CalibratedStandProj {	/* Equations used come from 		Snyder, J.ÊP.  1987.  Map Projections--A Working Manual. U.ÊS. Geological Survey Professional Paper 1395. 			Washington,  DC: U.ÊS. Government Printing Office.		*/			public MesquiteNumber Height = new MesquiteNumber();   // point of perspective	public MesquiteNumber Radius = new MesquiteNumber();   // lambda-0	public MesquiteNumber standardLatitude = new MesquiteNumber();   // phi-0	public MesquiteNumber standardLongitude = new MesquiteNumber();   // lambda-0			protected double phi1=0.0;  // origin latitude	protected double lambda0 = 0.0;   // origin longitude	double R=3100.0;//	double R=6371.0;	double p=0.0;		/*.................................................................................................................*/  	public boolean parametersSpecified(){  		return (standardLongitude.isCombinable() && standardLatitude.isCombinable() && Height.isCombinable() && Radius.isCombinable());  	}	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {  		addMenuItem("Projection Parameters...", makeCommand("projectionParameters",  this));  		return super.startJob(arguments,condition,commandRec,hiredByName);  	 }	/*_________________________________________________*/	/**   */   	public void processProjectionParameters(boolean duringOptimization){		super.processProjectionParameters(duringOptimization);		phi1 = GeographicData.getPolarLatitude(standardLatitude.getDoubleValue());		lambda0 = GeographicData.getPolarLongitude(standardLongitude.getDoubleValue());		R = Radius.getDoubleValue();		p = Height.getDoubleValue()/R+1.0;				if (getEllipsoid()) {		}   	}	/*.................................................................................................................*/   	public boolean convertToUnscaledProjectionCoordinates(double longitude, double latitude, MesquiteNumber x, MesquiteNumber y){   		if (MesquiteDouble.isCombinable(longitude) && MesquiteDouble.isCombinable(latitude)) {   			double phi = GeographicData.getPolarLatitude(latitude);   			double lambda = GeographicData.getPolarLongitude(longitude);			double lambdaDiff = getLambdaDiff90(lambda,lambda0,false);   			double cosc = Math.sin(phi1)*Math.sin(phi) + Math.cos(phi1)*Math.cos(phi)*Math.cos(lambdaDiff);   			if (cosc<1/p) {	   			x.setToUnassigned();	   			y.setToUnassigned();   				return false;   			}   			double kprime = (p-1)/(p-cosc);   						if (getEllipsoid()) {			}			else {   				x.setValue(R*kprime*Math.cos(phi)*Math.sin(lambdaDiff));				y.setValue(R*kprime*(Math.cos(phi1)*Math.sin(phi) -  Math.sin(phi1)*Math.cos(phi)*Math.cos(lambdaDiff)));			}   			return true;   		}   		else   			return false;   	}	/*.................................................................................................................*/   	public boolean convertFromProjectionCoordinates(double x, double y, MesquiteNumber longitude, MesquiteNumber latitude){   		double lambda;   		double phi;//		if (getEllipsoid()) {//		}//		else {	   		double ro = Math.sqrt(x*x +y*y);	   		double sqrt1 = Math.sqrt(1-ro*ro*(p+1)/(R*R*(p-1)));	   		double denom = R*(p-1)/ro+ro/(R*(p-1));	   		double c = Math.asin((p-sqrt1)/denom);	   		if (p<0 && ro>R*(p-1)/p)	   			c=Math.PI-c;			phi = Math.asin(Math.cos(c)*Math.sin(phi1)+ (y*Math.sin(c)*Math.cos(phi1)/ro));			double A = x*Math.sin(c);			double B = (ro*Math.cos(phi1)*Math.cos(c)-y*Math.sin(phi1)*Math.sin(c));			lambda = lambda0 + arctanRatio(A,B);//		}   		   		longitude.setValue(GeographicData.getRegularLongitude(lambda));   		latitude.setValue(GeographicData.getRegularLatitude(phi));   		return true;   	}	/*.................................................................................................................*/	public double getMinLatitude () {		double d = standardLatitude.getDoubleValue()-90.0;		if (d<-90.0) d=-90.0;		return d;	}	/*.................................................................................................................*/	public double getMaxLatitude () {		double d = standardLatitude.getDoubleValue()+90.0;		if (d>90.0) d=90.0;		return d;	}	/*.................................................................................................................*/	public double getMinLongitude () {		double d = standardLongitude.getDoubleValue()-90.0;		if (d<-180.0) d=360+d;		return d;	}	/*.................................................................................................................*/	public double getMaxLongitude () {		double d = standardLongitude.getDoubleValue()+90.0;		if (d>180.0) d=360-d;		return d;	}	/*.................................................................................................................*/	public boolean getEllipsoidFormAvailable(){		return false;	}	/*.................................................................................................................*/    	 public String getName() {		return "General (Vertical) Perspective Projection";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Converts to and from a Vertical Perspective map projection.";   	 }   	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return false;   	 }	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = super.getSnapshot(file);	 	temp.addLine("projectionParameters '" + standardLatitude.toString() + "' '" + standardLongitude.toString()+ "' '" + Height.toString()+ "' '" + Radius.toString()+"' ");	 	return temp;  	 }	/*.................................................................................................................*/	public String getProjectionParameters(CommandRecord commandRec){		String s = "";		s += "\t\t\t<Height>" + Height.toString() + "</Height>\n";		s += "\t\t\t<Radius>" + Radius.toString() + "</Radius>\n";		s += "\t\t\t<standardLongitude>" + standardLongitude.toString() + "</standardLongitude>\n";		s += "\t\t\t<standardLatitude>" + standardLatitude.toString() + "</standardLatitude>\n";		return s;	}	/*.................................................................................................................*/	public boolean readProjectionParameters(String contents, CommandRecord commandRec){		Parser subParser = new Parser();		subParser.setString(contents);		MesquiteString nextTag = new MesquiteString();		String subTagContent = subParser.getNextXMLTaggedContent(nextTag);		while (!StringUtil.blank(nextTag.getValue())) {			if ("Height".equalsIgnoreCase(nextTag.getValue())) {// here's the scaling factor, stored in subTagContent				Height.setValue(MesquiteDouble.fromString(subTagContent));			}			else if ("Radius".equalsIgnoreCase(nextTag.getValue())) {// here's the scaling factor, stored in subTagContent				Radius.setValue(MesquiteDouble.fromString(subTagContent));			}			else  if ("standardLongitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed longitude, stored in subTagContent				standardLongitude.setValue(MesquiteDouble.fromString(subTagContent));			}			else if ("standardLatitude".equalsIgnoreCase(nextTag.getValue())) {// here's the signed latitude, stored in subTagContent				standardLatitude.setValue(MesquiteDouble.fromString(subTagContent));			}			subTagContent = subParser.getNextXMLTaggedContent(nextTag);		}		return true;	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {     	 	if (checker.compare(this.getClass(), "Sets the parameters of the map", "[top bottom left right]", commandName, "projectionParameters")) {    	 		if (StringUtil.blank(arguments) && !commandRec.scripting()) {    	 			if (queryStandards())     	 				if ((standardLatitude.isCombinable() && standardLongitude.isCombinable() && Height.isCombinable() && Radius.isCombinable())) {						processProjectionParameters(false);						parametersChanged(null, commandRec); 					}    	 		}    	 		else {	    	 		standardLatitude.setValue(MesquiteDouble.fromString(parser.getFirstToken(arguments)));	     	 		standardLongitude.setValue(MesquiteDouble.fromString(parser.getNextToken()));	     	 		Height.setValue(MesquiteDouble.fromString(parser.getNextToken()));    	 			if (!(standardLatitude.isCombinable() && standardLongitude.isCombinable() && Height.isCombinable() && Radius.isCombinable()))	    	 			if (!commandRec.scripting())	    	 				queryStandards();    	 			if (!(standardLatitude.isCombinable() && standardLongitude.isCombinable()&& Height.isCombinable() && Radius.isCombinable()))	    	 			return null;	    	 		else  {					processProjectionParameters(false);	    	 			parametersChanged(null, commandRec); 	    	 		}    	 		}    	 	} 	 	else       	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 }	/*.................................................................................................................*/	public boolean queryStandards() {		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog queryDialog = new ExtensibleDialog(containerOfModule(), "Projection Parameters",  buttonPressed);		queryDialog.addLabel("Parameters of Projection", Label.CENTER);		DoubleField RField = queryDialog.addDoubleField("Radius (km):", Radius.getDoubleValue(),8);		DoubleField PField = queryDialog.addDoubleField("Height above surface (km):", Height.getDoubleValue(),8);		DoubleField latField = queryDialog.addDoubleField("Standard latitude:", standardLatitude.getDoubleValue(),8,-90.0, 90.0);		DoubleField  longField = queryDialog.addDoubleField("Standard longitude:", standardLongitude.getDoubleValue(),8,-180.0, 180.0);		String s = getStringDescribingLatLongs();		queryDialog.appendToHelpString(s);		queryDialog.completeAndShowDialog(true);					boolean ok = (queryDialog.query()==0);		MesquiteBoolean success = new MesquiteBoolean(true);				if (ok) {			Radius.setValue(RField.getValue());  // error checking!			Height.setValue(PField.getValue());  // error checking!//Debugg.println("p: " + Height.getDoubleValue());			standardLatitude.setValue(latField.getValue(success)); 			standardLongitude.setValue(longField.getValue(success));  		}				queryDialog.dispose();   		 		if (!success.getValue()) {			discreetAlert(CommandRecord.nonscriptingRecord, "Some values are out of bounds; these values will be reset to their previous values.");		}   		return ok;	}	/*.................................................................................................................*/	public double evaluate(MesquiteDouble param, Object param2){			return 0;	}	/*.................................................................................................................*	public double evaluate(double[] x, Object param){		if (x == null || x.length != 3) {			return 0;		}		if ( x[0]<=0.0)			return MesquiteDouble.veryLargeNumber;		if (x[1]>90.0 || x[1]<-90.0)			return MesquiteDouble.veryLargeNumber;		if (x[2]>90.0 || x[2]<-90.0)			return MesquiteDouble.veryLargeNumber;		scale.setValue(x[0]);  		standardLatitude.setValue(x[1]);  		standardLongitude.setValue(x[2]); 		processProjectionParameters(true);		return getMismatch();	}	/*.................................................................................................................*/	public double evaluate(double[] x, Object param){		if (x == null || x.length != 4) {			return 0;		}		if (x[0]>90.0 || x[0]<-90.0)			return MesquiteDouble.veryLargeNumber;		if (x[1]>90.0 || x[1]<-90.0)			return MesquiteDouble.veryLargeNumber;		if (x[2]<=0.0)			return MesquiteDouble.veryLargeNumber;		if (x[3]<=0.0)			return MesquiteDouble.veryLargeNumber;		standardLatitude.setValue(x[0]);  		standardLongitude.setValue(x[1]); 		Height.setValue(x[2]); 		Radius.setValue(x[3]); 		processProjectionParameters(true);		double score = getMismatch();		reportOptimizationToUser(score);		return score;	}	/*.................................................................................................................*/    	 public void setParametersToCalibrationPoint(int j){		if (calibrations[j]!=null) {			standardLatitude.setValue(calibrations[j].getLatitude().getDoubleValue());  			standardLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 			Height.setValue(Math.abs(calibrations[j].getLongitude().getDoubleValue()*50)); 			Radius.setValue(Math.abs(calibrations[j].getLongitude().getDoubleValue()*100)); 		}    	 }	/*.................................................................................................................*/    	 public void setParametersToTwoCalibrationPoints(int i, int j){ 		if (calibrations[i]!=null) {			standardLatitude.setValue(calibrations[i].getLatitude().getDoubleValue());  			Height.setValue(Math.abs(calibrations[i].getLatitude().getDoubleValue()*20)); 			Radius.setValue(Math.abs(calibrations[i].getLatitude().getDoubleValue()*120)); 		} 		if (calibrations[j]!=null) {			standardLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 		}   	 }	/*.................................................................................................................*/    	 public int getNumParameters (){    	 	return 4;    	 }	/*.................................................................................................................*/		double HeightStored, standardLatitudeStored, standardLongitudeStored, RadiusStored; 	/*.................................................................................................................*/    	 public void storeParameters() {		RadiusStored = Radius.getDoubleValue();  		HeightStored = Height.getDoubleValue();  		standardLatitudeStored = standardLatitude.getDoubleValue();  		standardLongitudeStored =standardLongitude.getDoubleValue();      	 }	/*.................................................................................................................*/    	 public void recoverStoredParameters() {		Radius.setValue(RadiusStored);  		Height.setValue(HeightStored);  		standardLatitude.setValue(standardLatitudeStored);  		standardLongitude.setValue(standardLongitudeStored);      	 }	/*.................................................................................................................*/    	 public void setParametersIfUnassigned(boolean setEvenIfAssigned) {		if (!Radius.isCombinable() || setEvenIfAssigned)			Radius.setValue(RandomBetween.getDouble(1000.0,10000.0));  		if (!Height.isCombinable() || setEvenIfAssigned)			Height.setValue(RandomBetween.getDouble(100.0,5000.0));  		if (!standardLatitude.isCombinable() || setEvenIfAssigned)			standardLatitude.setValue(RandomBetween.getDouble(-90.0,90));  		if (!standardLongitude.isCombinable() || setEvenIfAssigned)			standardLongitude.setValue(RandomBetween.getDouble(-180.0,180));      	 }	/*.................................................................................................................*    	 public double[] getParamArray() {    	 	double[] x = new double[3];    	 	x[0] = scale.getDoubleValue();    	 	x[1] = standardLatitude.getDoubleValue();    	 	x[2] = standardLongitude.getDoubleValue();    	 	return x;    	 }	/*.................................................................................................................*/    	 public double[] getParamArray() {    	 	double[] x = new double[4];    	 	x[0] = standardLatitude.getDoubleValue();    	 	x[1] = standardLongitude.getDoubleValue();    	 	x[2] = Height.getDoubleValue();    	 	x[3] = Radius.getDoubleValue();    	 	return x;    	 }	/*.................................................................................................................*/   	public String getParameters() { 		return "";   	}   	    	 }