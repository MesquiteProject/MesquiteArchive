/* Mesquite.cartographer source code.  Copyright 2005 D. Maddison, W. Maddison. Version 1.0, April 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.lib;/*~~  */import java.util.*;import java.awt.*;import java.awt.event.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.cartographer.lib.*;public abstract class CalibratedStandProj extends CalibratedMapProjection implements Evaluator  {		MesquiteBoolean ellipsoidForm = new MesquiteBoolean(false);	protected double a = 6378206.4;   // equatorial radius for ellipsoid	protected double e = 0.0822719;   //eccentricity for ellipsoid		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		super.startJob(arguments,condition,commandRec,hiredByName);  		zeroCalibrationPoints();  		  		return true;  	 }  	 	/*.................................................................................................................*/	public void addParameterMenus() {	 	if (getNumParameters()>0)	 		addMenuItem("Optimize Parameters...", makeCommand("optimizeParameters",  this));  		if (getEllipsoidFormAvailable()) {			addCheckMenuItem( null, "Ellipsoid Form", makeCommand("ellipsoidForm",  this), ellipsoidForm);  			addMenuItem("Ellipsoid Parameters...", makeCommand("ellipsoidParameters",  this));		}	}	/*.................................................................................................................*/	public boolean hasParameters() {		return true;	}	/*.................................................................................................................*/	public void endJob() {		if (calibrationTreeTool!=null)			((MesquiteWindow)containerOfModule()).removeTool(calibrationTreeTool);		if (calibrationTool!=null)			((MesquiteWindow)containerOfModule()).removeTool(calibrationTool);		super.endJob();	} 	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = super.getSnapshot(file);  		if (getEllipsoidFormAvailable()) {  			temp.addLine("ellipsoidForm " + ellipsoidForm.toOffOnString());	 		temp.addLine("ellipsoidParameters '" + a + "' '" + e + "' ");  		}	 	return temp;  	 }	/*.................................................................................................................*/	public boolean getEllipsoidFormAvailable(){		return false;	}	/*.................................................................................................................*/	public boolean getEllipsoid(){		return ellipsoidForm.getValue();	}	/*.................................................................................................................*/	public void setEllipsoid(boolean ell){		ellipsoidForm.setValue(ell);	}	/*.................................................................................................................*/	public String getProjectionParameters(CommandRecord commandRec){		return "";	}	/*.................................................................................................................*/	public String getXMLParameters(CommandRecord commandRec){		StringBuffer buffer = new StringBuffer(1000);		String s = getProjectionParameters(commandRec);		if (!StringUtil.blank(s))			buffer.append("\t\t<projectionParameters>\n" + s + "\t\t</projectionParameters>\n");		if (getEllipsoidFormAvailable() && getEllipsoid())			buffer.append("\t\t<form>ellipsoid</form>\n");		else			buffer.append("\t\t<form>sphere</form>\n");		if (getEllipsoidFormAvailable()) {			buffer.append("\t\t<ellipsoidParameters>\n");			buffer.append("\t\t\t<equatorialRadius>" + a + "</equatorialRadius>\n");			buffer.append("\t\t\t<eccentricity>" + e + "</eccentricity>\n");			buffer.append("\t\t</ellipsoidParameters>\n");		}		return buffer.toString();	}	/*.................................................................................................................*/	public boolean readParameterXML(MesquiteString nextTag, String tagContent, CommandRecord commandRec){		Parser subParser = new Parser();		String subTagContent;		Parser parser = new Parser();		if ("ellipsoidParameters".equalsIgnoreCase(nextTag.getValue())) {			subParser.setString(tagContent);			subTagContent = subParser.getNextXMLTaggedContent(nextTag);			while (!StringUtil.blank(nextTag.getValue())) {				if ("equatorialRadius".equalsIgnoreCase(nextTag.getValue())) {  					a = MesquiteInteger.fromString(subTagContent);				}				else if ("eccentricity".equalsIgnoreCase(nextTag.getValue())) {					e = MesquiteInteger.fromString(subTagContent);				}				subTagContent = subParser.getNextXMLTaggedContent(nextTag);			}		}		else if ("form".equalsIgnoreCase(nextTag.getValue())) {			if ("sphere".equalsIgnoreCase(tagContent))				setEllipsoid(false);			else if ("ellipsoid".equalsIgnoreCase(tagContent))				setEllipsoid(true);		}		else if ("projectionParameters".equalsIgnoreCase(nextTag.getValue())) {			if (!readProjectionParameters(tagContent, commandRec))				return false;		}		return true;	}	/*.................................................................................................................*/	public boolean loadCalibration(CommandRecord commandRec, boolean readParameters) {//Debugg.println("******* load");	    				MesquiteString directoryName= new MesquiteString();		MesquiteString fileName= new MesquiteString();		String filePath = MesquiteFile.openFileDialog("Choose Calibration File...", directoryName, fileName);		if (filePath==null)			return sorry(commandRec, "Calibration file was not chosen.");		MesquiteFile dataFile =MesquiteFile.open(true, filePath);		if (dataFile==null || StringUtil.blank(dataFile.getFileName())) 			return sorry(commandRec, "Calibration file could not be found.");			//Debugg.println("******* before read");	    				String contents = MesquiteFile.getFileContentsAsString(filePath);		if (!StringUtil.blank(contents)) 			if (!readCalibration(contents, commandRec,readParameters))				return sorry(commandRec, "Calibration information could not be read.  It may not be a valid calibration file."); //D!//Debugg.println("******* after read");	    				if (!commandRec.scripting()) {			processProjectionParameters(false);//			calcProjectionScalesAndOffsets();			parametersChanged(null, commandRec);			//			ownerModuleParametersChanged(commandRec);		}		return true;	}	/*.................................................................................................................*/	public boolean queryEllipsoidParameters() {		MesquiteInteger buttonPressed = new MesquiteInteger(0);		MesquiteDouble mdA = new MesquiteDouble(a);		MesquiteDouble mdE = new MesquiteDouble(e);		EllipsoidParametersDialog dialog = new EllipsoidParametersDialog (this, buttonPressed, mdA,  mdE);					boolean ok = (buttonPressed.getValue()==0);				if (ok) {			a = mdA.getValue(); 			e = mdE.getValue();		}   		return ok;	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {     	 	if (checker.compare(this.getClass(), "Sets the parameters of the ellipsoid", "[top bottom left right]", commandName, "ellipsoidParameters")) {    	 		if (StringUtil.blank(arguments) && !commandRec.scripting()) {    	 			if (queryEllipsoidParameters())     	 				if (MesquiteDouble.isCombinable(a) && MesquiteDouble.isCombinable(e)) {    	 					processProjectionParameters(false);						parametersChanged(null, commandRec); 					}    	 		}    	 		else {	    	 		a = MesquiteDouble.fromString(parser.getFirstToken(arguments));	     	 		e = MesquiteDouble.fromString(parser.getNextToken());	 	 		if (!(MesquiteDouble.isCombinable(a) && MesquiteDouble.isCombinable(e)))	    	 			if (!commandRec.scripting())	    	 				queryEllipsoidParameters();	 	 		if (!(MesquiteDouble.isCombinable(a) && MesquiteDouble.isCombinable(e)))	    	 			return null;	    	 		else  {					processProjectionParameters(false);	    	 			parametersChanged(null, commandRec); 	    	 		}    	 		}    	 	}      	 	else if (checker.compare(this.getClass(), "Sets whether or not the ellipsoidForm is used.", "[on or off]", commandName, "ellipsoidForm") && getEllipsoidFormAvailable()) {    	 		boolean current = ellipsoidForm.getValue();    	 		ellipsoidForm.toggleValue(parser.getFirstToken(arguments));    	 		if (current!=ellipsoidForm.getValue()) {    	 			processProjectionParameters(false);    	 			parametersChanged(null, commandRec);    	 		}    	 	}        	 	else if (checker.compare(this.getClass(), "Removes all calibration points.", "", commandName, "removeCalibration")) {    	 		zeroCalibrationPoints();    	 		parametersChanged(null, commandRec); //   	 		ownerModuleParametersChanged(commandRec);    	 	}       	 	else if (checker.compare(this.getClass(), "Optimizes parameter values based upon calibration points.", "", commandName, "optimizeParameters")) {    	 		if (getNumParameters()>0 && optimizeParameters(commandRec)) {    	 			//showCalibration.setValue(true);    	 			parametersChanged(null, commandRec);    	 		}    	 	}	 	else       	 		return super.doCommand(commandName, arguments, commandRec, checker);    	 	return null;    	 } 	/*.................................................................................................................*/	public double evaluate(MesquiteDouble param, Object param2){		return 0;	}	/*.................................................................................................................*/	public abstract double evaluate(double[] x, Object param);	/*.................................................................................................................*/    	 public double getMismatch() {		calcProjectionScalesAndOffsets();		int totalMismatch = 0;		int mismatch = 0;//Debugg.println("getMismatch");		for (int j = 0; j<maxCalibrations; j++) {			if (calibrations[j]!=null) {				calibrations[j].setExpectedScreenValues();				mismatch=calibrations[j].calibrationMismatch(margin);				if (MesquiteInteger.isCombinable(mismatch)) {					totalMismatch+= mismatch;				}				else					totalMismatch+= 10000;  // give it some fairly large, somewhat arbitrary amount, so that there is a penalty for having a calibration point off-map			}		}//Debugg.println("  totalmismatch: " + totalMismatch);		return Math.abs(totalMismatch*1.0);    	 }	/*.................................................................................................................*/    	 public abstract void setParametersIfUnassigned(boolean setEvenIfAssigned);	/*.................................................................................................................*/    	 public abstract double[] getParamArray() ;	/*.................................................................................................................*/    	 public abstract void storeParameters();	/*.................................................................................................................*/    	 public abstract void recoverStoredParameters();	/*.................................................................................................................*/    	 public abstract void setParametersToCalibrationPoint(int j);	/*.................................................................................................................*/    	 public abstract void setParametersToTwoCalibrationPoints(int i, int j);	/*.................................................................................................................*/    	 public abstract int getNumParameters ();	/*.................................................................................................................*/	public boolean aborted = false;	/*.................................................................................................................*/    	 public boolean checkProgressIndicator(ProgressIndicator progIndicator, String s, int count, CommandRecord commandRec) {    	 	logln(s);		if (progIndicator != null) {			if (progIndicator.isAborted()) {				if (!AlertDialog.query(containerOfModule(), "Continue with Optimization?", "Continue with Optimization?", "Continue", "Cancel", 1)) {					progIndicator.goAway();					aborted = true;					return false;				}			}			progIndicator.setText(s);			progIndicator.setCurrentValue(count);		}		return true;	}	ProgressIndicator progIndicator =null;	boolean reportToUser= true;	/*.................................................................................................................*/	public void reportOptimizationToUser(double score){		if (progIndicator!=null && reportToUser) {			progIndicator.setText("Current score during optimization: " + score);//			logln("    score: " + score);		}	}	/*.................................................................................................................*/    	 public boolean optimizeParameters(CommandRecord commandRec) {		MesquiteInteger buttonPressed = new MesquiteInteger(0);		MesquiteBoolean doOptimize = new MesquiteBoolean(true);		MesquiteBoolean forceOptimization = new MesquiteBoolean(false);		aborted = false;				if (!commandRec.scripting()) {			OptimizeProjectionDialog dialog = new OptimizeProjectionDialog(this, buttonPressed,doOptimize, forceOptimization);			if (!doOptimize.getValue())				return false;		}									int numPoints=getNumberOfCalibrationPoints();		if (numPoints<3) { 			sorry(commandRec, "At least three calibration points are required for optimization.");			return false;		}		setParametersIfUnassigned(forceOptimization.getValue());				double score=MesquiteDouble.unassigned;		double best=numPoints*4;		double acceptableValue;		if (forceOptimization.getValue())			acceptableValue = MesquiteDouble.unassigned;		else			acceptableValue = numPoints*1.5;				if (getFullySpecified()) {			score = getMismatch();			if (!MesquiteDouble.isCombinable(score))				logln("Mismatch before optimization: "+ score);  			best = score;  		}				if (best>numPoints*2 || forceOptimization.getValue()) {	 		Optimizer opt = new Optimizer(this); 			double[] paramArray;			int totalIterations = numPoints + numPoints*(numPoints-1);			progIndicator = new ProgressIndicator(getProject(),getName(), "Optimizing Projection Parameters", totalIterations, true);			if (progIndicator!=null) {				progIndicator.start();				if (MesquiteDouble.isCombinable(score))					progIndicator.setText("Initial optimization score: " + score);			}			if (getFullySpecified()) { 				paramArray=getParamArray();//Debugg.println("3");				score = opt.optimize(paramArray,acceptableValue,this,progIndicator);//Debugg.println("4");				storeParameters();				logln("Initial optimization score: " + score);				best = score;			}						boolean leaveLoop = false;			int count = 0;						if (best>numPoints*2)				for (int j = 0; j<maxCalibrations && !leaveLoop; j++) {					if (calibrations[j]!=null) {						setParametersToCalibrationPoint(j);						paramArray = getParamArray();						score = opt.optimize(paramArray, acceptableValue,this,progIndicator);						if (score< best) {							storeParameters();							//parametersChanged(null,commandRec);							best = score;							if (best<numPoints*2) {								checkProgressIndicator(progIndicator,"   Iteration " + j + ", best: " + best + ", iteration score: " + score,count, commandRec);								break;							}						}						if (!checkProgressIndicator(progIndicator,"Iteration " + j + ", best: " + best + ", iteration score: " + score,count, commandRec)) {							aborted = true;							break;						}					}				}			if (best>numPoints*2 && !aborted)				for (int j = 0; j<maxCalibrations && !leaveLoop; j++) {					if (calibrations[j]!=null) {							for (int i=j+1; i<maxCalibrations && !leaveLoop; i++) {								if (calibrations[i]!=null) {									count++;									setParametersToTwoCalibrationPoints(i,j);									paramArray = getParamArray();									score = opt.optimize(paramArray,acceptableValue,this,progIndicator);									if (score< best) {										storeParameters();										//parametersChanged(null,commandRec);										best = score;										if (best<numPoints*2) {											checkProgressIndicator(progIndicator,"   Iteration (second round) " + count + ", best: " + best + ", iteration score: " + score, count, commandRec);											leaveLoop = true;										}									}									if (!checkProgressIndicator(progIndicator,"   Iteration (second round) " + count + ", best: " + best + ", iteration score: " + score, count, commandRec)){										aborted = true;										leaveLoop =true;									}								}							}					}				}			recoverStoredParameters();			processProjectionParameters(false);			double perPoint = best/numPoints;			logln("Mismatch after optimization: "+ best + "  ("+numPoints+" calibration points, " + MesquiteDouble.toString(perPoint,3) + " per point)");						if (aborted) 				logln("Optimization stopped.");							if (progIndicator!=null) 				progIndicator.goAway();						if (perPoint>4.0)	    	 		if (aborted)	    	 			discreetAlert(commandRec, "The optimization yielded a poor match.  Try letting the optimization run longer, or adding more calibration points or checking the accuracy of the existing calibration points.");	    	 		else	    	 			discreetAlert(commandRec, "The optimization yielded a poor match.  Try adding more calibration points or checking the accuracy of the existing calibration points.");		}		else			logln("No optimization needed.");				return true;    	 }	/*.................................................................................................................*/   	public String getParameters() { 		return "";   	}	/*.................................................................................................................*/    	 public String getName() {		return "Calibrated Map Projection With Parameters";   	 }   	public boolean isPrerelease(){   		return true;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return false;   	 }   	 }/*=======================================================================*/class OptimizeProjectionDialog extends ExtensibleDialog  {	CalibratedStandProj projectionTask;		public OptimizeProjectionDialog (CalibratedStandProj ownerModule, MesquiteInteger buttonPressed, MesquiteBoolean doOptimize, MesquiteBoolean forceOptimize){		super(ownerModule.containerOfModule(), "Optimize Projection Parameters", buttonPressed);		this.projectionTask = ownerModule;		String s = "This feature will attempt to find the parameters for the projection.  It finds the parameters that optimize the match ";		s+= "between where the calibration points have been placed by the user and where they would be placed by the projection. ";		s+= "The optimization stops if the observed and projected calibration points are on average within two pixels. ";		s+= "If optimization finishes and the observed and projected calibration points are not close enough (>3 pixels part on average), then add more ";		s+= "calibration points, and check to make sure all calibration points are accurate. The parameters will be more precise with more calibration points. ";		if (projectionTask.getEllipsoid())			s+= "\n\nIt does not attempt to find the optimal ellipsoid parameters.";		appendToHelpString(s);		setHelpURL(ownerModule,"calibration.html");				addLabel("Optimize Projection Parameters", Label.CENTER);//		Checkbox forceBox= addCheckBox("force optimize", forceOptimize.getValue());				completeAndShowDialog("Optimize", "Cancel",true,null);		int button = query();		if (buttonPressed!=null)			buttonPressed.setValue(button);		if (doOptimize!=null)			doOptimize.setValue(button==0);		boolean ok = (button==0);		MesquiteBoolean success = new MesquiteBoolean(true);		if (ok)  {//			forceOptimize.setValue(forceBox.getState());		}		dispose();						}}/*=======================================================================*/class EllipsoidParametersDialog extends ExtensibleDialog implements ItemListener  {	CalibratedMapProjection projectionTask;	Choice ellipsoidChoice;	static final String grs80 = "GRS 80";	static final String wgs72 = "WGS 72";	static final String clarke66 = "Clarke 1866";	static final String clarke80 = "Clarke 1880";	static final String bessel = "Bessel";	static final String international = "International";	static final String airy = "Airy";	static final String everest = "Everest";	static final String australian = "Australian";	String[] ellipsoids = {"Choose Ellipsoid", clarke66, clarke80, bessel, international, grs80, wgs72, airy, everest, australian};	DoubleField aField;	DoubleField eField;	public EllipsoidParametersDialog (CalibratedMapProjection ownerModule, MesquiteInteger buttonPressed, MesquiteDouble a, MesquiteDouble e){		super(ownerModule.containerOfModule(), "Ellipsoid Form Parameters", buttonPressed);		this.projectionTask = ownerModule;		String s = "Enter here the parameters of the ellipsoid. Eccentricity is equal to  the square root of 2f-f*f, where f is the flattening, often expressed in a form such as 'f=1/298'.  Values of some standard ellipsoids are provided in the menu. ";		appendToHelpString(s);		addLabel("Parameters of Ellipsoid", Label.CENTER);				ellipsoidChoice = addPopUpMenu ("Standard Ellipsoids", ellipsoids, 0);		ellipsoidChoice.addItemListener(this);		aField = addDoubleField("Equatorial Radius (meters):", a.getValue(),12);		eField = addDoubleField("Eccentricity:", e.getValue(),12);		completeAndShowDialog(true);		int button = query();		if (buttonPressed!=null)			buttonPressed.setValue(button);		boolean ok = (button==0);		if (ok)  {			if (a!=null)				a.setValue(aField.getValue());  // error checking!			if (e!=null)				e.setValue(eField.getValue());  // error checking!		}		dispose();	}/*.................................................................................................................*  	public void calcEccentricity (String s, double f) {  	double e = 1.0/f;  	e = 2*e - e*e;  	e = Math.sqrt(e);//  	Debugg.println(s + ": " + e);  	}/*.................................................................................................................*/  	public void itemStateChanged(ItemEvent e){  		if (e.getItemSelectable() == ellipsoidChoice){	  		if (clarke66.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378206.4);	  			eField.setValue(0.0822719);	  		}	  		else if (international.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378388.0);	  			eField.setValue(0.0819919);	  		}	  		else if (bessel.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6377397.2);	  			eField.setValue(0.08183388);  	  		}	  		else if (australian.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378160.0);	  			eField.setValue( 0.0819575);	  		}	  		else if (grs80.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378137);	  			eField.setValue(0.08195650);  	  		}	  		else if (wgs72.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378135);	  			eField.setValue(0.08181882); 	  		}	  		else if (clarke80.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6378249.1);	  			eField.setValue(0.082484102);  	  		}	  		else if (airy.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(637563.4);	  			eField.setValue(0.081674050); 	  		}	  		else if (everest.equalsIgnoreCase((String)e.getItem())) {	  			aField.setValue(6377276.3);	  			eField.setValue(0.081473211);  	  		}  		}  	}}