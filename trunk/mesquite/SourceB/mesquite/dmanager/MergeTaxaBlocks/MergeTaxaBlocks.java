/* Mesquite module ~~ Copyright 1997-2001 W. & D. Maddison*/package mesquite.dmanager.MergeTaxaBlocks;/*~~  */import java.applet.*;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.lists.lib.*;/** ======================================================================== */public class MergeTaxaBlocks extends TaxaBlocksListUtility { 	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		return true;	}   	/** if returns true, then requests to remain on even after operateData is called.  Default is false*/   	public boolean pleaseLeaveMeOn(){   		return false;   	}   	/** Called to operate on the taxa blocks.  Returns true if altered*/   	public boolean operateOnTaxas(ListableVector taxas, CommandRecord commandRec){   						if (taxas == null || taxas.size()<2) {				alert("Can't merge taxa when there is only one set of taxa available.  If the other set of taxa is in a separate file, link or include the file before asking to merge taxa.");				return false;			}			else {				while (true) {					Listable[] ts = ListDialog.queryListMultiple(containerOfModule(), "Choose blocks of taxa", "Choose 2 or more blocks of taxa to merge into one", MesquiteString.helpString, taxas, null);					if (ts==null || ts.length == 0)						return false;					if (ts.length==1)						alert("Must choose at least two sets of taxa to merge.");					else {						if (AlertDialog.query(containerOfModule(), "Proceed?", "After the taxa blocks are merged, the files will be SAVED and REOPENED.  You might want to make a backup copy first.  (On reopening, a notice will appear that identical taxa blocks have been found.  Ignore it.) Are you sure you want to do this?", "Yes", "No")) {							if (AlertDialog.query(containerOfModule(), "Continue?", "To merge taxa blocks, you will specify a name for the merged set of taxa, you may be asked to match equivalent taxa in the merged sets, and then the taxa blocks will be merged.  Continue?", "Yes", "No")) {								if (!mergeTaxa(ts, true)) {									return false;								}								String commands = "newThread; saveFiles; getProjectID; Integer.id *It; tell Mesquite; getWindowAutoShow; String.was *It; windowAutoShow off; closeProjectByID *Integer.id; openFile ";								commands +=  StringUtil.tokenize(MesquiteFile.composePath(getProject().getHomeDirectoryName(), getProject().getHomeFileName())) + "; ifNotExists It;  showAbout; endIf; windowAutoShow *String.was; endTell;";								Puppeteer p = new Puppeteer(this);								MesquiteInteger pos = new MesquiteInteger(0);								p.execute(getFileCoordinator(), commands, pos, "", false);							}						}						return true;					}				}   	 		}	}	/*.................................................................................................................*/   	private boolean mergeTaxa(Listable[] ts, boolean matchTaxa){   		if (ts==null || ts.length<2)   			return false;   		int[] oldSizes = new int[ts.length];   		for (int i = 0; i<ts.length; i++){   			Taxa t = (Taxa)ts[i];   			oldSizes[i]=t.getNumTaxa();   			t.incrementNotifySuppress();   		}   		//query here if really want to do it; say that if do it, currently should save file then reread.		String name = getProject().getTaxas().getUniqueName("Merged");   		name = MesquiteString.queryString(containerOfModule(), "Name", "Name of merged set of taxa", name);   		if (name==null) {	   		for (int i = 0; i<ts.length; i++){	   			Taxa t = (Taxa)ts[i];	   			t.decrementNotifySuppress();	   		}	   		return false;		}   		Taxa taxaZero =  (Taxa)ts[0];   		for (int i = 1; i<ts.length; i++){   			Taxa taxaI = (Taxa)ts[i];			MesquiteBoolean answer = new MesquiteBoolean(true);	   		while (matchTaxa && answer.getValue()){ //match taxa with taxaZero	   					   		int numberInCommon = 0; //number in common between taxaZero & taxaI		   		for (int j = 0;j<taxaZero.getNumTaxa(); j++){   					Taxon found = taxaI.getTaxon(taxaZero.getName(j));   					if (found!=null)   						numberInCommon++;				}		   		int numberInCommon2 = 0; //number in common between taxaZero & taxaI		   		for (int j = 0;j<taxaI.getNumTaxa(); j++){   					Taxon found = taxaZero.getTaxon(taxaI.getName(j));   					if (found!=null)   						numberInCommon2++;				}				if (numberInCommon2!=numberInCommon) {					alert("There are problems merging the taxa blocks.  It is possible that one or more of the blocks contains duplicate taxa names.  You must fix this before continuing.");					answer.setValue(false);					return false;				}									if (taxaI.getNumTaxa() - numberInCommon == 0 || taxaZero.getNumTaxa() - numberInCommon == 0)					answer.setValue(false);				else {					Taxon[] zeroUnmatched = new Taxon[(taxaZero.getNumTaxa() - numberInCommon)];			   		int count =0;			   		for (int j = 0;j<taxaZero.getNumTaxa(); j++){	   					Taxon found = taxaI.getTaxon(taxaZero.getName(j));	   					if (found==null)	   						zeroUnmatched[count++] = taxaZero.getTaxon(j);					}					ListableVector.sort(zeroUnmatched);					Taxon[] iUnmatched = new Taxon[(taxaI.getNumTaxa() - numberInCommon)];			   		count =0;			   		for (int j = 0;j<taxaI.getNumTaxa(); j++){	   					Taxon found = taxaZero.getTaxon(taxaI.getName(j));	   					if (found==null)	   						iUnmatched[count++] = taxaI.getTaxon(j);					}/*taxaZero.getNumTaxa() 193 taxaI.getNumTaxa() 187 ts.length 2 zeroUnmatched.length 8iUnmatched.length 2 numberInCommon 185Exception occurred during event dispatching:java.lang.ArrayIndexOutOfBoundsException: 2*/					ListableVector.sort(iUnmatched);										MatchTaxaDialog mtd = new MatchTaxaDialog (containerOfModule(),  this, answer, taxaZero,zeroUnmatched, taxaI,iUnmatched);										if (answer.getValue()) {						int[] selectedZero = mtd.selectedZero;						int[] selectedI = mtd.selectedI;						if (selectedI==null || selectedZero== null || selectedI.length!=selectedZero.length  || selectedI.length==0)							alert("Some taxa need to be selected, and the number of taxa selected in each list must be the same");						else {							for (int im = 0; im<selectedI.length; im++) {								String newName  = iUnmatched[selectedI[im]].getName() + "-" + zeroUnmatched[selectedZero[im]].getName();								iUnmatched[selectedI[im]].setName(newName);								zeroUnmatched[selectedZero[im]].setName(newName);							}						}					}				}	   		}   			for (int prev = 0; prev< i; prev++){   				Taxa taxaPrev = (Taxa)ts[prev];   				   				for (int tI=0; tI<taxaI.getNumTaxa(); tI++){ //for each taxon in i, add to prev if not present   					Taxon found = taxaPrev.getTaxon(taxaI.getName(tI));   					if (found==null) {   						taxaPrev.addTaxa(taxaPrev.getNumTaxa()-1, 1, false);   						taxaPrev.setTaxonName(taxaPrev.getNumTaxa()-1, taxaI.getName(tI));   					}   				}   			}			for (int tI=0; tI<taxaZero.getNumTaxa(); tI++){ //for each taxon in i, add to prev if not present				Taxon found = taxaI.getTaxon(taxaZero.getName(tI));				if (found==null) {					taxaI.addTaxa(taxaI.getNumTaxa()-1, 1, false);					taxaI.setTaxonName(taxaI.getNumTaxa()-1, taxaZero.getName(tI));				}			}   		}	   		for (int i = 0; i<ts.length; i++){   			Taxa t = (Taxa)ts[i];   			t.setName(name);   			if (i>0)   				t.setDuplicate(true);			t.notifyListeners(this,  new Notification(MesquiteListener.PARTS_ADDED, new int[] {oldSizes[i]-1, t.getNumTaxa()-oldSizes[i]}));    			t.decrementNotifySuppress();   		}   		return true;   	}	/*.................................................................................................................*/    	 public String getName() {		return "Merge taxa blocks";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Merges blocks of taxa into a single block.";   	 }}	/*===============================================*//** A dialog box to match taxa for merging*/class MatchTaxaDialog extends MesquiteDialog {	java.awt.List listZero, listI;	MesquiteBoolean answer;	int[] selectedZero=null;	int[] selectedI = null;	//also take as input minimum and maximum allowed?	public MatchTaxaDialog (Frame parent,  MesquiteModule ownerModule, MesquiteBoolean answer, Taxa taxaZero, Taxon[] zeroUnmatched, Taxa taxaI, Taxon[] iUnmatched) {		super("Match Taxa");		this.answer = answer;		answer.setValue(false);		setLayout(new BorderLayout());		Panel topPanel = new Panel();		Panel middlePanel = new Panel();		Panel bottomPanel = new Panel();		add(topPanel, "North");		add(middlePanel, "Center");		add(bottomPanel, "South");		setBackground(ColorDistribution.light[ColorDistribution.getColorScheme(ownerModule)]);		Font f = new Font ("Dialog", Font.PLAIN, 12);		Label labName;		Label labName2;		topPanel.add( new Label ("Choose a taxon from each to indicate they represent the same taxon"));		Panel leftPanel = new Panel();		Panel rightPanel = new Panel();		leftPanel.setLayout(new BorderLayout());		leftPanel.add("North", labName = new Label ("Taxa :" + taxaZero.getName()));		leftPanel.add("South", listZero = new java.awt.List (16, false));		middlePanel.add(leftPanel);				for (int i=0; i<zeroUnmatched.length; i++) {			listZero.addItem(zeroUnmatched[i].getName());		}		Label blue = new Label("    ");		//blue.setBackground(Color.blue);		middlePanel.add(blue);				rightPanel.setLayout(new BorderLayout());		rightPanel.add("North", labName2 = new Label ("Taxa :" + taxaI.getName()));		rightPanel.add("South", listI = new java.awt.List (16, false));		middlePanel.add(rightPanel);		listI.setMultipleMode(true);		listZero.setMultipleMode(true);				for (int i=0; i<iUnmatched.length; i++)			listI.addItem(iUnmatched[i].getName());		Label yellow = new Label("  .... ");		yellow.setBackground(Color.yellow);		//bottomPanel.add(yellow);		Panel buttons = new Panel();		Button cancel;		Button ok;		buttons.add("West", cancel = new Button("Done"));		buttons.add("East", ok = new Button("Match"));						cancel.setFont(f);		ok.setFont(f);		labName.setFont(f);		labName2.setFont(f);		bottomPanel.add(buttons);		Label red = new Label(" ...  ");		red.setBackground(Color.red);		//bottomPanel.add(red);		setSize(500, 400);		MesquiteWindow.centerWindow(this);		setVisible(true);	}		public void buttonHit(String buttonLabel, Button button) {		if (buttonLabel.equalsIgnoreCase("Match")) {			try {				answer.setValue(true);				selectedI = listI.getSelectedIndexes();				selectedZero = listZero.getSelectedIndexes();			}			catch (NumberFormatException eq){}		}		else			answer.setValue(false);	}	}