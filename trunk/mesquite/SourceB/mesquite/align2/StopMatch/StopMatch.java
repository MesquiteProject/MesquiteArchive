/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align2.StopMatch; import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.molec.lib.*;/* ======================================================================== */public class StopMatch extends DataMatcher {	CharacterState csOriginal, csCandidate;	GeneticCode geneticCodeTask;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){		geneticCodeTask = (GeneticCode)hireEmployee(commandRec, GeneticCode.class, "Source of genetic code");		if (geneticCodeTask==null)			return false;		return true;	}   	/** Returns whether candidate stretch of matrix matches the data contained in the CharacterState array*/   	public double sequenceMatch(CharacterState[] csOriginalArray, int candidateTaxon, int candidateStartChar, MesquiteInteger candidateEndChar, CommandRecord commandRec){   		double numberOfMatches = 0.0;   		int basesCompared =0;   		   		for (int ic = 0; ic< csOriginalArray.length && ic+candidateStartChar < data.getNumChars(); ic++){   			csOriginal = csOriginalArray[ic];   			csCandidate = data.getCharacterState(csCandidate, ic+candidateStartChar, candidateTaxon);   			if (csOriginal.equals(csCandidate, false, true))   				numberOfMatches += 1.0;   			basesCompared++;   		}   		if (candidateEndChar!=null)   			candidateEndChar.setValue(MesquiteInteger.minimum(candidateStartChar + csOriginalArray.length-1, data.getNumChars()-1));   		if (basesCompared == 0)   			return 0;   		return numberOfMatches/basesCompared;	}	/*.................................................................................................................*/    	 public String getName() {		return "Stop Match";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Returns whether sequences are exact matches.";   	 }		/*.................................................................................................................*/    	 public boolean isPrerelease() {		return true;   	 }}