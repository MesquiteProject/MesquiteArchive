/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align2.RestEnzSearch; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;import mesquite.align2.lib.*;/* ======================================================================== */public class RestEnzSearch extends CategDataSearcher { 	MesquiteTable table;	CharacterData data;	int numSurroundingBases = 8;	RestEnzVector restEnzymeVector;	long[] dataArray = null;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName){ 		restEnzymeVector = new RestEnzVector();		return (restEnzymeVector.hasEnzymes());	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}	/*.................................................................................................................*/   	 public boolean isPrerelease(){   	 	return false;   	 }   	/** Called to search on the data in selected cells.  Returns true if data searched*/   	public boolean searchData(CharacterData data, MesquiteTable table, CommandRecord commandRec){		this.data = data;		if (!(data instanceof DNAData || data instanceof ProteinData)){			discreetAlert(commandRec, "Only DNA or protein data can be searched using this module.");			return false;		}		return searchSelectedTaxa(data,table, commandRec);	}	/*.................................................................................................................*/	/*.................................................................................................................*/   	public void searchOneTaxon(CharacterData data, int it, int icStart, int icEnd, CommandRecord commandRec){// first find the starting site   		int count = 0;   		int newStart = icStart-1;   		if (newStart<0)   			newStart=0;   		else {   			count=1;   			while (newStart>=0 && count<numSurroundingBases) {   // now let's cycle down until we've found enough full bases   				long state = ((CategoricalData)data).getState(newStart,  it);   				if (!CategoricalState.isInapplicable(state) && !CategoricalState.isUnassigned(state)) {   					if (count==numSurroundingBases || newStart<=0)   						break;   					count++;   				}   				newStart--;   			}   		}   		   		int cutPosition = count;   //position that needs to be included in a cutting// now find the ending site   		count = 0;   		int newEnd = icEnd+1;   		if (newEnd>=data.getNumChars())   			newEnd=data.getNumChars()-1;   		else {   			count=1;   			while (newEnd<data.getNumChars() && count<numSurroundingBases) {   // now let's cycle down until we've found enough full bases   				long state = ((CategoricalData)data).getState(newEnd,  it);   				if (!CategoricalState.isInapplicable(state) && !CategoricalState.isUnassigned(state)) {   					if (count==numSurroundingBases || newEnd>=data.getNumChars()-1)   						break;   					count++;   				}   				newEnd++;   			}   		}   		//   now find how much data is in this piece		int numBases = 0;		for (int i = newStart; i<= newEnd; i++)  {	   		long state = ((CategoricalData)data).getState(i,  it);   			if (!CategoricalState.isInapplicable(state) && !CategoricalState.isUnassigned(state)) {   				numBases++;   			}   		}// now create the dataArray and fill it with the data   		dataArray = new long[numBases];   		count = 0;		for (int i = newStart; i<= newEnd; i++)  {	   		long state = ((CategoricalData)data).getState(i,  it);   			if (!CategoricalState.isInapplicable(state) && !CategoricalState.isUnassigned(state)) {		   		dataArray[count] =state;  //we now have the region to be checked stored as a CharaterState[]		   		count++;   			}   		}   		   		 //  		String seq = searchBuffer.toString();		if (numBases>0) {//			Debugg.println("numBases: " + numBases);			if (restEnzymeVector!=null) {				//int[] matchedEnzymes = 				restEnzymeVector.getMatchedEnzymes(dataArray, cutPosition);  //pass cutPosition			}		}		else 			discreetAlert(commandRec, "Sorry, to use the restriction enzyme search you need to have one or more stretches of sequence selected.");   	}	/*.................................................................................................................*/    	 public String getName() {		return "Restriction Enzyme Search";   	 }	/*.................................................................................................................*/  	 public boolean showCitation() {		return false;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Does a search for restriction enyzmes that will cut the selected data.";   	 }}	