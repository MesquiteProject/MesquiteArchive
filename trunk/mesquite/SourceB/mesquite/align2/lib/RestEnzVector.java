/* Mesquite source code.  Copyright 1997-2005 W. Maddison and D. Maddison. Version 1.06, September 2005.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align2.lib; import java.util.*;import java.awt.*;import java.io.*;import java.awt.image.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.align2.lib.*;import mesquite.categ.lib.*;/* ======================================================================== */public  class RestEnzVector extends ListableVector {	static final String restFileName = "RestEnzymes.txt";	boolean enzymesLoaded = false;		/*.................................................................................................................*/ 	public RestEnzVector() {		super();		loadEnzymes();	}	/*.................................................................................................................*/	public boolean hasEnzymes() {		return enzymesLoaded;	}	/*.................................................................................................................*/	public void getMatchedEnzymes(long[] dataArray, int requiredPosition){		int numMatches=0;		for (int i=0; i<size(); i++) {			RestEnzyme restEnzyme = (RestEnzyme)elementAt(i);			if (restEnzyme!=null && restEnzyme.cutsAtPosition(dataArray,requiredPosition, false)) {				Debugg.println("Cut by " + restEnzyme.getName() + ", " + restEnzyme.getBasesAsString() + ", sources: " + restEnzyme.getSources());				numMatches++;			}//			else//				Debugg.println("NOT cut by " + restEnzyme.getName() + ", " + restEnzyme.getBasesAsString());		}		if (numMatches==0)			Debugg.println("No matches found");//Debugg.println("getMatchedEnzymes end");	}	/*.................................................................................................................*/	private void loadEnzymeDetails(String cPath, File cFile) {		String contents = MesquiteFile.getFileContentsAsString(cPath);		if (!StringUtil.blank(contents)) {			Parser fileParser = new Parser(contents);			fileParser.setPosition(0);			boolean readEnzymes = false;			Parser lineParser = new Parser(); 			lineParser.setWhitespaceString(","+StringUtil.defaultWhitespace);			String line = fileParser.getRawNextLine();  // get first line			while (fileParser.getPosition()<fileParser.getString().length()) {				if (!StringUtil.blank(line)) {					lineParser.setString(line);					String firstToken = lineParser.getFirstToken();					 if (firstToken.equals("!")) {					 	readEnzymes = true;					}					else if (readEnzymes) {  						String enzymeName = lineParser.getFirstToken();						String bases = lineParser.getNextToken();						String cutPosition = lineParser.getNextToken();						String token = lineParser.getNextToken();						if (MesquiteInteger.isCombinable(MesquiteInteger.fromString(token)))  // then is non-palindrome, had another cut site listed							token = lineParser.getNextToken();						token = lineParser.getNextToken();						String sources = lineParser.getNextToken();						if (!StringUtil.blank(sources)) {							RestEnzyme restEnzyme = new RestEnzyme(enzymeName,bases,cutPosition,sources);							addElement((Listable)restEnzyme, false);							enzymesLoaded = true;//Debugg.println("name: "+ enzymeName+", bases: " + bases + ", sources: "+sources);						}					}				}				line = fileParser.getRawNextLine();  // get next line			}		}	}	/*.................................................................................................................*/	private void loadEnzymes(){		String path = MesquiteModule.prefsDirectory+ MesquiteFile.fileSeparator + restFileName;		File cFile = new File(path);		if (cFile.exists() && !cFile.isDirectory()) {			loadEnzymeDetails(path, cFile);		}		else {		}	}   	 }