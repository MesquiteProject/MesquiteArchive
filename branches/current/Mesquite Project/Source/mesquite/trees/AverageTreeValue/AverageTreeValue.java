/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.trees.AverageTreeValue;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class AverageTreeValue extends NumberForTreeBlock {	MesquiteNumber average;	MesquiteNumber treeValue;	NumberForTree treeValueTask;	Taxa oldTaxa = null;	MesquiteString charSourceName;    	MesquiteCommand mc;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {    	 	treeValue=new MesquiteNumber();    	 	average=new MesquiteNumber(); 		treeValueTask = (NumberForTree)hireEmployee(commandRec, NumberForTree.class, "Value to calculate for trees"); 		if (treeValueTask == null) 			return sorry(commandRec, getName() + " couldn't start because no calculator module was obtained"); 		mc =makeCommand("setCalculator",  this); 		treeValueTask.setHiringCommand(mc);		MesquiteSubmenuSpec mss = addSubmenu(null, "Values", mc);//TODO: checkmark				mss.setList(NumberForTree.class);  		return true;  	 }  	 	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return true;   	 }	 public boolean isPrerelease(){	 	return false;	 }	 	/*.................................................................................................................*/	public void initialize(TreeVector trees, CommandRecord commandRec) {		treeValueTask.initialize(trees.getTree(0), commandRec);	}	/*.................................................................................................................*/	public void calculateNumber(TreeVector trees, MesquiteNumber result, MesquiteString resultString, CommandRecord commandRec) {    	 	if (result==null)    	 		return;    	 	average.setValue((int)0);    	 	int count = 0; 	    	 MesquiteNumber tl = new MesquiteNumber();    	 	for (int itr = 0; itr<trees.size(); itr++) {    	 		Tree tree = trees.getTree(itr);    			tl.setToUnassigned();	    	 	treeValueTask.calculateNumber(tree, tl, null, commandRec);	    	 	if (tl.isCombinable()) {	    	 		average.add(tl);	    	 		count++;	    	 	}    	 	}    	 	average.divideBy(count);		result.setValue(average);		if (resultString!=null)			resultString.setValue("Average "+ treeValueTask.getName() + ": " + average.toString());	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	Snapshot temp = new Snapshot();   	 	temp.addLine("setCalculator ", treeValueTask); 	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets the module to calculate numbers for the trees", "[name of module]", commandName, "setCalculator")) {    	 		NumberForTree temp =   (NumberForTree)replaceEmployee(commandRec, NumberForTree.class, arguments, "Which value to calculate?", treeValueTask); 			if (temp!=null) { 				treeValueTask = temp; 				treeValueTask.setHiringCommand(mc);				parametersChanged(null, commandRec); 			}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }   	/*.................................................................................................................*/    	 public String getParameters() {		if (treeValueTask==null)			return null;		return "Average for " + treeValueTask.getName();   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Average Tree Value";   	 }	/*.................................................................................................................*/    	 public String getVeryShortName() {		if (treeValueTask==null)			return getName();		return "Average " + treeValueTask.getName();   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Calculates the average of some value for trees in a tree block." ;   	 }}