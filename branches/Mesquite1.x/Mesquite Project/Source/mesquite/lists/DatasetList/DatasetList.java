/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison. Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lists.DatasetList;/*~~  */import mesquite.lists.lib.*;import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/* ======================================================================== */public class DatasetList extends ListLVModule {	ListableVector datas;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {		datas = getProject().getCharacterMatrices();		return true;  	 }  	 public boolean showing(Object obj){    	 		return (getModuleWindow()!=null && obj == datas);  	 }	public boolean resetMenusOnNameChange(){		return true;	}  	 public void showListWindow(Object obj, CommandRecord commandRec){		setModuleWindow(new ListableVectorWindow(this));     	 	((ListableVectorWindow)getModuleWindow()).setObject(datas, commandRec);     	 	datas.addListener(this);		makeMenu("List");				MesquiteSubmenuSpec mss2 = addSubmenu(null, "Utilities", MesquiteModule.makeCommand("doUtility",  this));		mss2.setList(DatasetsListUtility.class);		if (!commandRec.scripting()){			DataSetsListAssistant assistant = (DataSetsListAssistant)hireNamedEmployee(commandRec, DataSetsListAssistant.class, StringUtil.tokenize("Taxa of data matrix"));	 		if (assistant!= null){	 			((ListableVectorWindow)getModuleWindow()).addListAssistant(assistant, commandRec);				assistant.setUseMenubar(false);			}			assistant = (DataSetsListAssistant)hireNamedEmployee(commandRec, DataSetsListAssistant.class, StringUtil.tokenize("Number of characters of data matrix"));	 		if (assistant!= null){	 			((ListableVectorWindow)getModuleWindow()).addListAssistant(assistant, commandRec);				assistant.setUseMenubar(false);			}			assistant = (DataSetsListAssistant)hireNamedEmployee(commandRec, DataSetsListAssistant.class, "#DatasetsListClass");	 		if (assistant!= null){	 			((ListableVectorWindow)getModuleWindow()).addListAssistant(assistant, commandRec);				assistant.setUseMenubar(false);			}					} 		resetContainingMenuBar();		resetAllWindowsMenus();  	 }	/*.................................................................................................................*/	public void changed(Object caller, Object obj, Notification notification, CommandRecord commandRec){		int code = Notification.getCode(notification);		if (obj == datas && code == MesquiteListener.ELEMENT_CHANGED && getModuleWindow()!=null){			((TableWindow)getModuleWindow()).getTable().synchronizeRowSelection(datas);			((TableWindow)getModuleWindow()).getTable().repaintAll();		}	}	/*.................................................................................................................*/	/* following required by ListModule*/  	 public Object getMainObject(){  	 	return datas;  	 }  	 public int getNumberOfRows(){  	 	if (datas==null)  	 		return 0;  	 	else  	 		return datas.size();  	 }	public Class getAssistantClass(){		return DataSetsListAssistant.class;	}	/*.................................................................................................................*/	public boolean rowsDeletable(){		return true;	}	public boolean deleteRow(int row){		if (row<0 || row>= getNumberOfRows())			return false;		CharacterData data = getProject().getCharacterMatrix(row);		getProject().removeFileElement(data);//must remove first, before disposing		data.dispose();		return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {    	 	if (getModuleWindow()==null || !getModuleWindow().isVisible())   	 		return null;   	 	Snapshot temp = new Snapshot();      	 	if (getModuleWindow()!=null)			getModuleWindow().incorporateSnapshot(temp, file);  	 	temp.addLine("showWindow");  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Hires utility module to operate on the data matrices", "[name of module]", commandName, "doUtility")) { //12 Jan 02   	 		if (getProject().getCharacterMatrices() !=null){	    	 		DatasetsListUtility tda= (DatasetsListUtility)hireNamedEmployee(commandRec, DatasetsListUtility.class, arguments);				if (tda!=null) {					MesquiteTable table = ((ListWindow)getModuleWindow()).getTable();					ListableVector datas = null;					if (table.anyRowSelected()){						ListableVector alldatas = getProject().getCharacterMatrices();						datas = new ListableVector();						for (int i=0; i<alldatas.size(); i++)							if (table.isRowSelected(i))								datas.addElement(alldatas.elementAt(i), true);					}					else						datas = getProject().getCharacterMatrices();					boolean a = tda.operateOnDatas(datas, commandRec);					if (!tda.pleaseLeaveMeOn())						fireEmployee(tda);				}			}    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);		return null;   	 }	/*.................................................................................................................*/	public String getItemTypeName(){		return "Character matrix";	}	public String getItemTypeNamePlural(){		return "Character matrices";	}	/*.................................................................................................................*/    	 public String getName() {		return "Character Matrices List";   	 }   	 	/*.................................................................................................................*/   	  	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Makes windows listing character data matrices and information about them." ;   	 }	/*.................................................................................................................*/	/** Requests a window to close.  In the process, subclasses of MesquiteWindow might close down their owning MesquiteModules etc.*/ 	public void windowGoAway(MesquiteWindow whichWindow) {			whichWindow.hide();	}   	    	 }