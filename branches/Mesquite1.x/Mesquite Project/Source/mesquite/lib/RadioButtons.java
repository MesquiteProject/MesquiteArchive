/* Mesquite source code.  Copyright 2001-2006 D. Maddison and W. Maddison. Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lib;import java.awt.*;/*===============================================*//** This class holds radio buttons (CheckboxGroup) for an ExtensibleDialog. */public class RadioButtons {	ExtensibleDialog dialog;	CheckboxGroup cbg;	Checkbox[] checkboxArray;	int numCheckBoxes;	/*.................................................................................................................*/	public RadioButtons (ExtensibleDialog dialog, String[] labels, int defaultBox) {			this.dialog = dialog;		cbg = new CheckboxGroup();		numCheckBoxes = labels.length;		checkboxArray = new Checkbox[numCheckBoxes];		dialog.forceNewPanel();	        Panel newPanel = dialog.addNewDialogPanel();  	        GridBagLayout gridBag = new GridBagLayout();	        GridBagConstraints constraints = new GridBagConstraints();	        constraints.gridx=0;	       	constraints.gridy = GridBagConstraints.RELATIVE;	        constraints.gridwidth=1;	        constraints.gridheight=1;	        constraints.fill=GridBagConstraints.BOTH;	        constraints.anchor=GridBagConstraints.WEST;	        constraints.insets = new Insets(0,25,0,20);	        constraints.weighty=1.0;		newPanel.setLayout(gridBag);					        for (int i=0; i< numCheckBoxes; i++) {	        	checkboxArray[i] = new Checkbox(labels[i], cbg, true);	        	newPanel.add(checkboxArray[i]);	        	gridBag.setConstraints(checkboxArray[i],constraints);	        }	        if (defaultBox>=0 && defaultBox<=numCheckBoxes)	        	cbg.setSelectedCheckbox(checkboxArray[defaultBox]);	        else	        	cbg.setSelectedCheckbox(checkboxArray[0]);	}	/*.................................................................................................................*/	public Checkbox getSelectedCheckbox () {		return cbg.getSelectedCheckbox();	}	/*.................................................................................................................*/	public CheckboxGroup getCheckBoxGroup () {		return cbg;	}	/*.................................................................................................................*/	public int getValue () {		Checkbox checkbox  = cbg.getSelectedCheckbox();	        for (int i=0; i< numCheckBoxes; i++) {	        	if (checkbox == checkboxArray[i]) 	        		return i;	        }	        return 0;	}}