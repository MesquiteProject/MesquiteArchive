/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison.Version 1.1, May 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.lib;import java.awt.*;import java.awt.event.*;import java.awt.image.*;/* ======================================================================== *//** This class adds drop down menu capabilities to panels.  A default component of the drop downmenu is the Font selection */public class MousePanel extends Panel implements Commandable, FileDirtier, MouseMotionListener, MouseListener  {	MesquiteCommand downCommand, upCommand, dragCommand, movedCommand, clickedCommand, enteredCommand, exitedCommand;	 long moveFrequency, moveCount;	boolean suppressEvents = false; //WWW	private int currentX = -1;	private int currentY = -1;	int ps = 0;  //reserved for use in preferred with as window sidepanel	private Cursor disabledCursor = null;		static long exited, clicked, entered,pressed, released, dragged, moved;	static{		exited = clicked= entered=pressed=released=dragged= moved=0;	}	public MousePanel() {		super();		try {			setFocusTraversalKeysEnabled(false);		}		catch (Error e){		}		moveCount =0;		moveFrequency = 0;		setForeground(Color.black);		addMouseMotionListener(this);		addMouseListener(this);		downCommand= MesquiteModule.makeCommand("mouseDown", this);		upCommand= MesquiteModule.makeCommand("mouseUp", this);		dragCommand= MesquiteModule.makeCommand("mouseDrag", this);		movedCommand= MesquiteModule.makeCommand("mouseMoved", this);		movedCommand.setLetMeFinish(false);		clickedCommand= MesquiteModule.makeCommand("mouseClicked", this);		enteredCommand= MesquiteModule.makeCommand("mouseEntered", this);		enteredCommand.setLetMeFinish(false);		exitedCommand= MesquiteModule.makeCommand("mouseExited", this);		exitedCommand.setLetMeFinish(false);		downCommand.hideInList = true;		upCommand.hideInList = true;		movedCommand.hideInList = true;		clickedCommand.hideInList = true;		enteredCommand.hideInList = true;		exitedCommand.hideInList = true;		setDontDuplicateCommands(false);		disabledCursor = setupDisabledCursor("disabled.gif", "disabled", 4,2);		if (disabledCursor ==null)			disabledCursor = Cursor.getDefaultCursor();	}	public void dispose(){		if (downCommand!=null)			downCommand.dispose();		if (upCommand!=null)			upCommand.dispose();		if (movedCommand!=null)			movedCommand.dispose();		if (clickedCommand!=null)			clickedCommand.dispose();		if (enteredCommand!=null)			enteredCommand.dispose();		if (exitedCommand!=null)			exitedCommand.dispose();		downCommand = null;		upCommand = null;		movedCommand = null;		clickedCommand = null;		enteredCommand = null;		exitedCommand = null;	}		public void setMoveFrequency(long mf){		moveFrequency = mf;	}		public void deletePendingMoveDrag(){		dragCommand.deleteOnQueue();		movedCommand.deleteOnQueue();	}	public void setDontDuplicateCommands(boolean dd){		downCommand.setDontDuplicate(dd);		dragCommand.setDontDuplicate(dd);		upCommand.setDontDuplicate(dd);		movedCommand.setDontDuplicate(dd);		clickedCommand.setDontDuplicate(dd);		enteredCommand.setDontDuplicate(dd);		exitedCommand.setDontDuplicate(dd);	}	MesquiteTool getT(){		Container c = this;		while ((c= c.getParent())!=null){			if (c instanceof MesquiteWindow) {				MesquiteTool tool = ((MesquiteWindow)c).getCurrentTool();				return tool;			}		}		return null;	}	Image disabledCursorImage = null;	/*.................................................................................................................*/	private Cursor setupDisabledCursor(String imageFileName, String name, int x, int y){  		try { //just in case Java2 not available			Image im =  disabledCursorImage;  			if (im == null){				String s=MesquiteModule.getRootImageDirectoryPath();				Dimension best = Toolkit.getDefaultToolkit().getBestCursorSize(16, 16);				if ((best.width>16 || best.height>16) && MesquiteFile.fileExists(MesquiteModule.getSizedRootImageFilePath(best.width, imageFileName))){					im = MesquiteImage.getImage((MesquiteModule.getSizedRootImageFilePath(best.width, imageFileName)));					if (im == null && s!=null)						im = MesquiteImage.getImage(s + imageFileName);				}				else if (s!=null)					im = MesquiteImage.getImage(s + imageFileName);				//setCursorImage(im);			}			Point p = new Point(x, y);			if (im== null)				return null;			disabledCursorImage = im;			Cursor c = Toolkit.getDefaultToolkit().createCustomCursor(im, p, name);			return c;		}		catch (Throwable t){			return null;		}	}	/*...............................................................................................................*/	public Cursor getDisabledCursor() {		return disabledCursor;	}	public int getMouseX(){		return currentX;	}	public int getMouseY(){		return currentY;	}	public void setVisible(boolean vis){		super.setVisible(vis);		invalidate(); //to workaround bug in Jaguar		validate(); //to workaround bug in Jaguar	}	/*public void update (Graphics g) {		try {			super.update(g);		}		catch (OutOfMemoryError e){		}	}*/	  	MesquiteInteger pos = new MesquiteInteger();	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Mouse down", "[modifiers as integer][click count][when][x][y]", commandName, "mouseDown")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int clickCount = MesquiteInteger.fromString(arguments, pos);    	 		long when = MesquiteLong.fromString(ParseUtil.getToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		mouseDown(modifiers, clickCount, when, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse up", "[modifiers as integer][x][y]", commandName, "mouseUp")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		mouseUp(modifiers, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse drag", "[modifiers as integer][x][y]", commandName, "mouseDrag")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		mouseDrag(modifiers, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse moved", "[modifiers as integer][x][y]", commandName, "mouseMoved")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		MesquiteTool t = getT();    	 		if (t!=null)    	 			t.cursorInPanel(modifiers, x, y, this, true);    	 		mouseMoved(modifiers, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse entered", "[modifiers as integer][x][y]", commandName, "mouseEntered")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		MesquiteTool t = getT();    	 		if (t!=null)    	 			t.cursorInPanel(modifiers, x, y, this, true);    	 		mouseEntered(modifiers, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse exited", "[modifiers as integer][x][y]", commandName, "mouseExited")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		MesquiteTool t = getT();    	 		if (t!=null)    	 			t.cursorInPanel(modifiers, x, y, this, false);    	 		mouseExited(modifiers, x, y, getT());    	 	}    	 	else if (checker.compare(this.getClass(), "Mouse clicked", "[modifiers as integer][x][y]", commandName, "mouseClicked")) {    	 		int modifiers = MesquiteInteger.fromString(ParseUtil.getFirstToken(arguments, pos));    	 		int x = MesquiteInteger.fromString(arguments, pos);    	 		int y = MesquiteInteger.fromString(arguments, pos);    	 		mouseClicked(modifiers, x, y, getT());    	 	}    	 	return null;    	 }	/*.................................................................................................................*/  	public void mouseDown (int modifiers, int clickCount, long when, int x, int y, MesquiteTool tool) {	}   	public void mouseUp(int modifiers, int x, int y, MesquiteTool tool) {   	}   	public void mouseDrag(int modifiers, int x, int y, MesquiteTool tool) {   	}   	public void mouseMoved(int modifiers, int x, int y, MesquiteTool tool) {   	}   	public void mouseClicked(int modifiers, int x, int y, MesquiteTool tool) {   	}   	public void mouseEntered(int modifiers, int x, int y, MesquiteTool tool) {   	}   	public void mouseExited(int modifiers, int x, int y, MesquiteTool tool) {   	}	/*...............................................................................................................*/	public void mouseClicked(MouseEvent e)   {   		if (suppressEvents || clickedCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();   		clickedCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " " +  e.getX() + " " + e.getY(), null, false, false);  	} 	/*...............................................................................................................*/	public void mouseEntered(MouseEvent e)   {   		if (suppressEvents || enteredCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();   		enteredCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " " +  e.getX() + " " + e.getY(), null, false, false);  	}	/*...............................................................................................................*/	public void mouseExited(MouseEvent e)   {   		if (suppressEvents || exitedCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();   		exitedCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " " +  e.getX() + " " + e.getY(), null, false, false);  	}	/*...............................................................................................................*/	/* these events are handled via the MesquiteCommand system so that they can be put on the thread cue to prevent interference with already running threads */	public void  mousePressed(MouseEvent e)   {   		if (suppressEvents || downCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();   		downCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " " + e.getClickCount() + " " + e.getWhen() + " " +  e.getX() + " " + e.getY(), null, false, false);	}	/*...............................................................................................................*/	public void mouseReleased(MouseEvent e)  {   		if (suppressEvents || upCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();   		upCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " "  +  e.getX() + " " + e.getY(), null, false, false);	}	/*...............................................................................................................*/	public void mouseDragged(MouseEvent e)  {   		if (suppressEvents || dragCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();		if (moveFrequency == 0 || moveCount++ % moveFrequency ==0) {   			dragCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " "  +  e.getX() + " " + e.getY(), null, false, false);   		}	}	/*...............................................................................................................*/	public void mouseMoved(MouseEvent e) {   		if (suppressEvents || movedCommand == null)   			return;   		currentX = e.getX();   		currentY = e.getY();		if (moveFrequency == 0 || moveCount++ % moveFrequency ==0) {   			movedCommand.doItMainThread(Integer.toString(MesquiteEvent.getModifiers(e)) + " " +  e.getX() + " " + e.getY(), null, false, false);	   	}	}		/*.................................................................................................................*/	/** For FileDirtier interface */	public void fileDirtiedByCommand(MesquiteCommand command){		if (command != null && command.getOwner() == this && ("mouseMoved".equalsIgnoreCase(command.getName()) || "mouseExited".equalsIgnoreCase(command.getName()) || "mouseEntered".equalsIgnoreCase(command.getName())))			return;   		MesquiteWindow w = MesquiteWindow.windowOfItem(this);   		if (w!=null)   			w.fileDirtiedByCommand(command);	}	public void printAll(Graphics g){		print(g);		printComponents(g);	}}