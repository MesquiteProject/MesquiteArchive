/* Mesquite source code.  Copyright 1997-2006 W. Maddison and D. Maddison. Version 1.11, June 2006.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.parsimony.Treelength;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.parsimony.lib.*;/* ======================================================================== */public class Treelength extends ObjFcnForTree {	MesquiteNumber treelength;	NumberForMatrixAndTree lengthTask;	MatrixSourceCoord characterSourceTask;	Taxa oldTaxa = null;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, CommandRecord commandRec, boolean hiredByName) {    	 	treelength=new MesquiteNumber(); 		lengthTask = (NumberForMatrixAndTree)hireNamedEmployee(commandRec, NumberForMatrixAndTree.class, "#TreelengthForMatrix"); 		if (lengthTask == null) 			return sorry(commandRec, getName() + " couldn't start because no treelength calculator was obtained."); 		characterSourceTask = (MatrixSourceCoord)hireEmployee(commandRec, MatrixSourceCoord.class, "Source of characters (for treelength)"); 		if (characterSourceTask == null) 			return sorry(commandRec, getName() + " couldn't start because no source of characters was obtained.");  		return true;  	 }  	 public void employeeQuit(MesquiteModule m){  	 	if (m==lengthTask || m == characterSourceTask)  	 		iQuit();  	 }  	    	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/   	public void initialize(Tree tree, CommandRecord commandRec){   		characterSourceTask.initialize(tree.getTaxa(), commandRec);   	}	/*.................................................................................................................*/	public void calculateNumber(Tree tree, MesquiteNumber result, MesquiteString resultString, CommandRecord commandRec) {    	 	if (result==null)    	 		return;    	 	if (tree == null)    	 		return;      	 	result.setToUnassigned();    	 	if (resultString!=null)    	 		resultString.setValue("");  	 	    	 	Taxa taxa = tree.getTaxa();    	 			MCharactersDistribution matrix = characterSourceTask.getCurrentMatrix(tree, commandRec);    	 			if (matrix == null) {			if (resultString!=null)				resultString.setValue("Treelength not calculated; no matrix supplied");			return;		} 		lengthTask.calculateNumber(tree, matrix, result, resultString, commandRec);	}	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandRecord commandRec, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets module supplying characters", "[name of module]", commandName, "setCharacterSource")) { //temporary, for data files using old system without coordinators 			return characterSourceTask.doCommand(commandName, arguments, commandRec, checker);    	 	}    	 	else    	 		return super.doCommand(commandName, arguments, commandRec, checker);   	 }	/*.................................................................................................................*/	public boolean biggerIsBetter() {		return false;	}	/*.................................................................................................................*/   	 public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification, CommandRecord commandRec) {   	 	if (employee==characterSourceTask) {			parametersChanged(notification, commandRec);   	 	}   	 	else if (employee==lengthTask) {			parametersChanged(notification, commandRec);   	 	}   	 }	/*.................................................................................................................*/    	 public String getParameters() {		return characterSourceTask.getParameters();   	 }	/*.................................................................................................................*/    	 public String getName() {		return "Treelength";   	 }	/*.................................................................................................................*/  	 public boolean isPrerelease() {		return false;   	 }   	 public boolean showCitation(){   	 	return true;   	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}	/*.................................................................................................................*/  	 public String getExplanation() {		return "Calculates the parsimony length of a tree.";   	 }}