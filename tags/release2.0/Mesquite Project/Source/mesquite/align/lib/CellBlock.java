/* Mesquite source code.  Copyright 1997-2007 W. Maddison and D. Maddison.Version 2.0, September 2007.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.align.lib; import java.util.*;import java.awt.*;import java.awt.image.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;import java.util.zip.*;/* ======================================================================== */public class CellBlock {	CategoricalData data;	MesquiteTable table;		MesquiteInteger firstCharInBlock;	MesquiteInteger lastCharInBlock;	int originalFirstCharInFullBlock;	int originalLastCharInFullBlock;	int originalFirstCharInBlock;	int originalLastCharInBlock;	int currentFirstCharInBlock = 0;	int currentLastCharInBlock = 0;	int previousFirstCharInBlock = 0;	int previousLastCharInBlock = 0;		MesquiteInteger firstTaxonInBlock;	MesquiteInteger lastTaxonInBlock;	int originalFirstTaxonInFullBlock;	int originalLastTaxonInFullBlock;	int originalFirstTaxonInBlock;	int originalLastTaxonInBlock;	int currentFirstTaxonInBlock = 0;	int currentLastTaxonInBlock = 0;	int previousFirstTaxonInBlock = 0;	int previousLastTaxonInBlock = 0;	public CellBlock(CategoricalData data, MesquiteTable table) {		this.data = data;		this.table = table;	}	/*.................................................................................................................*/   	public void restoreCharBlock(MesquiteBoolean dataChanged){    // takes data that is currently at currentBlock location and move to original location   		int distanceToMove = originalFirstCharInBlock - previousFirstCharInBlock;		int added = data.moveCells(previousFirstCharInBlock,previousLastCharInBlock, distanceToMove, currentFirstTaxonInBlock, true, false, true, false,dataChanged);				table.redrawBlock(MesquiteInteger.minimum(previousFirstCharInBlock, originalFirstCharInBlock), currentFirstTaxonInBlock, MesquiteInteger.maximum(previousLastCharInBlock, originalLastCharInBlock), currentFirstTaxonInBlock);   	}	/*.................................................................................................................*/   	public void switchCharBlock(int icStart, int icEnd){     		originalFirstCharInBlock=icStart;    		originalLastCharInBlock=icEnd;  		currentFirstCharInBlock=icStart;    		currentLastCharInBlock=icEnd;   		previousFirstCharInBlock=icStart;    		previousLastCharInBlock=icEnd;   	}	/*.................................................................................................................*/   	public void setBlocksOnTouch(int icStart, int icEnd, int itStart, int itEnd){     		originalFirstCharInBlock=icStart;    		originalLastCharInBlock=icEnd;   		originalFirstTaxonInBlock=itStart;   		originalLastTaxonInBlock=itEnd;  		currentFirstCharInBlock=icStart;    		currentLastCharInBlock=icEnd;   		currentFirstTaxonInBlock=itStart;   		currentLastTaxonInBlock=itEnd;   		previousFirstCharInBlock=icStart;    		previousLastCharInBlock=icEnd;   		previousFirstTaxonInBlock=itStart;   		previousLastTaxonInBlock=itEnd;   	}	/*.................................................................................................................*/   	public void setOriginalFullBlockOnTouch(int icStart, int icEnd, int itStart, int itEnd){     		originalFirstCharInFullBlock=icStart;    		originalLastCharInFullBlock=icEnd;   		originalFirstTaxonInFullBlock=itStart;   		originalLastTaxonInFullBlock=itEnd;   	}	/*.................................................................................................................*/   	public void setOriginalBlock(int icStart, int icEnd, int itStart, int itEnd){     		originalFirstCharInBlock=icStart;    		originalLastCharInBlock=icEnd;   		originalFirstTaxonInBlock=itStart;   		originalLastTaxonInBlock=itEnd;   	}	/*.................................................................................................................*/   	public void setOriginalFirstCharInBlock(int icStart){     		originalFirstCharInBlock=icStart;   	}	/*.................................................................................................................*/   	public int getOriginalFirstCharInBlock(){     		return originalFirstCharInBlock;    	}	/*.................................................................................................................*/   	public int getOriginalLastCharInBlock(){      		return originalLastCharInBlock;    	}	/*.................................................................................................................*/   	public int getOriginalFirstTaxonInBlock(){     		return originalFirstTaxonInBlock;   	}	/*.................................................................................................................*/   	public int getOriginalLastTaxonInBlock(){     		return originalLastTaxonInBlock;   	}	/*.................................................................................................................*/   	public int getOriginalFirstCharInFullBlock(){     		return originalFirstCharInFullBlock;    	}	/*.................................................................................................................*/   	public int getOriginalLastCharInFullBlock(){      		return originalLastCharInFullBlock;    	}	/*.................................................................................................................*/   	public int getOriginalFirstTaxonInFullBlock(){     		return originalFirstTaxonInFullBlock;   	}	/*.................................................................................................................*/   	public int getOriginalLastTaxonInFullBlock(){     		return originalLastTaxonInFullBlock;   	}	/*.................................................................................................................*/   	public void setCurrentCharBlock(int icStart, int icEnd){     		currentFirstCharInBlock=icStart;    		currentLastCharInBlock=icEnd;   	}	/*.................................................................................................................*/   	public void setCurrentBlock(int icStart, int icEnd, int itStart, int itEnd){     		currentFirstCharInBlock=icStart;    		currentLastCharInBlock=icEnd;   		currentFirstTaxonInBlock=itStart;   		currentLastTaxonInBlock=itEnd;   	}	/*.................................................................................................................*/   	public int getCurrentFirstCharInBlock(){     		return currentFirstCharInBlock;    	}	/*.................................................................................................................*/   	public int getCurrentLastCharInBlock(){      		return currentLastCharInBlock;    	}	/*.................................................................................................................*/   	public int getCurrentFirstTaxonInBlock(){     		return currentFirstTaxonInBlock;   	}	/*.................................................................................................................*/   	public int getCurrentLastTaxonInBlock(){     		return currentLastTaxonInBlock;   	}	/*.................................................................................................................*/   	public void setPreviousCharBlock(int icStart, int icEnd){     		previousFirstCharInBlock=icStart;    		previousLastCharInBlock=icEnd;   	}	/*.................................................................................................................*/   	public void transferCurrentToPrevious(){     		previousFirstCharInBlock=currentFirstCharInBlock;    		previousLastCharInBlock=currentLastCharInBlock;   		previousFirstTaxonInBlock=currentFirstTaxonInBlock;   		previousLastTaxonInBlock=currentLastTaxonInBlock;   	}	/*.................................................................................................................*/   	public void setPreviousBlock(int icStart, int icEnd, int itStart, int itEnd){     		previousFirstCharInBlock=icStart;    		previousLastCharInBlock=icEnd;   		previousFirstTaxonInBlock=itStart;   		previousLastTaxonInBlock=itEnd;   	}	/*.................................................................................................................*/   	public int getPreviousFirstCharInBlock(){     		return previousFirstCharInBlock;    	}	/*.................................................................................................................*/   	public int getPreviousLastCharInBlock(){      		return previousLastCharInBlock;    	}	/*.................................................................................................................*/   	public int getPreviousFirstTaxonInBlock(){     		return previousFirstTaxonInBlock;   	}	/*.................................................................................................................*/   	public int getPreviousLastTaxonInBlock(){     		return previousLastTaxonInBlock;   	}	/*.................................................................................................................*/   	public void addToCharBlockValues(int added){     		originalFirstCharInBlock+=added;    		originalLastCharInBlock+=added;   		currentFirstCharInBlock+=added;    		currentLastCharInBlock+=added;   		previousFirstCharInBlock+=added;    		previousLastCharInBlock+=added;   	}	/*.................................................................................................................*/   	public void getBlockInSequence(int ic, int it, MesquiteInteger firstInBlock, MesquiteInteger lastInBlock, boolean wholeSelectedBlock, boolean wholeSequenceLeft, boolean wholeSequenceRight, MesquiteBoolean cellHasInapplicable, MesquiteBoolean leftIsInapplicable, MesquiteBoolean rightIsInapplicable){  // determines the block that was touched		cellHasInapplicable.setValue(false);		leftIsInapplicable.setValue(false);		rightIsInapplicable.setValue(false);   		firstInBlock.setValue(0);   		lastInBlock.setValue(data.getNumChars());   		if (ic>0)   			if (data.isInapplicable(ic-1, it))   				leftIsInapplicable.setValue(true);   		if (ic<data.getNumChars())   			if (data.isInapplicable(ic+1, it))   				rightIsInapplicable.setValue(true);   		if (data.isInapplicable(ic, it)) {   			firstInBlock.setValue(ic);   			lastInBlock.setValue(-1);   			cellHasInapplicable.setValue(true);   			return;   		}   		if (wholeSequenceLeft) {	  		firstInBlock.setValue(data.firstApplicable(it));	   	}    		else if (wholeSelectedBlock) {	   		for (int i=ic; i>=0; i--) {   // find first unselected cell to the left of this point				if (!table.isCellSelected(i, it)){  // should be isToolInapplicable					firstInBlock.setValue(i+1);					break;				}	   		}  		}	   	else {	   		for (int i=ic; i>=0; i--) {   // find first gap to the left of this point				if (data.isInapplicable(i, it)){  // should be isToolInapplicable					firstInBlock.setValue(i+1);					break;				}	   		}	   	}   		if (wholeSequenceRight) {	  		lastInBlock.setValue(data.lastApplicable(it));   		}  		else if (wholeSelectedBlock) {	  		for (int i=ic; i<data.getNumChars(); i++) {  // find first unselected cell to the right of this point				if (!table.isCellSelected(i, it)){ 					lastInBlock.setValue(i-1);					return;				}	   		}  		}  		else {	  		for (int i=ic; i<data.getNumChars(); i++) {  // find first gap to the right of this point				if (data.isInapplicable(i, it)){  // should be isToolInapplicable					lastInBlock.setValue(i-1);					return;				}	   		}   		}   	}}